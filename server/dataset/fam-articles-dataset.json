[
  {
    "id": "f38a3280af1a",
    "content": "2022 WEB Program is Launched!\n\nChange comes from mindset and habits\n\nAs I announced in my previous article:\n\nThis year, I decided to lead the way for current and future developers. This won't be just through my articles but also personal coaching.\n\nIt's FREE!\n\nReasons to become a developer?\n\nNo one is born as a developer. If you want, you can be one!\n\nYou don't need a CS degree to be a developer, trust me!\n\nThe current market needs developers! So if you learn web, you'll definitely find a job and why not your dream job!\n\nDidn't find a job in your field? Convert to a web developer and with a few years of experience, you'll be negotiating and picking the job you want!\n\nYou can be well paid in this field.\n\nYou won't be alone. I'll be your personal coach, and I'll do my best to share my knowledge and assist you in growing.\n\nIt's never late!\n\nThe game's rules:\n\nBe a follower and subscriber to the newsletter to receive the roadmap articles.\n\nThe rhythm won't be intense (only 2 to 3 articles per week). This will give you the time to read the article, learn from it, and ask all your questions.\n\nQuestions process:\n\n‚úãFor a general question that doesn't need personal coaching or support. You are invited to ask them in the comment section of the article.\n\n‚úãFor more technical needs or issues in your code (because there will be a lot of code in our journey), I invite you to DM me on my LinkedIn account. I check it every day.\n\nüó£Ô∏è By the way, I speak English, French, and Arabic. So feel free to ask me in any of those languages if you prefer)\n\nCheck the progress of the program here:\n\nLet your web developer journey begin!\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/f38a3280af1a"
  },
  {
    "id": "d76cbbc2f605",
    "content": "All my RxJS articles\n\nRxJS like you've never seen it!\n\nHello,\n\nDear readers, as promised, here are my RxJS articles. This list provides you with complete knowledge about RxJS.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/d76cbbc2f605"
  },
  {
    "id": "843c295530ee",
    "content": "How to Easily Track Form Changes in Angular 18\n\nUnified Control State Change Events Example\n\nHi there üëã\n\nAngular 18 is here, and one of its new interesting features is the Unified Control State Change Events in Forms. This is a global observable that subscribes to track changes in a form control value's state, such as changed, touched, untouched, dirty, pristine, etc.\n\nLet's quickly go in a quick round and learn how to use it! üòÉ\n\nBefore Angular 18...\n\nBefore this new feature, we track form events:\n\nThrough the valueChanges observable, where you can listen for changes in the form's value.\n\nOr through the statusChanges observable to track the validity state.\n\nIn Angular 18...\n\nWith v18, we got a new events property (readonly events: Observable<ControlEvent<TValue>>) that has been added to the FormControl class (or, more precisely, inherited from AbstractControl). This property is an observable that tracks changes in the form. As with any observable, you only need to subscribe to it to be notified about changes to the form.\n\nYou can find the PR of this feature here!\n\n‚ñ∂Ô∏è Available Event types:\n\ntouchchange: This event is triggered when the control's touched status changes.\n\npristinechange: This event is triggered by the control's pristine state changes.\n\nvaluechange: This event is triggered every time the value of the control changes.\n\nstatuschange: This event is triggered every time the control's status changes.\n\nFormSubmittedEvent: This event is triggered when the form is submitted.\n\nFormResetEvent: This event is triggered every time we reset the form.\n\n‚ñ∂Ô∏è Events in action:\n\nAll you need to do is to subscribe to the events like below and catch the event you're interested in:\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [ReactiveFormsModule],\n  template: `\n    <h2>Unified Control State Change Events</h2>\n    <form [formGroup]=\"fGroup\">\n      <input formControlName=\"unifiedCtrlDemo\" />\n      <button type=\"submit\">Submit</button>\n      <button type=\"reset\">Reset</button>\n    </form>\n    <p>{{ events() }}</p>\n  `,\n})\nexport class AComponent implements OnInit {\n\nfGroup = new FormGroup({\n  unifiedCtrlDemo: new FormControl(''),\n});\nevents = signal('');\n...\n\n ngOnInit() {\n    // control events \n    this.fGroup.get('unifiedCtrlDemo')?.events.subscribe((event) => {\n      if (event instanceof ValueChangeEvent) {\n        this.events.set(`Value changed: ${event.value}`);\n        console.log(this.events);\n      }\n\n      if (event instanceof TouchedChangeEvent) {\n        this.events.set(`Touched: ${event.touched}`);\n        console.log(this.events);\n      }\n\n      if (event instanceof PristineChangeEvent) {\n        this.events.set(`Pristine: ${event.pristine}`);\n        console.log(this.events);\n      }\n\n      if (event instanceof StatusChangeEvent) {\n        this.events.set(`Status changed: ${event.status}`);\n        console.log(this.events);\n      }\n    });\n\n    // form events \n    this.fGroup?.events.subscribe((event) => {\n      if (event instanceof FormSubmittedEvent) {\n        this.events.set('Form submitted');\n        console.log(this.events);\n      }\n\n      if (event instanceof FormResetEvent) {\n        this.events.set('Form reset');\n        console.log(this.events);\n      }\n    });\n  }\n...\n}\n\n</> Find the whole code here:\n\nBreak it, play with it, and learn!\n\nFinally...\n\nIt's great to have a standardized approach for handling form events. This will be helpful for novice Angular developers and will simplify the code for anyone who's using Angular forms in their applications.",
    "link": "https://medium.com/p/843c295530ee"
  },
  {
    "id": "145c098c9a1a",
    "content": "Angular 18 is OUT!! ü§©\n\nA Major Update Focused on Performance, DX, and Stability\n\nHi there üëã\n\nAngular 18 is here, bringing a wave of exciting new features and significant improvements focused on performance, developer experience, and stability. Let's dive in!\n\nüë©üèª‚Äçüî¨ Experimental support for zoneless change detection\n\nZone.js has triggered Angular's change detection for years, but it came with performance drawbacks. The new zoneless change detection is an experimental feature that aims to remove Zone.js.\n\nTo remove Zone.js from your polyfills in angular.json all that you need is to provide this:\n\nbootstrapApplication(App, {\n  providers: [\n    provideExperimentalZonelessChangeDetection()\n  ]\n});\n\nTherefore, your app will rely on signals for its reactivity and for more details about the story behind signals and Zone.js, I recommand reading this article:\n\nüè† Angular.dev is now the new official documentation for Angular.\n\nAngular.dev is now the official Angular documentation website. It got a modern interface, interactive tutorials, and improved search functionality powered by Algolia, making learning and reference more straightforward than ever.\n\n‚úÖ Stable and out of developer-preview features\n\nDeferrable views are now stable to use\n\nA great feature and a must-know. It improves Core Web Vitals by deferring non-critical content. I highly recommend these articles that will get you covered with most important things to know about it:\n\nThe new built-in control flow is out now stable to use\n\nAnother great feature and a must-know as old control flow, will be deprecated in the future. It improves performance and provides better type-checking. For more details, I highly recommend this article:\n\nüåà Material 3 is now stable\n\nMaterial 3, the latest design language for Angular Material components, is now stable and production-ready.\n\nüóÑÔ∏è Server-side rendering improvements\n\nSuch as i18n hydration support in developer preview and event replay powered by event dispatch. This ensures user interactions are captured even before the application fully hydrates. Hence preventing data loss.\n\nü§ùAngular & Wiz join forces\n\nAngular team had announced a long-term project to converge Angular with Google's internal framework, Wiz. As Angular team says, Wiz has been used for high-performance consumer apps and Angular for productivity and developer experience, the convergence aims to integrate the strengths of both. Wiz now deeply integrates Angular Signals, with YouTube already using this feature and already remarkable performance improvement announced in NG CONF 2024.\n\n‚ú® New features\n\nUnified Control State Change Events:\n\nAngular forms now provide an events property on FormControl, FormGroup, and FormArray classes. It allows you to subscribe to a stream of events and track control value changes more effectively.\n\nüìùA more detailed article will be published in the next few days!\n\nFallback Content for ng-content: A highly requested feature, you can now define default content for ng-content placeholder.\n\nüìùA more detailed article will be published in the next few days!\n\nRoute Redirects as Functions: This update provides more flexibility when defining redirects in your routing configuration.\n\nüìùA more detailed article will be published in the next few days!\n\nTypeScript 5.4: Updated dependency to leverage new features.\n\nüö¶ Signal new APIs in developer-preview\n\nThe new signal APIs announced in Angular versions 17.1 and 17.2 ( input, model ,...etc are in developer preview.\n\nTo learn more about then, I recommand this article with concrete examples:\n\nü§©Another boost to DX & performance\n\nCoalescing by Default: This optimization reduces unnecessary change detection cycles, leading to a significant performance improvement for new Zone.js applications.\n\nbootstrapApplication(App, {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true })\n  ]\n});\n\nNative async/await for Zoneless Apps: previously async/await was one of the APIs that Zone.js can't monkey patch, and therefore, Angular needs to downlevel it to promises via the Angular CLI. Zoneless apps can now leverage the native async/await syntax. Therefore, a more streamlined coding experience, making bundles smaller and debugging easier.\n\nImproved Debugging Tools: Angular DevTools now offers better visualization of the hydration process, hence better DX when debugging server-side rendered applications.\n\nüî• Robust Hosting with Firebase App Hosting\n\nFirebase App Hosting now supports dynamic Angular applications with built-in framework support and integration with Firebase products.",
    "link": "https://medium.com/p/145c098c9a1a"
  },
  {
    "id": "f762d06eb8b1",
    "content": "üö¶Angular Signals: A New Era for Component Inputs\n\nWhat you should know about signal input API\n\nHi there üëã\n\nThis article is dedicated to the new input API used for signals. I've already covered all the new APIs used to enable communication within Angular apps using signals. Here are more details with concrete examples to learn more about the new way to communicate in an Angular app with signals:\n\nAs mentioned earlier, this article specifically focuses on providing a concise overview of the new input API.\n\nTraditional Angular uses setters or ngOnChanges to handle component inputs. While these methods work, they rely on an imperative style.\n\n‚û°Ô∏èSignal Inputs:\n\nSignal Inputs provide a declarative way to manage component inputs.\n\nThey offer a reactive approach, notifying Angular whenever the input value changes.\n\nThis allows for more granular change detection and efficient updates.\n\n‚ûïBenefits of Signal Inputs:\n\nImproved Performance: Change detection is optimized, minimizing unnecessary re-renders, and will play a key role in moving into a zoneless Angular app.\n\nSimplified Code: Code becomes cleaner and easier to understand.\n\nEnhanced Reactivity: Signals seamlessly integrate with Angular's reactive features like computed and effects.\n\nüóùÔ∏èKey Concepts:\n\ninput: Creates a Signal for an input property (example).\n\ncomputed: Derives a new value from an existing Signal (example).\n\neffects: Executes side effects triggered by Signal changes (Find more details here)\n\n...\nexport class AComponent {\n  \n  anInput= input.required<number>();\n      \n  constructor(){\n    // ‚ö†Ô∏è Must be called in an injection context\n    effect(() => console.log(this.anInput());\n  }\n\n...\n}\n\nOptional and Required Inputs: Signals can be optional or required, with or without initial values (example).\n\nInput transform: Signal input can be transformed when you need to coerce or parse input value without changing the meaning of the input.\n\n...\nexport class AComponent {\n\n  disabled = input(false, {\n    transform: (value: boolean|string) => typeof value === 'string' ? value === '' : value,\n  });\n\n}\n\n// In consumer cmp\n<a-cmp disabled />\n\nInput Aliasing: Signals allow assigning an alias to an input property (Find more details here)\n\n@Component({\n  standalone: true,\n  selector: 'a-cmp',\n  template: `...`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AComponent {\n  \n  aName= input.required<string>({alias: 'aliasName'});\n...\n}\n\n// a-cmp consumer\n<a-cmp [aliasName]=\"'a name'\" />\n\nüé¨ Signal Inputs in Action:\n\nRoute Parameters as Signals: Access route parameters as reactive Signals with the withComponentInputBinding option enabled on the Router.\n\n// 1 - In app config (can also be provided in AppModule)\nexport const appConfig: ApplicationConfig = {\n  providers: [provideRouter(routes, withComponentInputBinding())]\n};\n\n// 2 - In routes\nconst routes: Routes = [\n  {\n    title: 'Route X',\n    path: 'route-x/:id',\n    component: AComponent\n  },\n  ...\n]\n\n// 3 - In AComponent\nid = input<string>(); // üëà no need to extract the id value from route params anymore\n\nFetching Data with Signals: Use Signals to trigger data fetching from a service.\n\n@Component({\n  standalone: true,\n  selector: 'a-cmp',\n  template: `{{ data() }}`,\n})\nexport default class AComponent {\n  private readonly aService= inject(AService);\n\n  id = input.required<string>();\n  \n  /*üí°The subscription created by toSignal automatically unsubscribes \n  from the given Observable when the component or service which calls toSignal is destroyed.*/\n  data= toSignal(this.aService.getData(i), {initialValue: []}); // üëà usage of toSignal\n}\n\nComplex scenarios: While toSignal is powerful, there are certain situations where we need to use Observables. This is primarily to take advantage of RxJS operators, which help us handle and process data more effectively. To do this, we can use the toObservable utility that creates a stream that handles all the necessary processes and easily tracks data as a signal. The following example provides a simple case where whenever the id input changes, we want to switch immediately to getData based on the latest new id.\n\n...\n@Component({\n  standalone: true,\n  selector: 'a-cmp',\n  template: `{{ data() }}`,\n})\nexport default class AComponent {\n  private readonly aService= inject(AService);\n\n  id = input.required<string>();\n\n  /* As the id signal changes, the toObservable(this.id) emits the latest id and triggers the service's getData(id) function. */\n  data = toSignal(\n      toObservable(this.id) // üëà usage of toObservable\n        .pipe(\n          switchMap((i) => this.aService.getData(i)\n        )\n      )\n    );\n}\n\nüéØBeyond Signal Inputs:\n\nThis new API plays a crucial role in enhancing the responsiveness and efficiency of Angular applications. They enable the creation of simpler and more reactive component designs, which is essential for building zoneless applications.\n\nThe ultimate aim is to promote widespread adoption of the zoneless mode in the future. Notably, the experimental API supporting this feature is already available in the latest version of Angular (currently version 17) (refer to the article mentioned at the outset).\n\nThat's it for this article. I hope you like it. Please let me know if you like this format and want more concise and straightforward articles like this one.",
    "link": "https://medium.com/p/f762d06eb8b1"
  },
  {
    "id": "70bb9fdc113d",
    "content": "üÜï üî• Angular Moves Towards Zoneless Apps with New APIs\n\nExploring Modern Angular's Enhanced Data Binding and Querying Capabilities!\n\nHi there üëã\n\nIn recent Angular releases, significant changes have been introduced, with one of the most notable being overhauling the change detection system. Angular now embraces a reactive mechanism known as Signals. If this is new to you, I recommend delving into the story behind it in this article:\n\nFollowing the introduction of Angular Signals (starting from version 16), a series of new APIs have been rolled out in the latest Angular version (17.3.5). These APIs enable communication within Angular apps using signals. In Angular 17.1, the input signal was introduced, followed by the Signal-based Two-way Bindings model and support for content ( contentChild(ren) ) and view viewChild(ren) queries in Angular 17.2. Finally, version 17.3 completes this with the output API¬†(not¬†signal¬†based).\n\nIn this article, I'll explore these new APIs and provide concrete examples to facilitate their adoption.\n\n‚Üí ‚úÖ input API\n\n‚Üí ‚úÖ output API\n\n‚Üí ‚úÖ Two-way data binding with signals\n\n‚Üí ‚úÖ View query with Signals\n\n‚Üí ‚úÖ Content query with Signals\n\n‚úÖ input API\n\nThe @Input() decorator is traditionally used to receive data via property binding. The process remains similar with the input Signals API, but now we receive data via property binding in the form of a Signal.\n\nüîé In this example, I have TodoItemComponent that requires the todo item as input.\n\nBefore:\n\nimport { Component, Input } from '@angular/core';\nimport { Todo } from '../models/todo.model';\n\n@Component({\n  selector: 'app-todo-item',\n  templateUrl: './todo-item.component.html',\n  styleUrls: ['./todo-item.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TodoItemComponent {\n  @Input({ required: true }) todo: Todo; // Input property to receive todo item from parent\n  ...\n}\n\nAfter:\n\nimport { Component, Input } from '@angular/core';\nimport { Todo } from '../models/todo.model';\n\n@Component({\n  selector: 'app-todo-item',\n  standalone: true,\n  templateUrl: './todo-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TodoItemComponent {\n  todo = input.required<Todo>(); // Input Signal property to receive todo item from parent\n  // todo = input<Todo>(); //<-- if you don't want it to be required\n...\n}\n\nüëâFind more about this API here:\n\n‚úÖ output API\n\nThe @Output() decorator emits values to parent directives or components. The output API can do the same, except that it's not RxJS based anymore (it returns OutputEmitterRef<T>)\n\nüîé In this example, the AddTodoComponent communicates the added to-do item to its parent component.\n\nBefore:\n\nmport { Component, EventEmitter, Output } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms';\nimport { Todo } from '../todo.model';\n\n@Component({\n  selector: 'app-add-todo',\n  standalone: true,\n  imports: [FormsModule],\n  template: `\n    <div class=\"add-todo-container\">\n      <input [(ngModel)]=\"newTodoTitle\" placeholder=\"Add new todo\" type=\"text\">\n      <button (click)=\"addTodo()\">Add</button>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AddTodoComponent {\n  @Output() todoAdded = new EventEmitter<Todo>();\n  newTodoTitle: string = '';\n\n  addTodo() {\n    const todo: Todo = {\n      id: Math.random(),\n      title: this.newTodoTitle,\n      completed: false,\n    };\n    this.todoAdded.emit(todo);\n    this.newTodoTitle = '';\n  }\n}\n\nAfter:\n\nimport { ChangeDetectionStrategy, Component, model, output } from '@angular/core';\nimport { Todo } from '../todo.model';\n\n@Component({\n  selector: 'app-add-todo',\n  standalone: true,\n  template: `\n    <div class=\"add-todo-container\">\n      <input [(ngModel)]=\"newTodoTitle\" placeholder=\"Add new todo\" type=\"text\">\n      <button (click)=\"addTodo()\">Add</button>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AddTodoComponent {\n  todoAdded = output<Todo>(); // üëà with the output API\n  newTodoTitle: string = '';\n\n  addTodo() {\n    const todo: Todo = {\n      //....\n    };\n    this.todoAdded.emit(todo);\n    this.newTodoTitle = '';\n  }\n}\n\nüí° Additionally, you can use an Observable as the source for an output by employing the outputFromObservable function from the RxJS interop.\n\n‚úÖ Two-way data binding with signals\n\nNow, two-way data binding is facilitated by directly assigning a signal to [(ngModel)]. Furthermore, there's another API, model, which declares a writable signal, exposed as an input/output pair on the containing directive or component.\n\n1Ô∏è‚É£ Two-way data binding with NgModel + Signal\n\nüîé In this example, I switch from using a simple string to a signal for [(ngModel)]:\n\nBefore\n\n....\n@Component({\n  selector: 'app-add-todo',\n  standalone: true,\n  imports: [FormsModule],\n  template: `\n    <div>\n      <input [(ngModel)]=\"newTodoTitle\" placeholder=\"Add new todo\" type=\"text\" />\n      <button (click)=\"addTodo()\">Add</button>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddTodoComponent {\n  @Output() todoAdded = new EventEmitter<Todo>();\n  newTodoTitle: string = ''; // <-- üëà simple string\n\n  addTodo() {\n    const todo: Todo = {\n      id: Math.random(),\n      title: this.newTodoTitle,\n      completed: false,\n    };\n    this.todoAdded.emit(todo);\n    this.newTodoTitle = '';\n  }\n}\n\nAfter\n\n\n@Component({\n  selector: 'app-add-todo',\n  standalone: true,\n  template: `\n    <!-- If you are using Angular version >= 17.3 -->\n    <div>\n      <input [(ngModel)]=\"newTodoTitle\" placeholder=\"Add new todo\" type=\"text\" />\n      <button (click)=\"addTodo()\">Add</button>\n    </div>\n    <!-- Otherwise -->\n    <div>\n      <input\n        [ngModel]=\"newTodoTitle()\"\n        (ngModelChange)=\"newTodoTitle.set($event)\"\n        placeholder=\"Add new todo\"\n        type=\"text\"\n      />\n      ...\n    </div>\n  `,\n  imports: [FormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddTodoComponent {\n  todoAdded = output<Todo>(); \n  newTodoTitle = signal(''); //<-- üëà switched to a signal now\n\n  addTodo() {\n    const todo: Todo = {\n      id: Math.random(),\n      title: this.newTodoTitle() ?? undefined, // <-- üëà to access the signal value we added '()'\n      completed: false,\n    };\n    this.todoAdded.emit(todo);\n    this.newTodoTitle.set(''); // <-- üëà to set its value, we use '.set()'\n  }\n}\n\n2Ô∏è‚É£ Two-way data binding with model API\n\nüîé In this example, in the parent component, I consume the TabsComponent. I pass the currently selected tab's index as an input to TabsComponent. When the selected tab's index changes within the TabsComponent, I update the current index as an output, ensuring synchronization between the child and parent components.\n\nBefore\n\n/**\n * Root app component\n */\n@Component({\n  selector: 'my-app',\n  standalone: true,\n  imports: [TabComponent, TabsComponent, AComponent],\n  template: `\n  <tabs [current]=\"current\" (currentChange)=\"current = $event\">\n    <tab name=\"First tab\">\n      <a-cmp></a-cmp>\n    </tab>\n    <tab name=\"Second tab\">\n      <p>This is a simple paragraph and not a component</p>\n    </tab>\n    <tab name=\"Third tab\">\n      <p>This is another simple paragraph</p>\n    </tab>\n  </tabs>\n  `,\n})\nexport class App {\n  current = 0; // <-- üëà simple number\n}\n\n/***\n* Tabs Component (child cmp)\n*/\n@Component({\n  selector: 'tabs',\n  standalone: true,\n  imports: [NgClass, TabComponent, NgTemplateOutlet],\n  template: `\n    @for(tab of tabs(); track tab.name; let i = $index){\n      <button [ngClass]=\"current === i ? 'active' : null\"\n      (click)=\"this.currentChange.emit(i)\">\n        {{ tab.name() }}\n      </button>\n    }\n    ...\n  `,\n})\nexport class TabsComponent {\n  /**\n   * Current tab index\n   */\n  @Input() current!: number;\n  @Output() currentChange = new EventEmitter<number>();\n\n  ...\n}\n\nAfter\n\n/**\n * Root app component (parent cmp)\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, TabComponent, TabsComponent, AComponent],\n  template: `\n  <tabs [(current)]=\"current\"> <!-- <-- üëà Here is where I use two-way data binding -->\n    <tab name=\"First tab\"> \n      <a-cmp></a-cmp>\n      <button type=\"button\" (click)=\"next()\">Go to the next tab</button>\n    </tab>\n    <tab name=\"Second tab\">\n      <p>This is a simple paragraph and not a component</p>\n    </tab>\n    <tab name=\"Third tab\">\n      <p>This is another simple paragraph</p>\n    </tab>\n  </tabs>\n  `,\n})\nexport class App {\n  current = signal(0); // <-- üëà switched to signal\n\n  next() {\n    // üëá use update when you want to set the signal's value based on its current value\n    this.current.update((cur) => cur + 1);\n  }\n}\n\n\n/***\n* Tabs Component (child cmp)\n*/\n@Component({\n  selector: 'tabs',\n  standalone: true,\n  imports: [NgClass, TabComponent, NgTemplateOutlet],\n  template: `\n    @for(tab of tabs(); track tab.name; let i = $index){\n      <button [ngClass]=\"current() === i ? 'active' : null\"\n      (click)=\"this.current.set(i)\"> <!-- üëà sets and emits the new value to the parent at the same time-->\n        {{ tab.name() }}\n      </button>\n    }\n    ...\n  `,\n})\nexport class TabsComponent {\n  /**\n   * Current tab index\n   */\n  current = model(0); // <-- üëà using the model API \n  // or the longer/old version\n  // current= input(0);\n  // currentChange = output<number>();\n\n  ...\n}\n\n‚ö†Ô∏è As you can see in both examples the model != ngModel\n\n‚úÖ View query with Signals\n\nWith the new @ViewChild(ren) API, view queries can now be signal-based, enhancing Angular's querying capabilities.\n\nüîé In this example, the TabComponent uses content projection wrapped within an ng-template. By querying the template, we retrieve the tab's view, enabling us to display it dynamically when the tab is selected (as demonstrated in the subsequent example).\n\nBTW the same can be applied to the viewChildren API.\n\nBefore\n\n/**\n * Tab component\n */\n@Component({\n  selector: 'tab',\n  standalone: true,\n  template: `\n    <ng-template #tab>\n      <ng-content></ng-content>\n    </ng-template>\n    `,\n})\nexport class TabComponent {\n  @Input({ required: true}) name!: string;\n  @ViewChild('tab') template!: TemplateRef<any>; // <-- üëà non signal based\n}\n\nAfter\n\n/**\n * Tab component\n */\n@Component({\n  selector: 'tab',\n  standalone: true,\n  template: `\n    <ng-template #tab>\n      <ng-content></ng-content>\n    </ng-template>\n    `,\n})\nexport class TabComponent {\n  name = input.required<string>();\n  template = viewChild<TemplateRef<any>>('tab'); // <-- üëà signal based\n}\n\n‚úÖ Content query with Signals\n\nSimilarly, content queries can now be signal-based with the contentChild(ren) API, replacing the traditional @ContentChild(ren)approach. In this example, the TabsComponent displays a list of buttons based on queried projected tabs:\n\nüîé In this example, theTabsComponent displays a list of buttons (button per tab) based on the queried projected tabs (contentChildren), and then based on the currently selected tab, it gets the tab's view (the example above üëÜ where we used the viewChild API) and display it with the ngTemplateOutlet directive.\n\nBefore\n\n/**\n * Tabs component (consumed by the root component below)\n */\n@Component({\n  selector: 'tabs',\n  standalone: true,\n  imports: [NgClass],\n  template: `\n    <!-- Button per tab -->\n    @for(tab of tabs; track tab.name; let i = $index){\n      <button [ngClass]=\"current === i ? 'active' : null\"\n      (click)=\"selectTab(i)\">\n        {{ tab.name() }}\n      </button>\n    }\n\n    <!-- the selected tab's view -->\n    @if(currentTabContent){\n      <div class=\"tab-container\">\n        <ng-container *ngTemplateOutlet=\"currentTabContent\"></ng-container>\n      </div>\n    }\n  `\n})\nexport class TabsComponent implements AfterViewInit {\n  /**\n   * Current tab index\n   */\n  @Input({ required: true }) current!: number;\n  @Output() currentChange = new EventEmitter<number>();\n\n  /**\n   * Query all projected TabComponents\n   */\n  @ContentChildren(TabComponent)\n  tabs!: QueryList<TabComponent>; // <-- üëà non signal based\n\n\n  /**\n   * Update the current Tab's content based on the current signal\n   */\n  currentTabContent!: TemplateRef<any>;\n\n  /**\n  * Set the current tab's content based on the current index\n  */\n  ngAfterViewInit(): void {\n    this.currentTabContent = (this.tabs.get(this.current) as TabComponent).template;\n  }\n\n  /**\n  * Update the tab's content and current index if it has changed\n  */\n  selectTab(index: number) {\n    if (index !== this.current) {\n      this.currentChange.emit(index);\n      this.currentTab = (this.tabs.get(index) as TabComponent).template;\n    }\n  }\n}       \n\n/**\n * Root app component (the tabs component consumer)\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [TabComponent, TabsComponent, AComponent],\n  template: `\n  <tabs [(current)]=\"current\">\n    <tab name=\"First tab\"> \n      <a-cmp></a-cmp>\n      <button type=\"button\" (click)=\"next()\">Go to the next tab</button>\n    </tab>\n    <tab name=\"Second tab\">\n      <p>This is a simple paragraph and not a component</p>\n    </tab>\n    <tab name=\"Third tab\">\n      <p>This is another simple paragraph</p>\n    </tab>\n  </tabs>\n  `,\n})\nexport class App {\n  ...\n}       \n\n\nAfter\n\n/**\n * Tabs component (consumed by the root component below)\n */\n@Component({\n  selector: 'tabs',\n  standalone: true,\n  imports: [NgClass, NgTemplateOutlet],\n  template: `\n    <!-- Button per tab -->\n    @for(tab of tabs(); track tab.name; let i = $index){\n      <button [ngClass]=\"current() === i ? 'active' : null\"\n      (click)=\"this.current.set(i)\">\n        {{ tab.name() }}\n      </button>\n    }\n\n    <!-- the selected tab's view -->\n    @if(currentTabContent()){\n      <div class=\"tab-container\">\n        <ng-container *ngTemplateOutlet=\"currentTabContent()\"></ng-container>\n      </div>\n    }\n  `\n})\nexport class TabsComponent {\n  /**\n   * Current tab index\n   */\n  current = model.required<number>(0);\n\n  /**\n   * Query all projected TabComponents\n   */\n  tabs = contentChildren(TabComponent); // <-- üëà signal based\n\n  /**\n   * Update current Tab's content based on the current signal\n   */\n  currentTabContent = computed( // <-- üëà signal based\n    () => (this.tabs()[this.current()] as TabComponent).template() || null\n  );\n}\n\n/**\n * Root app component (the tabs component consumer)\n */\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [TabComponent, TabsComponent, AComponent],\n  template: `\n  <tabs [(current)]=\"current\">\n    <tab name=\"First tab\"> \n      <a-cmp></a-cmp>\n      <button type=\"button\" (click)=\"next()\">Go to the next tab</button>\n    </tab>\n    <tab name=\"Second tab\">\n      <p>This is a simple paragraph and not a component</p>\n    </tab>\n    <tab name=\"Third tab\">\n      <p>This is another simple paragraph</p>\n    </tab>\n  </tabs>\n  `,\n})\nexport class App {\n  ...\n}\n\nüéØFinally...\n\nWith the introduction of this new reactivity system and APIs, Angular code becomes:\n\n‚úîÔ∏è Reactive\n\n‚úîÔ∏è light\n\n‚úîÔ∏èelegant\n\nWe are rapidly moving towards zoneless Angular apps. Shortly, ZoneJS will become optional, and by the way, you can already create an Angular zoneless app with the experimental provideExperimentalZonelessChangeDetection\n\n bootstrapApplication(MyApp, \n    {providers: [  provideExperimentalZonelessChangeDetection(),]}\n ); \n\nThe reactivity system will be managed by the Signals algorithm and graph, ensuring Angular apps remain reactive.",
    "link": "https://medium.com/p/70bb9fdc113d"
  },
  {
    "id": "ab1754f24ae2",
    "content": "I let GenAI do the Job for me in just a few seconds! ü§Ø\n\nüî•üî•üî• Building AI-powered Chrome extension from A to Z\n\nHi there üëã\n\nAre you as excited about AI? Do you want to build AI-powered apps, see a real-world application example, or see how AI can do the job for you? Well, this article is for you!\n\nI am thrilled about the recent advancements in AI and can't wait to start building things with it. There's nothing better than creating apps that I can also use myself. To that end, I've compiled a list of ideas to automate some of my tasks. I've already built a Chrome extension to complete one of my tasks in a few seconds. It's amazing! ü§Ø\n\nThe job I want it to do...\n\nAs a technical content creator, crafting engaging social media posts for my articles is time-consuming. I have to condense my article, identify key points, select appropriate emojis to increase visual appeal, reconsider my word choices to attract attention, and do much more. However, chatGPT and Gemini can accomplish all these tasks efficiently and effectively within seconds, and their output is better than what I can produce.\n\nThat's a perfect real use case for me, as I'll be learning and using AI power while letting it do the job for me, freeing me to focus on what matters most: creating amazing content! ‚ù§Ô∏è\n\nIn this article, I'll share with you step-by-step the whole process from concept to completion of building a Chrome extension powered by AI to generate magically social media posts from articles:\n\n‚Üí üß∞ Tools\n\n‚Üí üß† The extension brain\n\n‚Üí üåà The extension UI\n\n‚Üí üèóÔ∏è Gathering all together\n\n‚Üí üöÄ Publish the extension\n\n‚Üí üí∞The cost\n\n‚Üí üëÄ Demo\n\nBy the end of this article, you will learn how to use Generative AI and various other tools to create your own AI-powered applications. You don't need to be an expert in LLMs or AI, as all you need is your attention and motivation!\n\nThe extension is open-source, and we welcome any contributions to improve or add more functionalities.\n\n‚ö†Ô∏è a lot is going on. The article is long but exciting. I hope you are patient enough to go through all its sections!\n\nüß∞ Tools\n\nThere are already some amazing tools built by creative and genius people that made my journey seamless and fast.\n\nLangChain:\n\nThe framework is widely used and has great use cases in its documentation. It's possible to use the framework with Python or JS, which is excellent. I personally see it as a chain of puzzles. Suppose we have a PDF document that we want to summarize. We can use a document loader from the langChain box, an LLM model (from Gemini, OpenAI, or llama), and the load summarize chain function, all chained together to summarize the document. We can even add another puzzle, the PromptTemplate, which allows us to give instructions to the LLM model, such as \"write a concise summary, maximum of 200 tokens.\"\n\nLLMs (Large Language Models):\n\nA large language model (LLM) is a type of artificial intelligence (AI) that can generate text, translate languages, write different kinds of creative content, and answer your questions informally. For this extension, I used Gemini and OpenAI models. These AI superstars will analyze my articles and generate creative text, like my social media posts!\n\nOther helpful tools:\n\nI used Gemini, chatGPT, and DALLE to learn and write Python code (this is my first time coding with Python üòÖ), build the extension UI, craft my prompt, and generate the extension logo.\n\nI used Colab for my Python code.\n\nI used Google Cloud Functions to deploy the extension brain.\n\nI used Canva to design my UI. There are better tools for this specific task, like Figma, for example, but I'm just used to Canva and was quick to build a simple UI for it.\n\nüß† The extension brain\n\nNow, let's dive into the exciting part: building the extension brain! We'll break it down into three main steps:\n\nContent Extraction: For the first version of this extension, I narrowed the supported blogs to Medium and dev.to. I used the Python regex library to define the domain in which the generated content is called. Then, for dev.to, I used beautifulsoup4 to extract text. For Medium, I couldn't scrape the content of my article with this library. So, I used the Medium Rapid API to extract the content.\n\nThe second step is Content Summarization (Optional): If the extracted text content is too long, I use AI magic to summarize it ü™Ñ. This ensures that I don't exceed the maximum number of tokens the LLM model supports. In the future, this step will be removed as LLM models will support more tokens with time. I use Gemini here because, with the latest next-generation model, 1.5 pro, it can process up to 1 million tokens consistently. This makes it more likely for me to skip this step and make the generation of posts faster. (Although I don't currently have access to this model (by the time I'm writing this article), I'm preparing the ground for it for now).\n\nPost Generation: Finally, I hand the article or the summarized article to our AI models and let them work their magic.\n\nBefore going further, we'll need API keys for Gemini, OpenAI, and Medium Rapid API.\n\n</> To the code now:\n\nFor a detailed explication of the code, you can watch this video [ADD VIDEO LINK]\n\n‚≠êÔ∏è Tips about crafting a high-quality prompt\n\nThe way we talk to an LLM model matters; a high-quality prompt = high-quality answer!\n\nAfter searching, reading articles, watching videos, and experimenting a loooot, I got it üòÅ. A high-quality prompt should specify some elements and in a specific order!\n\nPersona: Define who you want the model to be, considering the task.\n\nGoal: What do you want from AI (LLM)? Define the job or task to do behind the prompt (start with a verb)\n\nContext: why do you need it\n\nSource: which information sources or examples can LLM use\n\nFormat: visualize the desired result; specify the format (paragraphs, bullet points, etc.).\n\nTone: use tone keywords (e.g., friendly, confident) to guide the AI.\n\nNot to dos: define clearly what it must not do.\n\nOrder of importance: persona, task/goal, context, sources/exemplars (optional), format, tone.\n\nüåà The extension UI\n\nLet's break down the UI creation process for my extension. I started with a quick and dirty mockup using Canva.\n\nNext, I used the power of AI! I fed a description to the DALLE and was blown away by the logo options it generated. One perfectly captured the essence of the extension: turning articles into social media posts with the help of AI.\n\nFinally, it was time to code the UI. I leveraged large language models like Gemini and ChatGPT (both can take UI mockups as input, although ChatGPT requires a paid upgrade for this feature). They impressed me with their ability to generate code that reflected my design, including semantic HTML and accessibility considerations.\n\nI took their generated code as a starting point and made some refinements. I added hover animations for the posts and loading animation for a smoother user experience. I also removed the cards and skeleton parts from the HTML, as these will be added and removed dynamically.\n\nLet's not forget about the font selection. I asked chatGPT to suggest a font for my UI based on current trends and the extension nature. I employed a simple strategy. I prompted it to ask me five targeted questions to understand better what I'm looking for and find exactly what I need.\n\nüèóÔ∏è Gathering all together!\n\nüöÄ Deploy on google cloud funtion\n\nI deployed the extension brain on Google Cloud Function and added a few things to the code: a part that will get my secrets, error management with HTTP status, the framework annotation to the main function, and managing CROS origin.\n\nüß© Build the extension\n\nAs for the extension, we'll need:\n\nüîó Manifest file to configure the extension, its name, description, UI, web worker, ...etc.\n\nüîó Web worker (background.js)\n\nüîó Popup HTML, CSS, and JS for the UI of the extension and its interactions.\n\nIcons\n\n[ADD explanation video here]\n\nüöÄPublish the extension\n\nTime to publish the extension on Google Store. There are a few steps to follow:\n\nYou need to have a Google developer account (if not, create it with a one-life fee of 5$)\n\nThen upload a zip of all extension files\n\nProvide the extension description goal and justify each of its permissions (why it needs the activeTab, for example)\n\nUpload a demo video and screenshots\n\nProvide the privacy policy (I used Google Sites, super quick and perfect for this specific task)\n\nFinally, save and submit for preview (it took 1 day to get a response from the Google team)\n\nEt voila üòÅ\n\nüîó Get the extension\n\nüí∞The cost\n\nI can't provide the exact price, as I didn't use the OpenAI tokens only for this extension, but here is mainly what costs money for this extension:\n\nGoogle developer account one-life fee of 5$\n\nThe OpenAI API is not free; you need to buy tokens, but it's pretty fair in terms of charge, not expensive. I didn't need to pay for the Gemini API (for now), thanks Google üôè but I needed a VPN to use it in France.\n\nThe MEDIUM RAPID API is free for a certain number of calls; when the limit is exceeded, you need to pay. I was too excited about the results üòÖ to exceed the limit and paid around $4$.\n\nThe Google Cloud Function is also free for certain limits. I also added more memory for now. I exceeded the limit, and by the time I was writing this article, I had paid $0.07$, and the price would keep going up based on the usage.\n\nThe extension is free, and you can enjoy using it üòä and I'd love you to rate it and add comments on Google Store üôè\n\nüëÄ Demo\n\nHere we are! As you can see, it respects the structure and is both friendly and informative. Gemini and OpenAI clearly list the key takeaways with emojis. Both sometimes manage to find suitable emojis for each key idea. It would take me time to find them, and I'm not sure if they would be as suitable as these. After trying several times, I found the Gemini output often satisfying in comparison with OpenAI. However, both do not always respect all my instructions, like the hyperlink for the \"Read more\" part. Nonetheless, I am satisfied with it. What's more interesting with generating with completely different models is that since they are trained on different data, we can discern the differences between them. I can either choose one or experiment by sharing the Gemini one on LinkedIn and trying out the OpenAI one on X, for example, to see which one gets more impressions and reactions ü§≠\n\nIf you're reading this, congratulations! üôå It shows that you have patience and a genuine interest in AI, which is something everyone should have. AI is not only the present but also the future, and I hope you've found this experience enjoyable. I encourage you to continue exploring and creating AI-powered applications, contributing to the advancement of this fascinating field.\n\nThank you! ‚ù§Ô∏è",
    "link": "https://medium.com/p/ab1754f24ae2"
  },
  {
    "id": "ab5544aa850d",
    "content": "üîé Common Use Cases for Angular @defer Feature!\n\nHow to use the defer feature powers in your real-world projects\n\nHi there üëã\n\nI talked about the amazing defer feature in previous articles about Angular 17 new features. In the article below, I provided details about how to use this feature:\n\nIn this article, I have gathered some common use cases for this incredible feature so you can use it in real-world projects!\n\nReady? Let's go!\n\n1. Lazy-loading large components or modules\n\nüîé Use case:\n\nYou want to load a large component or module only when the user scrolls down or performs a specific action, instead of loading it on the initial page load.\n\n</> Code example:\n\n@Component({\n  selector: 'a-large-component',\n  standalone: true,\n  template: `\n    <h2>Large component, like dashboard cmp, long form...</h2>\n  `,\n})\nexport class LargeComponent {}\n\n@Component({\n  selector: 'app',\n  standalone: true,\n  template: `\n    <h2>Some content that will always be displayed ...</h2>\n    @defer (on interaction; prefetch on viewport) {\n      <a-large-component/>\n    }\n  `,\n})\nexport class AppComponent {}\n\n2. Preloading components or modules\n\nüîé Use case:\n\nYou have a component or module that needs to be displayed quickly, you want to preload it in the background so it's ready when the user needs it.\n\n</> Code example:\n\n@Component({\n  selector: 'a-large-component',\n  standalone: true,\n  template: `\n    <!-- This is a large component -->\n    <!-- A dashboard cmp, a long form, ...whatever!-->\n  `,\n})\nexport class LargeComponent {\n\n@Component({\n  selector: 'app',\n  standalone: true,\n  template: `\n    <h1>Initial content dispayed right away!</h1>\n    ...\n    @defer (prefetch on idle) {\n      <a-large-component/>\n    }\n  `,\n  ...\n})\nexport class AppComponent {}\n\n3. Displaying placeholder content while a component or module is loading\n\nüîé Use case:\n\nYou want to display some initial content as a placeholder to the user, when loading a module or component in the background.\n\n</> Code example:\n\n@Component({\n  selector: 'app',\n  standalone: true,\n  template: `\n    <h2>Some content that will always be displayed ...</h2>\n    @defer {\n      <a-large-component/>\n    }\n    @placeholder {\n      <skeleton-loader/>\n    }\n  `,\n  ...\n})\nexport class AppComponent {}\n\n4. Displaying a loading indicator while a component or module is loading\n\nüîé Use case:\n\nYou want to display a loading indicator to the user while a component or module is loading in the background.\n\n</> Code example:\n\n@Component({\n  selector: 'app',\n  standalone: true,\n  template: `\n    <h2>Some content that will always be displayed ...</h2>\n    @defer {\n      <a-large-component/>\n    }\n    @loading {\n      <spinner/>\n    }\n  `,\n   ...\n})\nexport class AppComponent {}\n\n5. Displaying an error message if a component or module fails to load\n\nüîé Use case:\n\nYou want to display an error message to the user if a component or module fails to load.\n\n</> Code example:\n\n@Component({\n  selector: 'app',\n  standalone: true,\n  template: `\n    <h2>Some content that will always be displayed ...</h2>\n    @defer {\n      <a-large-component/>\n    }\n    @error {\n      <p>Sorry, an error has occurred üòõ</p>\n    }\n  `,\n  ...\n})\nexport class AppComponent {}\n\nüí° Learn more about the modern Angular:",
    "link": "https://medium.com/p/ab5544aa850d"
  },
  {
    "id": "2a1ceade2580",
    "content": "Everything You Need to Know About Angular's Standalone\n\nIn-Depth Exploration: Angular's Standalone Feature\n\nHi there üëã\n\nAngular has undergone many significant changes lately, including signals, standalone, deferrable views, new built-in control flow, etc. This article is dedicated to one of these features: the standalone feature. It's a must-know for every Angular developer, as it transforms the way we code and structure our application.\n\nüëÄ Video version available at the end of this article.\n\nüöÄIt started in Angular 14\n\nThe standalone feature was initially introduced in the developer preview of Angular 14. This feature marks a shift from a module-based app, where components must be declared in a module to be used, to a fully component-based app.\n\nAs of Angular 17, the Angular CLI schematics fully support the standalone feature, and it is now the default option (you don't need to enable it with -standalone flag. With this feature, you can generate a complete standalone app, standalone pipe, component, directive, and even convert your code to standalone.\n\nüëÄ Before vs. After\n\n‚Üí Life before the standalone feature\n\nLet's take, for example, a traditional scenario where I have dumb components in a shared module (SharedModule), and I want to use them in a feature module (ProductsModule).\n\nTo use CardComponent in the ProductsModule, I need to ensure that the SharedModule, where it is declared, also exports it. Afterward, I can import the SharedModule in the ProductsModule.\n\n‚ö†Ô∏è Notice that I need only the CardComponent, but I ended up importing the whole SharedModule.\n\n‚Üí Life after the standalone feature\n\nNow, let's move on to life after the standalone feature. I can make these components standalone by adding the standalone property set to true and importing what they need to work correctly in their imports array property.\n\nüí° Notice that I didn't import the entire Angular CommonModule to be able to use ngIf and ngClass, because those directives have become standalone, allowing me to import them directly.\n\nWith the standalone feature the component is:\n\n‚úîÔ∏èSelf-contained\n\n‚úîÔ∏èDoesn't require declaration in any NgModule\n\n‚úîÔ∏èCan explicitly manage its dependencies\n\nWe can import them directly into a module or in a standalone component. You import only what you need; hence, you build your app in a tree-shakable way.\n\nüí° Benefits\n\nHere is what make standalone feature really interesting\n\nLess code and boilerplate: It reduces the amount of code and boilerplate, making your Angular development more concise and focused.\n\nReduced framework complexity: The standalone feature simplifies the Angular learning journey by making it more natural and intuitive. Instead of dealing with the complexities of declaring components in a module and exporting/importing them, you can now simply import what you need.\n\nFine-grained lazy loading: Unlike before, where we could only lazy load entire modules, now we can lazily load standalone components. This provides more flexibility and efficiency in loading only the components that are needed at a given time.\n\nStandalone can coexist with NgModules, and that's especially beneficial for old/legacy apps.\n\n‚öôÔ∏èHow does it work?\n\nWondering how it works behind the scenes? Well, the magic lies in the virtual NgModule created around each standalone component. That's why when importing a standalone component, we import it similar to how we import a module (in the imports array). We can't include them in the declarations array of any NgModule, as a standalone component is already declared in its virtual NgModule, and a component can only be declared in one NgModule.\n\n‚ö†Ô∏è Limitation\n\nOne limitation of this feature, when compared to the previous approach, is that you cannot bootstrap multiple components as you could with the NgModule.\n\nüìπ VV\n\nI hope it's crystal clear, or at least clearer for you than before, after reading this article or watching the video üôè\n\nFind more details about Angular evolution in this article:",
    "link": "https://medium.com/p/2a1ceade2580"
  },
  {
    "id": "4b0763541ffe",
    "content": "Angular 17 - Angular Renaissance\n\nWhat's new in Angular 17?\n\nHi there üëã\n\nAngular v17 is out! And with all the new things and features added so far,\n\nIt's the renaissance of Angular\n\nAngular has come a long way, and if you're interested, you can explore my article on Angular's path to its renaissance:\n\nLet's see what we have in v17!\n\nAnd discover the Angular team's suprise by the end of this article!\n\n‚≠êÔ∏è Deferred rendering in templates ü§Ø\n\nI give it a üèÜ + a ‚ù§Ô∏è as this feature is incredible. From v17 and on, we can lazy load components in Angular templates. This will definitely change the whole way of building our template in Angular!\n\nIt offers much more than simple lazy loading. You can utilize triggers to load deferred component chunks, optionally prefetch dependencies if desired, and much more. This dedicated article covers all the whereabouts of this ü§Ø feature, including how to unit test it ‚úîÔ∏è.\n\n‚≠êÔ∏è Built-in control flow\n\nI've previously discussed the new Angular control flow in several articles. Now, it's official and ready for use. The new built-in control flow is remarkably intuitive, simple, and lightweight:\n\nüëâ You no longer need to import NgIf, NgFor, and so on into standalone components.\n\nüëâ You don't have to wrap your block in an <ng-container>. It is automatically enclosed with {}.\n\nüëâ In terms of ergonomics, there are significant improvements (e.g., the trackBy function for performance is now an expression and required for for loops).\n\nüëâ Enhanced type checking, especially for ngSwitch.\n\nüëâ Improved repeater performance, with up to a 90% time reduction in certain benchmarks!\n\nIt's also so beautiful for the eye to see and read üòÜ\n\nNgSwitch\n\nNgFor\n\nNgIf\n\n‚≠êÔ∏è Angular is 3 times faster with the new builder!\n\nAn outstanding accomplishment, with the new builder, Angular is 3 times faster than ever. In v17, the application builder will be the default builder for new Angular apps (‚â•17). Let's take a brief look at all the available builders:\n\n‚Üí browser builder: the default builder before v17. This builder is a webpack-based build system (always supported in v17), and existing apps can continue using it.\n\n‚Üí browser-esbuild builder: esbuild-based build system, compatible with webpack-based build system but doesn't integrate SSR capabilities.\n\n‚Üí application builder: the new Angular app's default builder (from v17 and on). It's esbuild-based build system with integrated SSR capabilities. It generates bundles that can be used both in the browser and on the server side.\n\n‚Üí dev-server builder: the existing dev server that supports all stable builders (browser, browser-build and application) and automatically uses Vite with esbuild-based builders in v17.\n\n‚≠êÔ∏è SSR improvements\n\nAs mentioned above, SSR capabilities are now integrated with the new application builder. So far, SSR has been challenging. You need to install a separate package (Angular universal), have a duplicated build process, add additional configurations in angular.json ...etc.\n\nThe new application builder improves the whole thing significantly by providing an all-in-one (app-shell, browser, server, ...) builder for Angular apps. And with v 17, you can run ng new with SSR flag:\n\nng new --ssr\n\nOr when you run the ng new command, you'll be asked if you want to enable SSR in the command prompt.\n\nIf you want to enable it later:\n\nng add @angular/ssr\n\n‚≠êÔ∏è Angular CLI\n\nüëâ Standalone app by default\n\nFrom v17, the generated Angular app will be, by default standalone. Of course, you will still be able to generate the traditional app with NgModule but you'll need to specify it to the Angular CLI by using the --standalone false flag.\n\nüëâ Other changes to the \"ng new\"\n\nAngular CLI won't ask you if you want to integrate Routing. From now on (in v17), it is included by default.\n\nBy default, generate functional router guards.\n\nNew application build system (Making Angular faster than ever)\n\nüëâNode.js version\n\nSupport of Node.js is based on node LTS status. Support for Node version 16 was dropped.\n\nüéä Angular's team surprise!\n\nüëâ Brand new Angular logo\n\nNew Angular logo: I love how it is a little bit girly, and as Emma from Angular team said, green is already taken, blue is taken, and Angular has taken the rest!\n\nüëâNew documentation site\n\nA big surprise for the community, and I am thrilled to have been part of this fantastic project, making my humble contribution. The Angular documentation has often been a significant challenge for both new Angular developers and even experienced ones. It's easy to get lost on the Angular aio documentation site and struggle to find the information we're looking for.\n\n‚ûï All tutorials use the new Vite dev server and angular new features ‚ù§\n\n‚ùì What happens to angular.aio?\n\nAngular.io will release the final snapshot for version 18, and the new official documentation will be available on angular.dev. Angular.io will continue to host documentation for older versions, up to and including version 17.\n\nThis marks a renaissance for Angular, with exciting features on the horizon. A great documentation system is essential, and the Angular team is putting tremendous effort into addressing pain points for developers. The work is ongoing, and the documentation is continuously improving.\n\nThe new Angular.dev will undoubtedly enhance the experience for developers, making it easier to find information and learn Angular.\n\nüí° Other news\n\nüëâ Signals are stable\n\nSignals are now primarily designed for use with Immutables by default.\n\n‚Üí To update signals, you can employ the set method to assign a new value or the update method to map the current value to a new one.\n\n‚Üí mutate method is removed.\n\n‚Üí The change to data-bound Signals in Angular now marks only the directly affected components as dirty, rather than marking all parent components as dirty.\n\nüëâExperimental support for the new View Transitions API\n\nThe View Transitions API enables easy animations when transitioning between different DOM states. This is an opt-in feature to create view transitions for router navigation.\n\n‚ö†Ô∏è In the case of a browser that doesn't support this API, the route activation/deactivation will occur synchronously.\n\nüëâ Debugging Dependency Injection in DevTools ü§Ø\n\nWhen it comes to debugging dependency injection, a better debugging experience is welcomed with big hug, nah?!",
    "link": "https://medium.com/p/4b0763541ffe"
  },
  {
    "id": "4a0ce8257c1e",
    "content": "Angular new defer feature ü§Ø\n\nLearn all about the whereabouts of this feature\n\nHi there üëã\n\nThe feature will be available in the upcoming Angular version 17 (next week). This feature allows you to implement lazy loading within Angular templates, promising a transformative impact on our template-building approach with better performance and user experience.\n\nIt goes beyond simple lazy loading, offering the ability to specify conditions for loading, such as user interactions (e.g., clicks), hovering, or in response to specific functions (e.g., when hasFetchedData() is true), and much more.\n\n</> Example:\n\nTo do a similar thing without defer, we'd need more code:\n\n‚úîÔ∏è Elegant ‚úîÔ∏è Intuitive ‚úîÔ∏è Light ‚ûï Better performance\n\nüî•Defer whereabouts\n\nüìú 1- Defer has conditions:\n\nTo ensure that dependencies within a @defer block are deferred, two conditions must be met:\n\n‚Üí Dependencies must be standalone. Non-standalone dependencies cannot be deferred and will load immediately, even if placed inside @defer blocks.\n\n‚Üí Dependencies must not be directly referenced from the same file outside of @defer blocks, including ViewChild queries.\n\nüß± 2- Defer can be used with different blocks:\n\nThese optional blocks allow you to handle different stages in the deferred loading process.\n\nloading : an optional block that allows you to declare content that will be shown during the loading of any deferred dependencies. It's so perfect to show a spinner, for example. Two optional params can be used in this block the minimum and after parameters time.\n\n@defer {\n  <videos-player .../>\n} @loading (after 100ms; minimum 1s) {\n  <app-spinner/>\n}\n\nplaceholder : an optional block that declares content to show before the defer block is triggered. As it is named, it is just a placeholder, and once the main content is loaded, the placeholder gets replaced. So, for UX, it's great! This block can also be used with the minimum parameter to specify the minimum time this placeholder should be shown.\n\n@defer {\n  <video-player .../>\n} @placeholder (minimum 500ms) {\n  <img alt=\"Video placeholder image\" src=\"asset/video-placeholder.png\"/>\n}\n\nerror we finally have the optional error block to handle situations where deferred loading fails.\n\n‚ö° 3- Defer has triggers\n\nA @defer block replaces placeholder content with lazily loaded content, and you can configure the trigger using on or when.\n\non specifies the trigger condition, such as on interaction(...) or on viewport and you can define multiple event triggers treated as OR conditions. For example:\n\n\n@defer(on interaction(placeholder); on timer(5s)) {\n  <video-player .../>\n} @placeholder {\n  <img alt=\"Video placeholder image\" src=\"asset/video-placeholder.png\" #placeholder/>\n}\n\nIn this case, the block triggers if the user interacts with the placeholder content or after 5 seconds.\n\nwhen specifies the trigger condition as an expression that must return a boolean. For example, when hadFetchData().\n\nBoth triggers can be combined, and it's an OR condition. The defere block will be loaded when either condition is met.\n\nList of triggers:\n\non idle: triggers once the browser has reached an idle state.\n\non viewport: triggers when the specified content enters the viewport.\n\non immediate : triggers immediately once the browser has finished rendering.\n\non timer(n): triggers after a specified duration (duration param is required in ms or s, example on timer(5s).\n\non hover: triggers when the mouse has hovered over the trigger area (mouseenter, for example).\n\non interaction: triggers when the user interacts with the specified element (click event, for example).\n\n‚Üì 4- Defer has prefetch option\n\nThis allows you to trigger when you want the prefetching of the deferred chunk to start. It can also be combined with triggers like:\n\n@defer(prefetch on hover) { ... }\n\nüí° This is awesome when you want to start prefetching when the user has shown interest in something (hovered over a button, indicating potential interaction), or when you are confident the user will click on something (based on stats or whatever). In this case, you can prefetch it 'during browser idle stage' (@defer(on interaction(eltRef); prefetch on idle)) making the resources available more quickly.\n\nüß™ 5 - Unit test deferred blocks\n\nTo unit test the deferred blocks, Angular provides us with the getDeferBlocks() method that retrieves all defer block fixtures in the component fixture. From there, you can play with different states by rendering them and checking the output.\n\n// Get the first defer block.\nconst firstDeferBlockFixture = componentFixture.getDeferBlocks()[0];\n// Render loading state\nawait deferBlockFixture.render(DeferBlockState.Loading);\nexpect(componentFixture.nativeElement.innerHTML).toContain('whatever we put in loading block');\n// Render final state\nawait deferBlockFixture.render(DeferBlockState.Completed);\nexpect(componentFixture.nativeElement.innerHTML).toContain('whatever we put in defer block');\n\n</> Few examples:",
    "link": "https://medium.com/p/4a0ce8257c1e"
  },
  {
    "id": "443cbdf1f366",
    "content": "Angular Toward Its RenaissanceüöÄ‚ú®\n\nThe most outstanding features from v14 to v17‚ö°Ô∏è\n\nHi there üëã\n\nA lot of things happened in the Angular latest versions that surprised a lot of developers. And with the upcoming incredible features in Angular version 17, It's the renaissance of Angular!\n\nThis article gathers the most remarkable steps walked so far by Angular from v 14 to the upcoming v17.\n\nüëâ Angular in its 14\n\nüëâ Angular in its 15\n\nüëâ Angular in its 16\n\nüëâAngular in its upcoming 17 üîÆ\n\nüìåAt its 14\n\nüí° Standalone components (dev prev)\n\nThis is one of the exciting features that completely change the Angular structure. It shifts from a module-based app, where components must be declared in a module to be used, to a fully component-based app. This marks the initial step in that direction. An example demonstrating this feature is provided in the \"At its 15\" section.\n\nüí° Typed Forms\n\nThis feature addresses the number one issue on Angular's GitHub repository. With typed forms, we benefit from stricter template type-checking. We are informed at compile time, whereas previously, issues would only arise during runtime.\n\nAnd, just like any other typed variable, the code editor will provide autocompletion when you attempt to access a form property, great nah?\n\nüí° inject()\n\nOne of the APIs I rely on daily in my applications.\n\nThere are numerous advantages to this API.\n\nFor instance, I can set my observable at its declaration time (e.g., teams: Observable<Team[]> = inject(TeamsService.getTeams();), which wasn't possible previously because the declaration occurred before the constructor.\n\nIn certain situations where you can't use a constructor, a functional guard is a perfect example (a new feature that simplifies the usage of guards in Angular (available in v15)).\n\n‚ö†Ô∏èinject() can only be called from an injection context, such as a constructor, a factory function, a field initializer, or a function used with runInInjectionContext.\n\nüí°All CommonModule pipes and directives were marked as standalone.\n\nThis is another step toward unlocking the substantial potential of the standalone feature. Previously, when we wanted to use the date pipe, for instance, we had to import the CommonModule. This module not only contained the required pipe but also included other pipes, directives, ...etc. These pipes/directives are now available as standalone entities, allowing you to import them individually according to your specific needs.\n\nüí° Setting inputs on ComponentRef the new setInput() method\n\nGreat news for dynamic components: through the new setInput() method, you can intuitively and elegantly set component inputs.\n\nüí°Add CanMatch guard to Route\n\nA new route guard allows the exclusion of a route from the matching process during navigation.\n\nThe CanLoad guard only specifies whether the code should be downloaded while canActivate determines whether the route should be activated. ThecanMatch is used for cases where you want to decide where to navigate based on some data. We can define multiple routes with the same path and activate or load the route based on specific conditions (who the user is for example).\n\nüí° NgOptimizedImage directive (dev preview) (14.2)\n\nGreat news for those who load many images in their apps, such as e-commerce applications. In terms of performance, this directive is the one to use in such cases, and it's also available as a standalone directive!\n\nWith this directive, you can select the loading mode, either lazily or eagerly. You have the option to prioritize an image, and you can define parameters like width, height, fill, ...etc.\n\nHere is a great article about all that you need to know about this directive!\n\nüí° createComponent and reflectComponentType APIs (14.2)\n\nThis is a replacement for the deprecated ComponentFactory API. Creating components dynamically is much easier.\n\nüí° New APIs to use Router without RouterModule (dev preview) (14.2)\n\nNo need to use RouterModule to set up the Router anymore. Perfect toward a complete standalone component app, but it doesn't require an app to use standalone APIs. Those APIs add more Router features in a tree-shakable way. You only import what you use!\n\nüìåAt its 15\n\nüí° Standalone APIs (stable and production ready) + schematics + HTTP/Router APIs.\n\nIn v15, it's possible to create a complete standalone Angular app without NgModule.\n\nüí°Improved stack traces in the browser console\n\nFor DX, debugging improvements and tools are always welcomed üòÜ\n\nüí°Hiding CLI config files by default\n\nVisually, it is stunning - cleaner with fewer elements for the eyes to read. However, this led to significant confusion, mainly when dealing with environement configuration files. Many projects depend on it.\n\nüí° Self-closing component tags (15.1)\n\nAdd elegance üéá to Angular templates. Notice that for projected content, you still need to use a closing tag.\n\nüí° Add TestBed.runInInjectionContext to help test functions that use inject API (15.1)\n\nLet's say you use a functional-based resolver guard that injects a service to get some data. To test the resolver function, we need to run the function in an injection context, which is not the case in unit tests (remember inject() can only be used in an injection context).\n\nWith the TestBed.inject(EnvironmentInjector).runInContext you'll be able to run the function in an injection context like below:\n\nüí° New schematics for generating functional router guards and resolvers (15.1)\n\nGuard and Resolver schematics now support a --functional flag. The guard type can also be provided with the --guard-type.\n\nng generate guard my-guard --functional\nng generate guard my-guard --functional --guard-type canDeactivate\nng generate resolver resolve-data --functional\n\nüí° Generate functional interceptors too\n\nng generate interceptor my-interceptor --functional\n\nüí° Generate environment or config files (15.1)\n\nThe deleted env & config files by default starting from v15 was not a big success. The Angular team has provided us with schematics to generate them. So you'll only have env/config files when you need them.\n\nGenerates empty environment files for each project configuration\n\nAdds a fileReplacement option for each file\n\n// Env files\nng generate environments [--project name]\n// Conf files\nng generate config [karma|browserslist]\n\nüí° Support inline component Sass styles with esbuild builder (15.1)\n\nYou can from v15.1 use Sass (scss or sass) syntax with inline component styles.\n\nüí°Add a withNavigationErrorHandler feature to provideRouter (15.2)\n\nThis feature replaces the errorHandler in RouterModule.forRoot option. Plus a bonus: it runs in an injection context, so inject() can be used to grab dependencies!\n\nüí° New schematic to convert to standalone (15.2)\n\nng generate @angular/core:standalone\n\nüí° Directive Composition API\n\nA powerful API that gives you the power to pull in behaviors you need from other directive(s) (it can be from Angular CDK) and apply it to the host element of your component or directive.\n\nüìåAt its 16\n\nüí°EsBuild + Vite (dev preview)\n\nThis is really a considerable change in Angular app building life. This new bundler is very fast and could reduce the build time considerably.\n\nExperimental support for ng build using esbuild is already available. With v16 the tooling team has made some improvements to the Development Server (in dev preview). Now, you can run ng serve with esbuild.\n\nüí°Signals (dev preview)\n\nThe first step toward the new reactivity model and toward a zoneless app for Angular, which brings significant improvements to performance and developer experience.\n\nsignal() - reactive values\n\ncomputed() - reactive value derived from other signals\n\neffect() - run code when reactive values change\n\nHere is a quick get-started to learn Signals:\n\nüí° Hydration (doc üìì)\n\nTime for user experience improvements with non-destructive hydration support. Once the browser receives the rendered markup from the server and parses it as a DOM, Angular will traverse the structure, add event listeners, and create internal data structures. From that point, the application becomes interactive without requiring a rerendering process. This will fix the problem of encountering a \"flicker\" with Angular Universal.\n\nüí°Required Inputs\n\nInputs can be marked as required. So, at compilation time, required inputs will raise an error if they haven't been set. This is great! You don't need to check in ngOnChange whether the must-have inputs are set or not and throw errors by yourself! Intuitive and elegant! I give it a ‚ù§Ô∏è\n\nüí° Transform inputs\n\nFor those who wish to transform the data easily passed into a component input.\n\nüí° Routing data as component inputs ‚ù§Ô∏è\n\nAnother great feature! Now, mapping route data (params, query params, resolved data) directly to component inputs is possible ‚ö°Ô∏è\n\n‚ö†Ô∏è Must be enabled in the provideRouter.\n\nBefore and after!\n\nüí°takeUntilDestroyed & DestoryRef\n\nA flexible way to run instruction in ngOnDestroy without implementing the hook itself.\n\nWorks in components, directives, pipes, and DI services.\n\nDestoryRef provides an alternative way of registering onDestroy lifecycle callbacks.\n\n‚ö†Ô∏è takeUntilDestoryed needs to be called inside an injection context (like inject() ). Otherwise, you need to manually pass the destoryRef.\n\nüí°Jest support (Experimental)\n\nJest is so popular that the Angular team decided to integrate it. To try it out, you need to enable it in angular.json file.\n\nüí°mapToCanActivate helper function\n\nIt simplifies the migration to functional guards at the Route definition and provides more direct support for authoring class-based guards if desired.\n\nüí° ngComponentOutlet has inputs now ‚ù§Ô∏è\n\nA new way to pass data to dynamically created components with the ngComponentOutlet directive! There is no need to use the injector to pass data unless you need to provide dependencies. In this case, you need to use the injector.\n\nüí° provideServerRendering function to provide server capabilities to an application.\n\nüí° provideServiceWorker function\n\nThere is no need to have a NgModule to enable ServiceWorker in your app anymore. The API is similar to the existing ServiceWorkerModule.register method, which simplifies the migration.\n\nüí° standalone support to the Angular CLI schematics\n\nYou can get started now right away with a completely standalone app.\n\nng new --standalone\nng generate application --standalone\n\nüìåAt its 17\n\nAngular v17 is my favorite Angular version so far. It has awesome features and boosts developer experience (DX) and performance. You'll find a dedicated article about this release at the end of this section.\n\nüí° New built-in flow control\n\nI've previously talked about the forthcoming Angular built-in control flow and its RFC. Now, it's becoming a reality. We'll be able to experiment with it soon (and you can even take a shortcut by installing v17.0.0-next.8 üòâ). The RFC initially suggested the hash (#) syntax, but after receiving feedback from the community, the syntax has been modified. The same applies to the defer feature syntax as well.\n\nOnly when you try it, you'll see its beauty and its power üí™ (see the before/after example below):\n\n‚ö°Ô∏è trackBy becomes so simple, intuitive and elegant!\n\n‚ö°Ô∏è Empty array use case managed for us behind the scenes thanks to the @empty block.\n\nBTW, this is just a small example. Trust me!\n\nüí° Deferred loading ü§Ø\n\nLazy loading within a template thanks to the @defer feature. This will definitely revolutionize the way we construct our templates in Angular. It offers more than just basic lazy loading. We can choose a condition(s) (on interaction (e.g. click)? on hover? when something happens (e.g. when hasFetchedData()),...etc.\n\nThe @defer can also be used with other blocs such as @error, @loading , ...etc.\n\nAnd much much much more!\n\nüíÉ More details about the upcoming version new features will be covered in a dedicated article for the new release üåü Stay tuned!\n\n[UPDATED]",
    "link": "https://medium.com/p/443cbdf1f366"
  },
  {
    "id": "24d7a4c1084e",
    "content": "Angular app powered by generative AI with Google's PaLM API\n\nBuilding \"Tell Me a Story\" app powered by ML\n\nHi there üëã\n\nGoogle has recently introduced the MakerSuite tool and PaLM API, making prototyping apps powered by Generative AI so easy and quick without being an expert in Machine Learning.\n\nI joined the September 2023 #MakerSuiteSprint challenge and decided to build an Angular app powered by this API!\n\nMany things are important to explain in this article, which makes the article long. Here is the plan of the article to make it easy for you to navigate through the article without getting lost üòÖ\n\nWhat's Generative AI\n\nPaLM API\n\nThe \"Tell Me a Story\" app\n\nThe app's implementation\n\n‚Üí üîçSearch Tab\n\n‚Üí üìñ Read Tab\n\n‚Üí üìö Library Tab\n\nMore functionalities\n\nDemo\n\nLast words\n\nResources\n\nGenerative AI\n\nGenerative AI employs machine learning models to create content (such as images, text, sounds, etc.). In the case of PaLM, we utilize Large Language Models (LLMs), which are neural networks designed to process input text (similar to the text we provide to ChatGPT). LLMs can be trained on various types of data; they can generate code or be trained on extensive datasets containing a wide range of text.\n\nThe PaLM API\n\n- Without PaLM API\n\nIn machine learning, if we want to build any ML-powered app, we need to train data, actually thousands and thousands of data (the more, the better). This takes time, and you need a robust computer.\n\n- With PaLM API\n\nYou can rapidly prototype even without prior experience in machine learning. Thanks to the newly introduced PaLM API, developers can now access Google's cutting-edge LLMs hosted in the Cloud. More interestingly, it can be used with different programming languages.\n\nAccessing the PaLM API through the browser - MakerSuite\n\nThe great thing is that we can, before coding, play with the PaLM API through the MakerSuite tool on the browser without any setting/installing phase.\n\nWe write an input text in regular human language and let the LLM generate an output. Based on the result, we adjust the text and try to guide the model to generate the desired output. This is well-known nowadays with the appearance of chatGPT. This is called prompt engineering or prompting.\n\nThe Palm API provides multiple text generation capabilities.\n\nPrompt text (provide text and get an output)\n\nData prompt (provide a set of inputs and the output you want so that the next time you provide an input, the model will generate output based on your provided outputs. (ex. Paragraph summary: this is especially great as it generates summaries based on your style). This technique can also be used to generate training data.\n\nChat prompt to build a chatbot.\n\nWhen you're done playing with it on the browser, you can jump to the code right away, and the great thing is that the code is also generated for you!\n\nBefore starting to use and build things, you must generate your key. You can do so by going here and creating an API key.\n\nNB. for people outside USA, for now, you'll need a VPN.\n\nüí° The \"Tell me a story\" app\n\nThe app is designed to be used by parents to build a story based on some variables such as child gender, age, story type (fantasy, Adventure, Fairy Tales, ... etc.), and optionally, a message to pass to the child through the story such as Courage, Gratitude, Perseverance, ..etc.\n\nFor this, I used the text prompt type to build my app. I played with it on the MakerSuite until I got a satisfying result.\n\nüõ†Ô∏èTech/tools\n\nHere are the ingredients I used to build my app:\n\nAngular v16 (obviously üòÑ)\n\nIonic to transform it into a mobile app, making it more practical and convenient for parents who want to grab their phone or tablet and generate a brand new and customized story for their child.\n\nGoogle PaLM API + my created API key.\n\nImagine text-to-image AI API + my created API key by Imagine Art ‚ù§Ô∏è to generate a suitable poster for the generated story. This part took a lot of time. Searching for the right API wasn't easy, especially since most text-to-image APIs are not free, and I couldn't test them before buying. This API provides free tokens to test the API before buying credits. The generated image quality is also remarkable. This API is super powerful. I was really astonished by the quality of the outputs. I loooove üíå it and recommend it for any text-to-image powered by AI usage, and I'd happily pay the team behind it for providing such fantastic and high-quality services!!). As a developer, I love working on such systems!\n\nCanva, to design the home page (not really beautiful, but it's just a quick thing to have a home page and focus on more important things in the app)\n\nüéØMain functionalities:\n\nSearch tab, where we interact with the PaLM API to generate a new custom story.\n\nLibrary tab, where we have a set of already generated stories by the model.\n\nRead Tab, where we read the generated story with its generated poster all by AI.\n\n</> Implementation\n\nI'm not going through Angular/Ionic details in this article. The goal, after all, is to show you a use case using the PaLM API.\n\nCreating API key (this is a mandatory step).\n\nBuild a search story form with gender, age, story types, and, optionally, the message to pass to the child behind the story.\n\nüîçSearch Tab\n\nimport { NgFor, NgIf } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { Component, inject, OnInit } from '@angular/core';\nimport { TitleCasePipe } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { FormBuilder } from '@angular/forms';\nimport { Validators } from '@angular/forms';\n\nimport { StoryService } from '../shared/services/story.service';\nimport { Gender, StoryData } from '../shared/models/story.data.model';\nimport { messages, types } from 'src/assets/mocks/data';\n\n@Component({\n  selector: 'search',\n  standalone: true,\n  imports: [\n    IonicModule,\n    NgFor,\n    ReactiveFormsModule,\n    FormsModule,\n    TitleCasePipe,\n    NgIf,\n    RouterModule,\n  ],\n  templateUrl: `\n  <ion-header>\n    <ion-toolbar>\n      <ion-title>Search for the right story</ion-title>\n    </ion-toolbar>\n  </ion-header>\n    <ion-content class=\"ion-padding\">\n      <ion-card>\n        <!-- Card header -->\n        <ion-img\n          alt=\"Search story banner\"\n          src=\"../../assets/img/search-1.png\"\n        ></ion-img>\n        <ion-card-header>\n          <ion-card-title>Find the right story</ion-card-title>\n        </ion-card-header>\n    \n        <!-- Card body - story form -->\n        <ion-card-content>\n          Fill this small form and let AI get you a unique and brand new generated\n          story just for you!\n          <form\n            [formGroup]=\"storyForm\"\n            (ngSubmit)=\"onSubmit()\"\n            class=\"ion-text-center\"\n          >\n            <ion-item>\n              <ion-input\n                formControlName=\"age\"\n                label=\"Age*\"\n                labelPlacement=\"stacked\"\n                [clearOnEdit]=\"true\"\n                placeholder=\"Enter the child age\"\n              >\n              </ion-input>\n            </ion-item>\n    \n            <ion-item>\n              <ion-select\n                formControlName=\"gender\"\n                label=\"Gender*\"\n                label-placement=\"stacked\"\n                placeholder=\"Choose the gender\"\n              >\n                <ion-select-option\n                  *ngFor=\"let g of gender; let i = index\"\n                  [value]=\"g\"\n                  >{{ g | titlecase }}</ion-select-option\n                >\n              </ion-select>\n            </ion-item>\n    \n            <ion-item>\n              <ion-select\n                formControlName=\"type\"\n                label=\"Story type*\"\n                label-placement=\"stacked\"\n                placeholder=\"Choose the type of story\"\n              >\n                <ion-select-option\n                  *ngFor=\"let type of types; let i = index\"\n                  [value]=\"type\"\n                  >{{ type | titlecase }}</ion-select-option\n                >\n              </ion-select>\n            </ion-item>\n    \n            <ion-item>\n              <ion-select\n                formControlName=\"message\"\n                label=\"Story message (optional)\"\n                label-placement=\"stacked\"\n                placeholder=\"Choose the message you want to pass\"\n              >\n                <ion-select-option\n                  *ngFor=\"let message of messages; let i = index\"\n                  [value]=\"message\"\n                  >{{ message | titlecase }}</ion-select-option\n                >\n              </ion-select>\n            </ion-item>\n            <ion-button type=\"submit\" [disabled]=\"!storyForm.valid\"\n              ><ion-icon name=\"sparkles\"></ion-icon> Go!</ion-button\n            >\n          </form>\n        </ion-card-content>\n      </ion-card>\n   </ion-content>\n  `\n})\nexport class SearchComponent {\n  private readonly fb = inject(FormBuilder);\n  private readonly storyService = inject(StoryService);\n\n  types = types;\n  messages = messages;\n  gender = ['girl', 'boy'];\n\n  storyForm = this.fb.group({\n    age: [null, Validators.required],\n    gender: ['' as Gender, Validators.required],\n    type: ['', Validators.required],\n    message: [''],\n  });\n\n  ionViewDidLeave() {\n    this.storyForm.reset();\n  }\n\n  onSubmit() {\n    const data: StoryData = {\n      age: this.storyForm.value.age,\n      gender: this.storyForm.value.gender as Gender,\n      type: this.storyForm.value.type as string,\n      message: this.storyForm.value.message as string,\n    };\n    this.storyService.generateStory(data);\n  }\n}\n\n\nInteract with the PaLM API and get data (Story service)\n\nI didn't use the generated MakerSuite NodeJS code because there is already a REST API that I can call. You can use the generated NodeJS in your backend if you have one, though!\n\n\n...\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoryService {\n  private readonly http = inject(HttpClient);\n  private readonly router = inject(Router);\n  public readonly loader = inject(LoaderService);\n\n  private readonly url = `${environment.apiImagineUrl}?key=${environment.apiPalmKey}`;\n\n  async generateStory(data: Partial<StoryData> | StoryData) {\n    try {\n      this.loader.showLoader();\n\n      const storyData = await this.generateStoryData(data);\n      const { tmpTitle, tmpStory } = this.extractTitleAndStory(storyData);\n      const generatedStory: Story = {\n        title: tmpTitle,\n        poster: '',\n        thumbnail: '',\n        story: tmpStory,\n        type: data.type ?? '',\n      };\n\n      const summaryResponse = await this.generateStorySummary(tmpStory);\n      let output = '';\n      if(summaryResponse && summaryResponse?.candidate?.length !== 0){\n        output = summaryResponse.candidates[0]?.output ?? tmpTitle;\n      } else {\n        output = tmpTitle;\n      }\n\n      const posterBlob = await this.generateStoryPoster(output);\n      if (posterBlob instanceof Blob) {\n        const objectURL = URL.createObjectURL(posterBlob);\n        generatedStory.poster = objectURL;\n      } else {\n        generatedStory.poster = \"assets/img/default-poster.png\";\n      }\n\n      this.router.navigate(['/read'], { state: { story: generatedStory } });\n      this.loader.hideLoader();\n    } catch (error) {\n      this.loader.hideLoader();\n      throw `Error while generating story: ${error} `;\n    }\n  }\n\n  private async generateStoryData(data: Partial<StoryData> | StoryData) {\n    const text = this.buildSearchText(data);\n    const body = this.createPrompt(text);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n    return await this.postRequest(this.url, body, headers);\n  }\n\n\n  /**\n   * Build the prompt text\n   */\n  private buildSearchText(data: StoryData | Partial<StoryData>) {\n    let text = `Write a long ${data.type} story for a ${data.age}-years-old ${data.gender}.`;\n    if (data.message) {\n      text += ` The story should intend to pass a message behind words to my child about  ${data.message}. `;\n    }\n    text += ' Add a suitable title to the story.';\n    return text;\n  }\n\n  /**\n   * Create text prompt\n   * @param text the propmt text\n   * @returns PaLM API request's body \n   */\n  private createPrompt(text: string) {\n    return {\n      prompt: {\n        text: text,\n      },\n     // optional params can be provided here for better results...\n  }\n\n  /**\n   * Send a POST request to the provided url\n   */\n  private async postRequest(url: string, body: any, headers: HttpHeaders) {\n    return await firstValueFrom(\n      this.http.post(url, body, { headers }).pipe(\n        take(1),\n        catchError((err) => {\n          throw `Error when queyring ${url}: ${err} `;\n        })\n      )\n    );\n  }\n\n...\n}\n\nGenerating a suitable poster for the generated story\n\nIn this step, I needed to provide the Imagine Art API with the story details to generate an image that aligns with the narrative. Supplying the entire story wouldn't suffice due to character limits. Once again, I used the PaLM API to generate a summary for the created story. After getting the summary, I fed it to the Imagine API.\n\n...\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoryService {\n  private readonly http = inject(HttpClient);\n  private readonly router = inject(Router);\n  public readonly loader = inject(LoaderService);\n\n  private readonly url = `${environment.apiImagineUrl}?key=${environment.apiPalmKey}`;\n  ...\n\n  **\n   * Generate the story summary to pass it to the Imagine API\n   * @param text the generated story\n   * @returns the summary\n   */\n  private async generateStorySummary(text: string): Promise<any> {\n    const query = this.buildSummaryText(text);\n    const body = this.createPrompt(query);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n\n    return await this.postRequest(this.url, body, headers);\n  }\n\n\n  ** Generate a suitable story background image\n   * @param summary the story summary\n   * @returns the generated image\n   */\n  private async generateStoryPoster(summary: string): Promise<never[] | Blob> {\n    const headers = new HttpHeaders().set('bearer', environment.apiTextToImgKey);\n\n    return await firstValueFrom(\n      this.http\n        .post(environment.apiTextToImgUrl, this.getFormData(summary), {\n          headers,\n          responseType: 'blob',\n        })\n        .pipe(\n          catchError((err) => {\n            throw 'Error while generating story poster: ' + err;\n          })\n        )\n    );\n  }\n\n  private getFormData(summary: string): FormData {\n    const formData = new FormData();\n    formData.append('model_version', '1');\n    formData.append('prompt', `Generate a suitable dreamy background poster for this story: ${summary}`);\n    formData.append('style_id', '30');\n\n    return formData;\n  }\n\n  private buildSummaryText(text: string) {\n    return `Generate a short summary for this story: ${text}`;\n  }\n\n  ...\n}\n\nüìñ Read Tab\n\nAfter generating the story, we navigate to the read Tab with the story data.\n\nasync generateStory(data: Partial<StoryData> | StoryData) {\n  ...\n  // After building the story, navigate to read tab\n  this.router.navigate(['/read'], { state: { story: generatedStory }});\n  this.loader.hideLoader();\n}\n\nThe read.component.ts\n\n...\n\n@Component({\n  selector: 'read',\n  standalone: true,\n  imports: [\n    IonicModule,\n    NgIf,\n    RouterModule,\n  ],\n  styleUrls: ['./read.component.css'],\n  templateUrl: './read.component.html',\n})\nexport class ReadComponent implements OnDestroy {\n  protected readonly router = inject(Router);\n  protected readonly loader = inject(LoaderService);\n  private readonly alertController= inject(AlertController);\n\n  story: Story | null = null;\n  isAlertOpen = false;\n  alert!: HTMLIonAlertElement;\n  title = 'Reading';\n\n  private subscription = new Subscription();\n\n  constructor() {\n    this.subscription = this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe(() => {\n        const navigation = this.router.getCurrentNavigation();\n        // Simply store story object locally as tabs in Ionic are not destroyed and are kept active.\n        this.story = navigation?.extras.state\n          ? navigation.extras.state['story']\n          : null;\n\n        // Update tab header title\n        if(this.story && this.story.title){\n          this.title = `${this.title} \"${this.story.title}\"`;\n        } else {\n          this.title = \"Reading\";\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  ...\n\n}\n\n// The template part read.component.html\n<ion-header>\n  <ion-toolbar>\n    <ion-title>{{ title }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n<ion-content>\n  <!-- Story -->\n  <ion-grid *ngIf=\"story\">\n    <ion-row class=\"ion-justify-content-center\">\n      <ion-col size=\"12\" class=\"ion-text-center\">\n        <div class=\"image-container\">\n          <div class=\"image-overlay\"></div>\n          <ion-img\n            *ngIf=\"story.poster\"\n            class=\"image\"\n            [src]=\"story.poster\"\n            [attr.alt]=\"story.title\"\n          ></ion-img>\n          <p>\n            {{ story.story }}\n          </p>\n        </div>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n\nEt voila!\n\nüìö Library Tab\n\nThis Tab is added to read stories when AI API is not working and for the user who wants to save a generated story to his favorites in a more advanced app version.\n\nüåü More interesting functionalities (not yet implemented)\n\nTraining our own stories model for better results and high-quality stories and fine-tuning the model.\n\nMore customization of the text-to-image model so that the style changes based on the child's age.\n\nBeing able to authenticate and save generated stories to the library\n\nGenerate music (always by using AI) based on the story, its type, ...etc.\n\nAdd an AI text reader to read the story.\n\nImprove design, style ...\n\nError management\n\nüëÄ Demo\n\nComplete app demo:\n\nAll stories and background images are generated by AI (PaLM API & Imagine Art API), and all rights are reserved for these APIs.\n\nThe home page is just a GIF I quickly designed in Canva.\n\nLast words...\n\nThe generated stories are not always suitable and perfect for what parents would desire, which is entirely normal since we didn't use a model trained explicitly for children's stories, and the PaLM API is in its experimental phase.\n\nNevertheless, I am pretty satisfied with the capabilities of the APIs used and am pleased with the results. Training a model with a diverse set of high-quality, human-written children's stories will undoubtedly improve its accuracy and appeal.\n\n‚ùìWhat would you do with the PaLM API?\n\nResources",
    "link": "https://medium.com/p/24d7a4c1084e"
  },
  {
    "id": "7ffc219d2db0",
    "content": "Angular Template Powers #4\n\nThe immense power behind @ContentChild and @ContentChildren decorators\n\nHi there üëã\n\nHope you're great and ready to learn more about the immense, powerful things we can do inside an Angular template.\n\nAngular content projection is one of the features I love a lot about Angular. It gives you all the power you need to create maintainable, highly reusable, and elegant UI components.\n\nPrerequisites\n\nLearning about ng-content is essential as this article builds upon this feature. To learn more about it, here are the links:\n\nEpisode 10 üìë\n\nEpisode 10 üé•\n\nKnowledge of Episode 11 is essential, too. To understand this article as it builds upon the concepts covered in the ViewChild(), and @ViewChildren() decorators. Here are the links:\n\nEpisode 11 üìë\n\nEpisode 11 üé•\n\nYou can find the whole code here.\n\nPutting the base\n\nThe ViewChild() decorator serves as a bridge to select an element from the component's template, right?\n\nThe ContentChild() does the same thing, except that it's dedicated to projected content, as with ViewChild() we can't select projected content.\n\nüéìReal use case\n\nWhat are we going to build?\n\nWe'll be building Tabs UI, and here is the UI we'll be building:\n\nDesigning phase\n\nThere are mainly two components:\n\nTabComponent\n\nTabsComponent\n\nSolution 1\n\nThe first quick solution that might come to our mind, is something like this:\n\n<tabs [names]=\"['Tab 1', 'Tab 2', 'Tab 3']\"  (selectedTab)=\"onSelectedTab($event)\">\n     <tab *ngIf=\"selectedTabIndex === 0\">Content tab 1</tab>\n     <tab *ngIf=\"selectedTabIndex === 1\">Content tab 2</tab>\n     <tab *ngIf=\"selectedTabIndex === 2\">Content tab 3</tab>\n</tabs>\n\nAs you can see, I pass an array of tabs names to the TabsComponent and whenever the selectTab() event is fired, I reset the currently active tab's index, and based on that, I display a tab conditionally.\n\nThis works, however, there are several issues and limitations with this solution:\n\n‚ùåThe names array we pass to TabsComponent: This is a big limitation, as I need to make sure the names are logical and in synch with the projected tab(s) inside the TabsComponent. Any mistake would break the whole thing.\n\n‚ùåA tab name information is related to a Tab rather than TabsComponent: So, it is more coherent to give/find this information in the TabComponent and not the TabsComponent.\n\n‚ùåThe selection system is just horrible: I must manually, whenever the select event is fired, do things so that the right Tab is displayed.\n\nAll of this makes our solution not maintainable, bug-prone, and not elegant at all!\n\nSolution 2\n\nWhat would be great for our use case is:\n\nA solution that is simple and intuitive to use\n\nA transparent autonomous selection system\n\nA dynamic solution, that works automatically regardless of the number of Tabs we project.\n\nSomething like this is better, isn't it?\n\n<tabs>\n    <tab name=\"First tab\"> \n      <a-cmp></a-cmp>\n    </tab>\n    <tab name=\"Second tab\">\n      <p>This is a simple paragraph and not a component</p>\n    </tab>\n    <tab name=\"Third tab\">\n      <p>This is another simple paragraph</p>\n    </tab>\n</tabs>\n\n‚úîÔ∏èEach Tab has its name information.\n\n‚úîÔ∏èThe selection system is managed internally. Transparent and works like magic. We don't see it!\n\nHere, to build such a solution, we must use the @ContentChildren() decorator. Nothing else can give us enough power to access the instances we need to make this solution possible. I mentioned @ContentChildren() as I wanted to select multiple TabComponent but if we needed to select one element, then @ContentChild() is sufficient.\n\nüé¨To action now!\n\nIt's time to implement the solution.\n\nThe TabsComponent\n\nThanks to @ContentChildren(), I can query all TabComponent instances from the template.\n\n/**\n * Get all projected TabComponents\n */\n@ContentChildren(TabComponent)\ntabs!: QueryList<TabComponent>;\n\nFrom here, I can loop throughtabs and display buttons labeled with each tab name. In the body, I'll again take advantage of tabs, to provide dynamically at runtime the currently selected tab's template:\n\n\n<!-- Display a button for each tab -->\n<button [ngClass]=\"activeTabIndex === i ? 'active' : null\"\n  *ngFor=\"let tab of tabs; index as i\"\n  (click)=\"setCurrentTab(i)\">\n  {{ tab.name }}\n</button>\n<!-- Set the ody with the currently selected Tab's template -->\n<div class=\"tab-container\">\n  <ng-container *ngTemplateOutlet=\"currentTab\"></ng-container>\n</div>\n\nThe selection system is now managed internally. Whenever the button is clicked, I call setCurrentTab(i) and pass it the index, I already have, thanks to tabs. After then, if the selected tab is different than the current one, I set the currentTab property to the new tab's template.\n\nif (index !== this.activeTabIndex) {\n  this.currentTab = (this.tabs.get(index) as TabComponent).template;\n  this.activeTabIndex = index;\n}\n\nAs you can see, I access the tab's template through the TabComponent instance. Let's give it a look!\n\nThe TabComponent\n\nIn this component, I need two things:\n\n1 - To be a container for whatever we want to put in it. That means that I need content projection feature here.\n\n2 - I need to be able to access the tab template, so the projected content should be wrapped with ng-template and with the power of@ViewChild() decorator, I can access it in the class, which means through the instance too.\n\n<!-- TabComponent template -->\n<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n\n<!-- TabComponent class -->\n@Input() name!: string;\n@ViewChild(TemplateRef) template!: TemplateRef<any>;\n\nRemember, thistemplate property is what I used to set the currentTab:\n\nthis.currentTab = (this.tabs.get(index) as TabComponent).template;\n\nNow, the dynamic part of changing the Tabs body template at runtime is done magically by the powerful directive ngTemplateOutlet.\n\n<div class=\"tab-container\">\n  <ng-container *ngTemplateOutlet=\"currentTab\"></ng-container>\n</div>\n\nThis is way more elegant and sexy than the first solution with conditional rendering based on the index, isn't it?\n\nHere is the big picture of this implementation:\n\nüí° Important to know\n\nContent projection = ng-content, right?\n\nYou may have already noticed that I haven't used any ng-content in the TabsComponenttemplate. Nevertheless, on the class side, I use the @ContentChildren()! A bit confusing, nah? Here is why!\n\nA projected content is anything we put inside our component tag:\n\n<a-cmp>\n  <p>Anything you put here, is called projected content</p>\n<a-cpp>\n\nNot using the ng-content doesn't mean I haven't projected content, it only means what I projected content, but I won't see it. It's theng-content that plays the role of a placeholder and gets replaced automatically by the projected content.\n\nIn my case, I didn't want to show all projected TabComponent, so I don't need a placeholder for my projected content.\n\nTherefore,@ContentChildren() will work as long as I project things inside the component tag regardless of using ng-content or not.\n\nFinally, you've almost learned all the whereabouts of this decorator. To complete, the rest is about learning the decorator properties and metadata. As this is easy to understand and almost like those of @ViewChild() decorator, I won't make the article longer than it is already. However, in the video, I've already explained this part!\n\nThe use case code:\n\nThe VV",
    "link": "https://medium.com/p/7ffc219d2db0"
  },
  {
    "id": "cfac64205ab8",
    "content": "My story behind becoming Angular GDE\n\nFrom A to Z\n\nHi there üëã,\n\nIt started on Feb 9, 2022, with this message:\n\n\"Hello Fatima! Monika here, I work for Google on the Google Developers Experts program. Have you ever considered applying? I I think with your experience and expertise you would make a fantastic Angular GDE. Let me know if you'd like to consider it and discuss in details :) all the best!\"\n\nAs an Angular developer, I developed a deep fondness for the framework from the very beginning. My passion for learning has always driven me to optimize processes and explore better ways of doing things while also motivating and inspiring others. Every individual possesses unique and special qualities, and it is essential to recognize and embrace those strengths within ourselves and others.\n\nIn particular, challenging the misconception that women are not suited for tech has been a significant motivation for me. Each time I have the opportunity to inspire women to pursue careers in technology, it brings me an immense sense of fulfillment and serves as a meaningful reward for my efforts.\n\nIn case you don't want to hear the whole story! Go to the sum up section üòâ\n\n‚ùì So, if you're asking, what was the thing that captured attention\n\nI would say there are two significant factors that contributed to my journey with Angular. Firstly, I actively shared numerous articles about Angular, and secondly, I volunteered as a mentor at MyJobGlasses. While I may not have considered myself an absolute Angular expert, I possessed a strong understanding of the framework, and, most importantly, my insatiable hunger for learning constantly propelled me forward because of my genuine love for it.\n\nInitially, I hesitated, considering the amount already on my plate: my regular job, writing articles, mentoring commitments, and ongoing self-improvement endeavors. I questioned whether I would have the capacity to take on additional responsibilities and if I could rise to the challenge.\n\nI didn't apply!\n\nI refrained from applying initially, but destiny had other plans for me. Several months later, I stumbled upon the Europe WDA (Women Developer Academy) program while browsing LinkedIn. The program allowed participants three months to equip participants with the skills, resources, and support they need to become leaders in the industry through public speaking and other community contributions. In there, I could ask questions, interact with GDEs, and gauge their feelings about it before deciding whether to apply for a GDE position. Feeling intrigued and curious, I took the plunge and applied to the WDA program.\n\nThe journey through the WDA program proved to be nothing short of amazing. It was an incredibly encouraging and enriching experience. The exposure to new knowledge and the support from fellow participants and mentors was inspiring. After this transformative experience, I realized that I had found my calling and decided wholeheartedly to apply for the esteemed GDE.\n\nüìÑApplying step!\n\nIt was time to take action. I reached out to Monika to communicate my final decision, and her joyous response was heartwarming. She promptly sent me the application mock document, and as I delved into it, I realized the process was more complex than I had initially thought. It certainly presented some challenges, and I couldn't help but chuckle at the realization üòÖ.\n\nTo increase my chances of success and make a strong application, I analyzed the entire process. In brief, I identified the following key requirements that I needed to fulfill:\n\nTo have good knowledge of Angular\n\nHaving a strong grasp of Angular involves staying up-to-date with the latest developments and upcoming features. Understanding crucial concepts like RxJS, Redux, and more is essential.\n\nTo have an impact (small or big, it doesn't matter)\n\nWhether making a small or significant impact, sharing knowledge about Angular has been my focus. For almost two years, I dedicated myself to writing technical articles on Medium, building a humble but engaged audience on social media who appreciated my content.\n\nTo have a good portfolio\n\nTo bolster my credibility, I've taken steps to create a compelling portfolio. This includes maintaining an active GitHub profile, and official website, and showcasing relevant work experiences.\n\nTo have mentoring experience\n\nAnother valuable aspect of my journey has been my experience as a mentor. While I initially didn't intend to become one, my passion for helping others led me to volunteer and offer guidance for over two years. These mentoring experiences have been rewarding and have opened doors to unexpected opportunities.\n\nüí° If I hadn't had these encouraging indicators, I would definitely take the time to prepare myself before applying.\n\nüìß Application sent, the process after that\n\nAfter submitting my application, I need to complete some steps. Each successful step will lead to the next one.\n\n‚úîÔ∏èEligibility Check\n\nIn this step, your Application Form will be evaluated by Program Managers.\n\n‚úîÔ∏èCommunity Interview\n\nNext step, after passing the application form successfully. You'll have an interview with a GDE of the same category you are applying to. The GDE will aim to assess your impact on the developer community and some technical skills.\n\n‚úîÔ∏èProduct Interview\n\nThe third step, is an interview with a Google specialist in your area of expertise will evaluate your knowledge and familiarity with Angular in my case (can be any other Google tech)\n\n‚úîÔ∏èLegal Sign Offs\n\nYou've done it! What remains is some formalities and administration. You'll be asked to sign an NDA and T&C in order to formally make you a part of the GDE Program.\n\n‚úîÔ∏èProgram Onboarding\n\nAt this step, you're officially a GDE. You'll join relevant mailing lists & chat channels, attend events, contribute to the community, and report your activities.\n\nüí° This step can be overwhelming due to the fast pace and the amount of information to learn. However, it's important not to worry because everyone has had the same experience. With time, you will become more comfortable.\n\nüìùSum up!\n\nIf I were to answer the question about the keys to being a GDE, I would say:\n\nHaving someone, like Monika Janota, with honest encouragement, always available to answer questions and to push me forward. Her remarkable assistance was truly exceptional.\n\nHaving an impact on the community. Being followed by passionate people who aim to improve and learn, engaging actively on social media, and fostering meaningful interactions.\n\nHaving good knowledge of Angular and harboring a profound passion for this technology.\n\nAn insatiable thirst for knowledge, constantly seeking to expand my understanding and expertise.\n\nContinuously sharing insights and updates about Angular, staying abreast of all the latest features and developments.\n\nThe love to share and help unconditionally.\n\nNow, the beginning of an exciting new journey awaits - a time to learn, grow, and thrive!\n\nI hope this answers all your questions about my journey to becoming a GDE. Feel free to reach out to me on LinkedIn if you have any further questions. I would be happy to help üòä ‚ù§Ô∏è",
    "link": "https://medium.com/p/cfac64205ab8"
  },
  {
    "id": "7ef65a222efe",
    "content": "Angular Template Powers #3\n\nüî• The power behind @ViewChild and @ViewChildren decorators\n\nHi there üëã\n\nToday's story is about @ViewChild() and @ViewChildren() decorators. If you enjoy seeing things rather than reading them (I do, too), please find the video version at the bottom of this article.\n\n‚ùì What are @ViewChild() & @ViewChildren() decorators?\n\nLet's first focus on the @ViewChild(). Simply put, this decorator serves as a bridge between your component's class and the displayed view elements.\n\nüéìUse case\n\nWhat are we going to build?\n\nWe'll be building a list of items with a select button. When an item is selected, we display its data (a simple name for this example, but it can be more). At the bottom, we can clear the selection.\n\nDesigning phase\n\nThere are mainly two components:\n\nItemDetailsComponent\n\nItemListComponent\n\nSolution 1\n\nThe first quick solution can be something like this:\n\n<!-- ItemListComponent template -->\n<ul>\n  <li *ngFor=\"let item of items\" >\n  {{ item.name }}\n    <button (click)=\"selectItem(item)\">Select</button>\n  </li>\n</ul>\n\n<app-item-details [selectedItem]=\"selectedItem\" ></app-item-details>\n<button (click)=\"clearSelection()\">Clear Selection</button>\n\n<!-- ItemListComponent class -->\nexport class ItemListComponent {\n  selectedItem: Item;\n  ...\n\n  selectItem(item: Item) {\n      this.selectedItem = item;\n  }\n  \n  clearSelection() {\n     this.selectedItem = null;\n  }\n}\n\nThis solution works, and there is no problem with it. However, we can do better. We can use the power of the @ViewChild() decorator and avoid creating the property selectedItem inside ItemListComponent, update it at each selection action, and pass it to the ItemDetailsComponent's selectedItem input.\n\nSolution 2\n\nNow, let's use the @ViewChild() decorator to get the ItemDetailsComponent instance from the template and use the instance directly. No need for the ItemListComponent's selectedItem property anymore:\n\n<!-- ItemListComponent template -->\n<ul>\n  <li *ngFor=\"let item of items\" >\n  {{ item.name }}\n    <button (click)=\"selectItem(item)\">Select</button>\n  </li>\n</ul>\n\n<!-- no need to pass [selectedItem]=\"selectedItem\" anymore -->\n<app-item-details></app-item-details>\n<button (click)=\"clearSelection()\">Clear Selection</button>\n\n<!-- ItemListComponent class -->\nexport class ItemListComponent {\n  // selectedItem: Item; <--- no need for this anymore\n  \n  // Get the instance of ItemDetailsComponent in \n  // the template --> <app-item-details></app-item-details>\n  @ViewChild(ItemDetailsComponent) itemDetailsComponent!: ItemDetailsComponent;\n  \n\n  ...\n  selectItem(item: Item) {\n    this.itemDetailsComponent.selectedItem = item;\n  }\n  \n  clearSelection() {\n    this.itemDetailsComponent.clearSelection();\n  }\n}\n\nThanks to the instance I got with @ViewChild() decorator, I can set directly theItemDetailsComponent inputs and call its functions too (in this case the clearSelection() function) :\n\n<!-- ItemDetailsComponent template -->\n<div *ngIf=\"selectedItem\">\n  <h2>{{ selectedItem.name }}</h2>\n  <p>{{ selectedItem.description }}</p>\n</div>\n\n<!-- ItemDetailsComponent class -->\nexport class ItemDetailsComponent {\n  @Input() selectedItem!: Item | null;\n\n  clearSelecttion() {\n    this.selectedItem = null;\n  }\n}\n\nN.B. This is a simple example, where @ViewChild() decorator is an option and not mandatory to make things work. The main purpose is to introduce you to how decorators that work like a bridge between templates and components work. The next article about @ContentChild() decorator shows a real use case where using @ViewChild() decorator is mandatory to accomplish the goal!\n\nüî• That's not all!\n\nOne of the biggest powers of this decorator is its flexibility, we can configure it to our needs. This can be done thanks to the metadata and properties it got:\n\nü•¢ The selector property\n\nTo tell it what to select, is it a component instance that we need? A specific directive instance used on that component (we can have multiple directives applied to that component)? A service? ...Etc.\n\nüìñ The read metadata\n\nThis is used to specify what we want to read. Let's say I select the ItemDetailsComponent, but I don't want the component instance rather than that, I want its DOM element, we can do this by adding the read property set to ElementRef, just like this:\n\n@ViewChild(ItemDetailsComponent, { read : ElementRef })\nitemDetailsHtmlElement!: ElementRef;\n\nüïí The static metadata\n\nThis option is used to specify at which point in the component lifecycle you want to resolve the query. By default, the query is resolved in the ngAfterViewInit hook. But, what if I need the instance of that component in the ngOnInit hook. Sometimes, based on the resolved queries, we compute things, in this case, we should use the static metadata set to true.\n\n// The query is resolved and can be accessed in the ngOnInit hook \n@ViewChild(ItemDetailsComponent, { static: true})\nitemDetailsHtmlElement!: ElementRef;\n\nüí° One last thing!\n\nWe've talked so far only about @ViewChild() and not the @ViewChildren() decorator. Well, the only different thing is that with the @ViewChildren() decorator, we get a collection of the selected items. In the next article (#4) we'll learn about ContentChild() and ContentChildren() decorators, and in the provided use case, I'll be using multiple elements based on the selector, to give you an idea of its usage in a real-life use case.\n\nüë®‚Äçüíª Code\n\nüëÄ Video version",
    "link": "https://medium.com/p/7ef65a222efe"
  },
  {
    "id": "cede86e462eb",
    "content": "Angular keeps going higher and higher üöÄ... It's on fire üî•\n\nAngular keeps growing stronger and stronger!\n\nHi there üëã\n\nAngular keeps making noise and becoming stronger not only for a better user experience but also for a better developer experience. After all, we are the hidden soldiers ‚úä who create apps and the user experience, nah ?!\n\nI am so happy I chose this framework to build my and my client's apps. Angular keeps surprising us, and the innovation is only in its early days.\n\nMany more revolutionary things are coming, and Angular will definitely become more popular!\n\nSo, what are the next exciting upcoming features in Angular?\n\nüî• Deferred loading\n\nWhat if you can lazy load your page/component ui blocs based on top priority to be loaded to less priority to load?\n\nWhen it comes to apps, user experience is the ruler! This feature will boost your app's user experience as necessary blocs will be rendered first and quickly, and less important ones will come later.\n\nLet's see what the future feature will likely look like :\n\nIntuitive ‚úîÔ∏è elegant ‚úîÔ∏è short ‚úîÔ∏è quick ‚úîÔ∏è performant ‚úîÔ∏è\n\n... it got all what I love ‚ù§Ô∏è\n\nüî• New control-flow syntax\n\nAs shared before in my Angular 16 is making big noise üç¨! article. Signals are now available in developement preview in Angular 16. The existing control flow won't fully work with zoneless applications with Signals. Creating new reactive control flow directives for signal components is essential.\n\nBuilt-in control flow is on CFR, and the new way to use them will likely look like this :\n\nA before and after example ?\n\nThis is highly inspired by Svelt. It's remarkable how we can learn from others and try to get the best out of all with community touch, ideas, thoughts, and Angular team developers' hard work!\n\nIs it the end for *ngIf, *ngFor, ... üò¢ ?\n\n[UPDATE]‚Ää‚Äî‚Ääthanks to OZ who corrected me.\n\nBased on the built-in control flow RFC: \"Currently the plan is to deprecate the existing directives but not remove them until the ecosystem (including community-authored content) has switched over to the new control flow. Ultimately, we will base this timeline on the feedback we receive from the community.\"\n\nSo it's recommended to switch to the new control flow as at some moment the old ones may/will be removed.\n\nBig thanks Oz.\n\nLast words...\n\nAs you can see, both new features have the same logic in their syntax. With mustache syntax + # + keyword (if, else, loading, defer, error, ...etc.). Quite easy to learn.\n\nCheck out these RFCs, tell us what you think, and share your suggestions with the community.\n\n‚úîÔ∏è Built-in control-flow RFC\n\n‚úîÔ∏è Deffered loading RFC",
    "link": "https://medium.com/p/cede86e462eb"
  },
  {
    "id": "d4c6b82b1fb1",
    "content": "Angular template powers #3\n\nLearn all the @ViewChild and @ViewChildren whereabouts!\n\nHi there üëã\n\nBack to our Angular template powers series, it's time to learn about one of the most used decorators in Angular apps which is @ViewChild decorator. If you are a visual learner, I have published a video version of this article, please find the link at the end of the article.\n\n‚ùìFirst, what is it?\n\nThe @ViewChild decorator allows you to get an instance to a child component or directive or generally access a DOM element within the component.\n\nHere I have a title in the template, and I want to access its native HTML element in the component's class.\n\nTo do this:\n\n1- I used the @ViewChild decorator with the string token (the reference of the element I want to access)\n\n2- The element's reference ( #title, to declare a reference, we must start with a dash #)\n\nNow that you know the \"how it works\", let's see a real use case!\n\nüßêReal use case\n\nHere is my need. I have a list of items component and item details component. I want in the list of items component, to be able to select an item and display its data and also be able to clear the selection. So I need:\n\nTo use the item component as a child component inside my list of items component's template.\n\nI need to pass the selected item from the list of items to the child item details component by setting its input selectedItem.\n\nTo clear the selection, I need to reset the item details component's input selectedItem to null.\n\nBeing able to access the child component (item details component) will make life easier for me as I can (by using its instance) pass the selectedItem to its input, and I can also call its clearSelection() function to reset its selectedItem to null.\n\nOf course, there is another way to implement this by using input() and output() decorators, but I'll need more code to do it and more effort. The first implementation is easy and smart üòâ and @ViewChild is designed for these use cases.\n\nYou can find the whole app here üë©‚Äçüíª . BTW, the example is implemented with standalone components. They are like traditional components, except that they are stronger and don't need an NgModule üí™\n\n‚ö°@ViewChild powers\n\nThe selector\n\nThe selector, it's like a picker that will pick what you need in the template. Do you need to get a component instance, a specific directive, an HTML native element (like we did with the title example), a TemplateRef, a service instance, or a ViewContainerRef, ... interesting nah?\n\nFlexible, we can configure it to our needs!\n\n1- The selector: its selector is already flexible we can select, as said above, different things.\n\n2- The read metadata property brings more flexibility as it allows you to define what you want to read. This is especially interesting when you want to access a component inside the template, but want its DOM element, not the component instance.\n\n3- The static metadata property, to specify at which point in the component lifecycle you want to resolve the query (your @ViewChild query).\n\n‚Üí static set to false (default behavior): in this case, Angular will resolve the query after the Change Detection Cycle runs. Therefore, the resolved object will only be accessible after the component's view is initialized (Make sense, after all, we query the view, so it should be available before querying it, nah? xD)\n\n‚Üí static set to true: tells Angular: \"boss, resolve this query before this component Change Detection Cycle runs\" to provide the query value (resolved) from the start. Angular will magically do things behind the scenes. Hence, the resolved object will be accessible in the onInit() hook!\n\nWhy would we want to change the default behavior? Sometimes, in real-life examples, you need to do things in the onInit() phase based on the @ViewChild resolved value. In this case, we absolutely need to set the static property to true.\n\nüòè@ViewChild has usage rules!\n\nYeah, this guy is not easy. He works only when we respect his rules:\n\nBy default, the @ViewChild object is resolved and available in the AfterViewInit hook as seen above. Thus, we must remember to override this behavior with static set to true if we need to.\n\nOnly visible inside the template of the component itself.\n\n@ViewChild object is not accessible, if we query anything inside a child component's template and if we query anything outside the parent component of the component whose querying.\n\nBTW, if you are üòµafter reading these rules, take your time. You'll be able to digest it after some reflection.\n\nüí° Interesting to know...\n\nWe can also do it the other way. I mean using a reference to add elements to the DOM using Angular's Rederer2 or even creating a component dynamically using ViewContainerRef, for example. (there will be a video and article dedicated to this exciting feature in the future)\n\nAnd last thing, Congrats üéâü•≥üëèüéäüôå, you've learned about @ViewChild and @ViewChildren too, as ViewChildren queries a list instead of one element, component, or whatever! And returns an instance of QueryList, a collection of @ViewChild objects.\nIn summary, @ViewChild is used to get a single element, while @ViewChildren is used to get multiple elements that match the used selector.\n\nüëÄSee the VV",
    "link": "https://medium.com/p/d4c6b82b1fb1"
  },
  {
    "id": "8cbd575c21be",
    "content": "3 Must-Know Tips About the Angular Doc\n\nSecrets of Angular doc\n\nHi there üëã\n\nBefore going with this time's tips, I'd like to thank Souhaib Khadraoui for becoming my newly referred member. Thank you so much for your support. It means a lot to me ‚ù§Ô∏è\n\nWe all go to angular.io documentation to learn about things, how to do something, syntax, APIs, ...whatever!\n\nYou will be surprised to know that Angular doc holds some secrets, and knowing them is important!\n\n1 - The color counts\n\nAngular doc has colors, and it's not for style. It got a meaning.\n\nred: for the next Angular version doc\n\ngrey: for past Angular versions doc\n\norange: for rc Angular version doc\n\nblue: for the current Angular version doc\n\nInteresting, nah? Now, how to access the doc of Angular 13, for example? That's the next tip!\n\n2 - The right doc\n\nAccess the appropriate doc based on the Angular version you're using!\n\nThe rule is:\n\nAngular version number as prefix + angular.io.\n\nSo for Angular 13, it's https://v13.angular.io and so on.\n\nOkay, what about RC, next version doc to see what's coming in Angular in the future üòâ?\n\nhttps://next.angular.io\n\nhttps://rc.angular.io\n\nAlright, you found the right version and the right page about the API you're interested in. What if you need more profound knowledge? Like knowing how things work behind the scenes?\n\n3 - Deep learning\n\nAfter having a first understanding, you might want to learn more by checking the API source code, for example. You can go to Angular GitHub and look for it or quickly access it by clicking the code icon just before the API title in the angular.io doc.",
    "link": "https://medium.com/p/8cbd575c21be"
  },
  {
    "id": "6a06e9808788",
    "content": "Angular 16 is making big noise üç¨!\n\nSignificant changes in Angular's whole life!\n\nHi there üëã\n\nAngular v16 comes with huge and big changes that will definitely change Angular's future, popularity, and Angular developers' life!\n\nHere is the list of exciting new features in Angular 16!\n\nüö¶ Signals\n\nSignals (in developer preview) is the most significant change brought to Angular 16 as well as Angular direction and whole life, as it will change the way Angular detects changes and fix a lot of pain developers had so far with Zone.js. I've already talked about the story behind Angular signals. You can check it out here.\n\nüíé Create standalone app schematics\n\nStandalone components are now completed with app schematics. You can generate a whole standalone app with Angular CLI. V16 comes with powerful schematics that allow you to convert your components, pipes, and directives to standalone ones. Also, these schematics can remove your existing ngModuels that are unnecessary after migration.\n\nThe newly generated app code is lighter (no conf files from v15 improvements + light app bootstrapping with the standalone feature; hence, no ngModule).\n\n...\nbootstrapApplication(App, {\n  providers: [provideHttpClient(), importProvidersFrom(FormsModule)],\n}).catch((err) => console.error(err));\n\nüèé Esbuild dev-server\n\nExperimental support for ng build using esbuild is already available. With v16 the tooling team has made some improvements to the Development Server (in developer preview). Now, you can runng serve with esbuild.\n\nTo check it out, change \"@angular-devkit/build-angular:browser\" to \"@angular-devkit/build-angular:browser-esbuild\".\n\nüß™Jest support\n\nJest is one of the most loved and popular tools among developers for testing. Angular default tool is Karma, but now, Angular is also working on supporting Jest and this is in developer preview in Angular v16, and that's a piece of big news!\n\nüì¢ Required inputs\n\nWith zero runtime overhead, it is now possible to make sure that a component or directive is used with its required inputs if needed. Otherwise, you're going to get a compile-time error.\n\n@Input({required: true}) myInput: string; // Required\n@Input() myOtherInput: string; // Not required\n\nüöè Bind route data, path params, and query params to inputs\n\nThis is a really excellent and practical feature that will definitely make life easier for developers with way lighter code. We can take advantage of the great functional guard feature and set component inputs directly from there!\n\n// Add the withComponentInputBinding feature to the provideRouter method.\nproviders: [\n  provideRouter(appRoutes, withComponentInputBinding()),\n]\n\n// Update the component to have an Input matching the name of the parameter.\n@Input()\nset id(heroId: string) {\n  this.hero$ = this.service.getHero(heroId);\n}\n\n‚û°Ô∏è mapToCanActivate helper function\n\nIn Angular 16, class guards are deprecated and Angular provides a function helper to make it easy to switch to function without having to remove existing class guards.\n\nconst route: Route = {\n  path: 'admin',\n  canActivate: mapToCanActivate([AdminGuard])\n};\n\nüî® DestroyRef & takeUntilDestroyed\n\nAnother feature that was shipped with v16 is DestroyRef and takeUntilDestoryed, which enables more flexibility when you'd like to unsubscribe.\n\n...\nobs$: Observable<SomeType>;\nconst subscripion = obs$.subscribe(...);\n\ninject(DestoryRef).onDestroy(() => subscription.unsubscribe());\n\nüí¶ Non-destructive hydration support\n\nTime for user experience improvements with non-destructive hydration support. Once the browser receives the rendered markup from the server and parses it as a Document Object Model (DOM), Angular will traverse the structure, add event listeners, and create internal data structures. From that point, the application becomes interactive without requiring a rerendering process. This will fix the problem of encountering a \"flicker\" with Angular Universal.\n\nüí° API to provide CSP nonce for inline stylesheets\n\nMany enterprises are concerned with inlining scripts for security reasons. This is sometimes flagged as insecure and unsafe. This feature will help you to specify and announce your content security policy for inline styles.\n\n// Standalone version\n...\nbootstrapApplication(AppComponent, {\n  providers: [{\n    provide: CSP_NONCE,\n    useValue: globalThis.myRandomNonceValue\n  ]}\n});\n\nA lot of other great features I didn't mention above to make the article light, but they are available too in v16. Here is a quick list:\n\n‚òëÔ∏è NgTemplateOutlet strict type-checking\n\n‚ôªÔ∏è Reuse server-generated component styles\n\nüí° ProvideServerRendering for server-side standalone apps\n\nüíô TS 5.0 support (Non-experimental decorators support)\n\nüñºÔ∏è Improvements to NgOptimizedImage by enabling images to fit within their parent container rather than having explicit dimensions\n\nüí° Streamline standalone import through Language service\n\nüí° Improvement in the documentation and Material CDK components accessibility\n\nüí° Angular team is working closely with the Material Design team to make Angular Material the referenced material design implementation for the Web\n\nOne upcoming feature, unfortunately not yet provided in v16 is Setting inputs in NgComponentOutlet (PR here), and this will look like:\n\nIt's so practical when creating a dynamic component to be able to set its inputs directly.\n\n<ng-container *ngComponentOutlet=\"MyComponent; inputs: myInputs\"></ng-container>\n\n// In component class\nmyInputs: {\n  message: \"Hi there!\",\n  data: [...]\n},\n\nIsn't it awesome that all we got in Angular v16 box üòä ... I totally believe that Angular will become more popular in the next years!",
    "link": "https://medium.com/p/6a06e9808788"
  },
  {
    "id": "d0dd77e2152b",
    "content": "The story behind Angular Signals!\n\nThe Angular change detection future\n\nHi there üëã\n\nDays ago, Angular published Angular v16-next version with the big upcoming feature, which is signals as a developer preview!\n\nSignal brings a big change to the whole framework and will, in my opinion, make Angular more popular in the upcoming years as this feature will fix a historic limitation of Angular, which is Zone.js.\n\nHere is the story behind Signals...\n\nIn order to understand why the Angular team is considering changing the Angular reactivity system to update components, we need to understand the currently used system for detecting changes, which is Zone.js.\n\n- Zone.js, the change detection system\n\nSo far, Angular uses Zone.js to update components. This works by assuming that any event handler can theoretically change a or some components or bound data.\n\nThe challenge here is that all these events are triggered by the browser and not the framework. When we click, it's the browser that triggers the event. Here is where Zone.js comes into play, by monkey patching, it extends JS objects (window, document, ...etc) by modifying standard constructs, and Zone can find out when an event handler has run. Its job ends here and Angular takes over by taking care of the change detection.\n\n- The problem with Zone.js\n\nAlthough Zone.js is so powerful and worked well so far. It has its limitations.\n\nZone.js can only notify us when something might have happened in the app. The problem is in the 'might'. Zone.js is not capable of giving us more information about what happened, where, and what has changed.\n\n- Zone.js monkey patching is magic but...\n\nSince browser objects are modified, errors are difficult to diagnose.\n\nasync and await cannot be monkey patched as they are keywords. The workaround for this limitation is to use the Angular CLI to convert them into promises. This is a pity as all supported browsers already support async and await natively.\n\nWhen changes are made, the entire components tree is always checked. It is not possible to directly identify changed components.\n\nLarge enterprise applications are highly impacted by these limitations as the app components tree grows, the change detection cycle will cost more and more.\n\nIt would be great to only notify consumers of the change and not systematically check the whole components tree. Some techniques exist already to improve this issue with pure pipes and components with onPush strategy but this is not sufficient.\n\nSignals, the future Angular change detection\n\nSignals can do that for us! But before, what's a signal?\n\nA signal\n\nA signal is a wrapper around a value, which is capable of notifying interested consumers when that value changes. There are different kinds of signals.\n\nSignal types or nature\n\n‚Üí Writable signals: they have their value directly updated through a mutation API. Therefore, signals can know when they are mutated and inform previous readers about the change. Only the interested ones (consumers) of the change and not the whole components tree.\n\n‚Üí Computed signals: they have a value that cannot be changed directly, but which is derived from the values of other signals.\n\nA great intuitive example provided by the Angular team is the Celsius/Fahrenheit example:\n\n@Component({\n  signals: true,\n  selector: 'temperature-calc',\n  template: `\n    <p>C: {{ celsius() }}</p>\n    <p>F: {{ fahrenheit() }}</p>\n  `,\n})\nexport class SimpleCounter {\n  // A writable signal of type WritableSignal<number>, always set with a default value\n  celsius = signal(25);\n\n  // A computed signal, only re-evaluates if celsius() changes.\n  fahrenheit = computed(() => this.celsius() * 1.8 + 32);\n}\n\n- Signals solution is interesting, because:\n\n‚Üí Signals are useful because they can notify interested consumers when they change. An operation that's performed when the signals it depends on are changed is called an \"effect\". Therefore, Angular will use an effect function to update a component's UI whenever any signals read within that component's template are changed.\n\n‚Üí Automatic dependency tracking: when computed signals and effects run, they keep track of which signals were read as part of the computation or effect. And since the dependencies are already known, the signal system will rerun the computation/effect automatically whenever dependencies change. This solves perfectly the main problem with Zone.js.\n\n‚Üí Computed signals can be lazy and only recompute intermediate values on demand.\n\n‚Üí They are easily composed with other reactivity systems, such as RxJS and Angular's current zone-based reactivity. This is not negligible as we won't need to change legacy code, and a combination of traditional change detection and signal-based change detection will be possible.\n\nWhat might have crossed our minds\n\nSome developers may find this big innovation hard to digest as learning the framework is already hard, and changing the change detection system will be a new complex thing to learn:\n\nSignal based inputs\n\nSignal based outputs\n\nSignal based queries\n\nNo decorators and new ways of handling changes with effects instead of traditional components lifecycle hooks.\n\n...and more.\n\nWell, it's true, but sometimes, with great pain comes great outcomes, and no pain, no gain! This will update only the place that should be updated and not systematically ask everyone if there is a change to update. It will certainly make app performance better and facilitate app reactivity!\n\nWhat Angular app will look like with signals?\n\nThis article already has a lot of information to digest, as it presents the global idea and story of signals.\n\nWhen you are a little bit comfortable with these terms and concepts, check this really awesome and complete example implemented by Deborah Kurata, I couldn't find better!\n\nFind more about her great Angular Signals examples here.",
    "link": "https://medium.com/p/d0dd77e2152b"
  },
  {
    "id": "373e3f8e24c8",
    "content": "Angular Template Powers #2\n\nThe powers of ng-container, ng-template, and ng-content\n\nHi there üëã\n\nThis article sum up all feature we covered so far in the Angular web stories (episode 10) ng-container, ng-template, and ng-content.\n\nEach feature is covered in a dedicated article to avoid creating a long article :\n\n1 - <ng-container>\n\nMainly to wrap HTML elements and leverage multiple structural directives. This element remains invisible in the DOM and provides an elegant way to wrap HTML elements.\n\n2 - <ng-template>\n\nMainly to lazy load HTML in the template, handle conditional rendering, and prevent repeating ourselves, thanks to ngTemplateOutlet directive.\n\n3 - <ng-content>\n\nMainly to magically insert code from the parent component into some placeholders with the child component. These placeholders can be chosen and customized thanks to the ng-content select directive.\n\nA visual version exists, too, in case you like to see it rather than read it üòâ\n\nVideo version :\n\nThanks a lot to all my readers! Your support is priceless ‚ù§Ô∏è",
    "link": "https://medium.com/p/373e3f8e24c8"
  },
  {
    "id": "1a57bc7fe697",
    "content": "When and why to use ng-content in Angular?\n\nLearn about the powers of <ng-content> feature\n\nHi there üëã\n\nThis article is a quick and gentle article that gathers all that you need to know about ng-content, and it is also part of the series of Angular template powers!\n\nThe last two articles have already covered ng-template and ng-container.\n\nLet's get this!\n\n<ng-content>\n\nTime to discover the magic of ng-content. A super powerful feature or pattern used to project content is also called transclusion.\n\nIt acts as a placeholder for content like ng-template does, except that this content comes from the parent component. Therefore, it can be customized based on the parent component context.\n\nUse cases could be:\n\nCase 1: Based on the parent context, you pass content to the child component.\n\n<!-- CHILD CO MPONENT -->\n<div>\n  <h2>Welcome!</h2>\n  <ng-content></ng-content>\n</div>\n<!-- PARENT COMPONENT -->\n<app-child> \n   <h1>This content was projected from the parent component!</h1>\n</app-child>\n\nCase 2: Using it to define a layout for a component with different slots and inject content per slot. A card component is a good example to illustrate it:\n\n<!-- CHILD CO MPONENT -->\n<div class=\"card\">\n  <div class=\"card-header\">\n    <ng-content select=\"[header]\"></ng-content>\n  </div>\n  <div class=\"card-body\">\n    <ng-content select=\"[body]\"></ng-content>\n  </div>\n  <div class=\"card-footer\">\n     <ng-content select=\"[footer]\"></ng-content>\n  </div>\n</div>\n\n<!-- PARENT COMPONENT -->\n<app-card> \n   <div header>\n      <!-- card header html here -->\n      <h1>Card header</h1>\n   </div>\n   <div body>\n      <!-- card body html here -->\n      <p>This is the card body</p>\n   </div>\n   <div footer>\n      <!-- card footer html here -->\n      <button (click)=\"onClick()\">OK</button>\n   </div>\n</app-card>\n\nThe select of ng-content can also be a CSS class or an identifier. ng-content allows you more flexibility, reusability, and customization. This is usually used in advanced cases requiring high customization and reusability.\n\nüí°Bonus:\n\nWe can combine ng-content with ng-template for conditional content projection.\n\nWe can also combine it with the ng-container. It's surprising as ng-container isn't rendered on the DOM, but we can still combine these two guys thanks to the ngProjectAs directive.",
    "link": "https://medium.com/p/1a57bc7fe697"
  },
  {
    "id": "960463c382a6",
    "content": "Why and When to Use ng-template in Angular?\n\n3 Most powerful capabilities of <ng-template> feature\n\nHi there üëã\n\nThis article is a quick and gentle article that gathers all you need ng-templateand is also part of the series of Angular template powers! In the last article, we learn about ng-container. The upcoming article will cover ng-content.\n\nLet's get this!\n\n<ng-template>\n\nThis guy has a lot of powers. Here are the most powerful ones:\n\nPower 1: Reusability\n\nThis is the most incredible power. You can define and reuse a block of HTML code in multiple places. As we saw with the loader template, we don't repeat ourselves!\n\nAn example could be displaying a loader in multiple places and declaring its template one time:\n\n<!-- Loader used for a case 1: fet ching users -->\n<ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n...\n<!-- Loader used for a case 2: fetching user data -->\n<ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n\n<ng-template #loading>\n <div class=\"spinner\"></div>\n</ng-template>\n\nThat's not all. You can also pass data through context to the template:\n\n/* In component's class */\nname= 'FAM';\n\n/* In component's template */\n<ng-container\n  *ngTemplateOutlet=\"helloTemplate; context:{ userName: name}\"\n></ng-container>\n\n<ng-template #helloTemplate let-name=\"userName\">\n <h1>Hello, {{ name }}. Welcome !</h1>\n</ng-template>\n\nPower 2: Conditional rendering\n\nWe can render templates based on some condition(s). It allows doing something like if 'condition', then 'do this', else 'do that'.\n\n<ng-container *ngIf=\"loading; then templateCase1 else templateCase2\">\n</ng-container>\n\n<ng-template #templateCase1>\n   <!-- template contents -->\n</ng-template>\n\n<ng-template #te mplateCase2>\n  <!-- default template contents -->\n</ng-template>\n\nPower 3: Lazy loading\n\nIt's surprising. You can define your template and only use it when you need it. This helps improve performance by reducing the initial HTML content you need to load. In this example, \"myTemplate\" is never rendered in the DOM unless the \"loaded\" boolean value is true.\n\n<ng-container *ngIf=\"loaded\">\n  <ng-container *ngTemplateOutlet=\"myTemplate\"></ng-container>\n</ng-container>\n\n<ng-template #myTemplate>\n   <!-- template html here -->\n</ng-template>",
    "link": "https://medium.com/p/960463c382a6"
  },
  {
    "id": "8d11213b18c",
    "content": "When and why to use ng-container in Angular?\n\nLearn about the powers of <ng-container> feature\n\nHi there üëã\n\nBefore starting our today's story, I'd like to thank @skyzee for becoming my newly referred member. Thanks for your trust and support. This means a lot to me!\n\nThis article is a quick and gentle article that gathers all that you need about ng-container, and it is also part of the series of Angular template powers! The upcoming articles will cover ng-template and ng-content.\n\nLet's get this!\n\n<ng-container>\n\nWe use ng-container to wrap HTML elements. Like this:\n\n<ng-container> \n  ... \n</ng-container>\n\nThere are 3 main cases where ng-container is what you should use:\n\nCase 1: When you want to wrap some HTML elements but don't want to see the wrapper in the DOM. This is more about making your HTML semantic and making your code elegant when inspecting it!\n\n<ng-container *ngIf=\"movies\">\n  <div *ngFor=\"let movie of movies\">\n   <pre>\n    <code>{{ movie | json }}</code>\n   </pre>\n  </div>\n</ng-container>\n\nCase 2: When you have multiple structural directives. Since we can't use multiple structural directives in one HTML element, the ng-container is what you should use in this case.\n\n<ul *ngIf=\"movies\">\n   <ng-container *ngFor=\"let movie of movies\">\n     <li *ngIf=\"movie.rated >= 4\">\n      Movie name: {{ movie.title }}, \n      rated {{ movie.rated }} stars\n     </li>\n   </ng-container>\n</ul>\n\nCase 3: When you want to instantiate a template anywhere on the page, thanks to the ngTemplateOutlet directive or create a dynamic component through a reference.\n\n<!-- Using the ngTemplateOutlet directive -->\n<ng-container *ngTemplateOutlet=\"templateReference\"></ng-container>\n\n<!-- Using dynamic component generation with reference -->\n<ng-container #injectDynamicComponentHere></ng-container>\n\nThe dynamic component case will not be covered for this time. The ngTemplateOutlet directive can be used to display a loader, for example. And what's awesome is that the \"loading\" template is declared once but used twice without duplicating the code.\n\n<!-- Loader used for a case 1: fet ching users -->\n<ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n...\n<!-- Loader used for a case 2: fetching user data -->\n<ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n\n<ng-template #loading>\n <div class=\"spinner\"></div>\n</ng-template>\n\nAs you can see in the example, we used ng-template. That's what we will see in the next article!",
    "link": "https://medium.com/p/8d11213b18c"
  },
  {
    "id": "1af3b1f69981",
    "content": "Angular Template Powers #1\n\nThe awesome features you can use in an Angular template\n\nHi there üëã\n\nBefore starting our today's story, I'd like to thank Stephen Traiforos and Krzy Kal for becoming my newly referred members. Thanks for your trust and support. This means a lot to me!\n\nOne of Angular's biggest advantages is its flexibility in template HTML code. Thanks to what Angular provides, HTML can become intelligent and dynamic, which is really powerful. There are a lot of features:\n\nInterpolation\n\nProperty binding\n\nEvent binding\n\nReferences\n\nDynamic content\n\nLooping, hiding, showing, ...\n\n....\n\nWith all these great tools we got in the Angular bag, we can do great things inside templates.\n\nAs you can see, this is too much to cover in one article/ video. That's why we will focus on learning for this time:\n\n‚Üí Interpolation\n‚Üí Property binding\n‚Üí Event binding\n\nAnd I'll cover other features in the upcoming articles and videos!\n\nAs usual, please find the video version at the end!\n\nLet's start!\n\n‚Üí Interpolation\n\nInterpolation in Angular means embedding expressions into marked-up text. Interpolation is used in Angular to display our class properties in the HTML template. To do so, we need to use the double curly braces {{}} as delimiters.\n\nExample:\n\n‚Üí Property binding\n\nProperty binding moves a value in one direction, from a component's property into a target element property. We can do that thanks to the @Input() decrator and this is how the parent communicates and sends data to its children components. On the template side:\n\n<app-comp [inputName]=\"aProperty\"></app-comp>\n\nExample:\n\n‚Üí Event binding\n\nWith Angular event binding feature, you can create your own events and associate them with functions when they are triggered. This is done using the @Output() decorator, and this is how the child component communicates with its parent component. On the template side:\n\n<app-a (hello)=\"onHello($event)\"><app-a>\n\nExample:\n\nTo learn more about these examples, please refer to the following video:",
    "link": "https://medium.com/p/1af3b1f69981"
  },
  {
    "id": "21155561701c",
    "content": "Angular forms, the best of the best!\n\nLearn all the whereabouts of Angular Forms from A to Z!\n\nHi there üëã\n\nBefore starting our today's story, I'd like to thank Stephen Traiforos for becoming my newly referred member. Thanks for your trust and support. This means a lot to me!\n\nI came across a post on LinkedIn about this course:\n\nI started the preview videos immediately as Forms are a tricky thing in Angular that you need to learn and use for sure. I already have a good understanding of Forms in Angular, but when I checked the preview and the short free course version I said: \"I wish I had this course when I started learning Angular years ago\".\n\nYou know that kind of reaction when learning about a book, for example: \"I wish I discovered this book earlier\". That was exactly how I felt. This course didn't exist before. It's a brand new course that supports Angular forms' strong typing feature introduced in the recent versions of Angular.\n\nI wanted to share this. If you are already a reader of my articles, you will notice that I don't promote anything. This is the first time I had promoted a course because you will either say: \"I wish I discovered this years ago!\" or say in the future: \"Thankfully, I learned all I needed about Forms when I started learning Angular\".\n\nWhat makes this course special:\n\n1 - Explains clearly the building blocks of Angular Forms\n\nThis is another level of knowledge. You first start by learning how to use things in Angular, and next, how they work under the hood, and you become a pro, thanks to that!\n\n2 - Great explanation for both approach reactive forms and template-driven forms\n\nThis is a crucial point that is confusing when learning Angular forms. The course gives a clear presentation and explanation of the two approaches and how they work under the hood. By the end, you will perfectly distinguish between both approaches and know why and when to use each approach.\n\n3 - In real-life use cases, you may have to create a custom field\n\nI experienced this when my client wanted me to use a custom-style library that respects the french design system. It wasn't great news, as many remarkable UI frameworks do the job for me. All I need to do is customize components when needed and quickly build the app.\n\nIn my case, I needed to bring my real frontend skills to the table as I won't have the UI framework support. I only have some CSS and JS files from the french library and need to create angular components from that.\nWhen it comes to custom form fields! You need advanced knowledge like the ValueAccessor in Angular and trust me, learning it will make your Angular skills grow!\n\n4‚Äî Nothing is better than practice and real code, nah?\n\nWhat's hard about custom fields is that there are not many examples of complex custom fields with ValueAccessor on the net. This course has a dedicated chapter only for that. It shows you how to fish rather than giving you the fish. The knowledge you'll get from this chapter is for life!\n\n5‚Äî The most advanced level of forms!\n\nThe last chapter is about generating dynamic forms. Enterprise large apps need this kind of feature as they have large forms and want, for example, to drag and drop fields to build a form rather than repeating forms per page. This is a user story I had to implement for my client. So this chapter is perfect for my use case.\n\nSum up\n\nAs you see, the course goes from level 1 to the most advanced. This is the most complete course about Angular forms I've seen throughout my Angular journey. I share it with you today because I'm sure 100% you'll say: \"Thankfully, I learned once and for life Forms with that course shared by web stories\" for lucky ones that haven't yet learned about forms, or \"I wish I could have this course years ago!\" fr those who already know about forms (like me). I won't get anything from your enrollment, I am sharing the course because If I were you, I would like to know about it too.\n\nOne thing I can say for sure. All you need about Angular forms (from zero to advanced level) is in there!\n\nDecodedfrontend kindly proposed a 10% discount for my readers, so thank you so much @DecodedFrontend:\n\nBy the way, the discount works for all the platform's courses, and if you want to make sure you are making the right decision by enrolling in this course, check the mini-course free version, and you'll know what I mean by the best of the best üòâ!",
    "link": "https://medium.com/p/21155561701c"
  },
  {
    "id": "69228c5cc0fd",
    "content": "The right way to create Angular components!\n\n[ üëÄ VV] - Take advantage of the power of Angular schematics!\n\nHi there üëã\n\nBefore starting our today's story, I'd like to thank Adejokun Ibukun and Ihor Harnyk for becoming my newly referred members. Thanks for your trust and support. This means a lot to me!\n\nIn the previous articles about components you learned so far\n\nWhat's a component\n\nWhat's its composition\n\nWhat are the types of components, and how to design them\n\nThis time is about learning how to create components.\n\nFor visual readers, please find the VV version at the end of the article.\n\nWays of creating Angular components\n\nIt's not fun to create HTML, CSS, spec, and class files manually each time. You have more important things to focus on, right?\n\nThere is a wise way of creating components, and that's by arming yourself with CLI schematics. You'll have to learn the rule of how to use it once, and from there, you're free from losing your time by creating files one by one. Let's go!\n\n- Simple component generation\n\ng stands for generate that is also valid to use if you want to\n\nc stands for component that is also valid as a keyword if you want to use it\n\nng g c component-name\n\n‚ùåDon't add the component prefix, as the CLI adds it by default\n\n- Simple component generation: style, template, and class options\n\nYou can also generate a component and include styles inline in the root component.ts file. No extra scss file.\n\nng g c component-name --inline-style\n\nThe style can be another thing than CSS by using the style option to set it\n\nng g c component-name --style sass\n\nThe same can be done for the template.\n\nng g c component-name --inline-template\n\n- Custom component prefix\n\nWhen coding a library, you'd like to use a more descriptive prefix rather than the classical app- suffix. Mainly to make it clear to the developer that a component comes from a library X.\n\nng g c component-name --prefix lib-x\n\n- Component generation within a module\n\ng stands for generate that is also valid to use if you want to\n\nc stands for component that is also valid as a keyword if you want to use it\n\nng g c component-name --module shared/shared.module\n\n‚ùåDon't add the component prefix, as the CLI generates it by default\n\n- Customize the generated code\n\nSometimes you don't want a stylesheet or a test file, maybe because the component is too small. You can still take advantage of the Angular CLI with:\n\nNot generating scss file:\n\nng g c component-name --style none\n\nNot generating spec file as well:\n\nng g c component-name --style none --skip-tests\n\nMore advanced features\n\nOn the class side, we can configure things as well, such as the change detection mode:\n\nng g c component-name --change-detection OnPush\n\nTake advantage of the brand-new standalone feature\n\nThe standalone feature is now stable, and you can use it. You can generate a standalone component with the CLI, thanks to the --standalone option:\n\nng g c component-name --standalone\n\nTo sump up\n\nUsing Angular CLI schematics is essential for every developer. Getting to create each file with its content from zero is a waste of time, effort, and productivity.\n\nMemorizing these commands is just a matter of time. Repetitive components creation will make you an expert at creating components with CLI in no time.\n\nVisual Version",
    "link": "https://medium.com/p/69228c5cc0fd"
  },
  {
    "id": "44e4134d053c",
    "content": "Your first time with Angular?\n\nWhat to learn when it's your first step toward becoming an Angular developer\n\nHi there üëã\n\nBefore starting our today's story, I'd like to thank Rey Vieira and Rakeshbaddam for becoming my newly referred members. Thanks for your trust and support. This means a lot to me!\n\nAngular is a framework. It has its own ecosystem and a lot of exciting features. When you start learning it, you can get frustrated and confused and even feel like giving up learning it. So the big question is where to start and what are the proper steps to take. Our story today is about giving you a gentle onboarding guide to learning and making your journey easy and less frustrating. Ready, let's get this!\n\nWhat you need to start with...\n\nWhat happens behind the scene before the app gets displayed on the browser?\n\nAngular is a SPA? What it is? How it works concretely? What's bootstrapping in Angular? What's AppModule? What's the role of main.ts file? ...etc\n\nI've already talked about all this in a previous article and video:\n\nRoles inside an Angular app\n\nThe wonderful thing I love about Angular is that everyone has a role in the scene. What's the role of a component? A module? A service? A directive? A pipe? A route? A guard? ...\n\nBuilding a web page with the component-based philosophy\n\nAngular is a component-based framework, so learning the whereabouts of an Angular component is a must! What is a component? How to create them? How to design them? What's a dumb component? What's a smart component? When to use each? What's a component lifecycle? How to communicate between components? How to communicate with @Input() and @Output() property decorators? How to communicate with services? When and how to choose between these two ways of communication? ...etc.\n\nI've already talked about some of these questions. Here it is:\n\nAngular components gentle introduction\n\nAngular components lifecycle\n\nDesigning Angular components\n\nComponents good practices\n\nServices in Angular\n\nServices are the guys that communicate with the backend and contain/manage complex logic. How do we create them? How to use them? How they communicate with the backend?...etc\n\nSome articles about this:\n\nServices best practices in Angular\n\nAngular is modular\n\nLearning how to organize your app into modules is essential. What are the types of modules? How to structure our app based on those modules? How to choose where to put code and why put it in a given module? How are modules essential for app optimization by using the lazy loading strategy? ...etc.\n\nA good article about this:\n\nOrganizing modules and Angular source code\n\nRoutes and Guard\n\nWhat are Angular routes? How to use them? How to lazy load a route? How to protect a route with a guard? What are the types of guards in Angular and their job? ...etc.\n\nüëâ Last thing, I highly recommend using Angular CLI schematics to generate whatever you need to make your journey effortless and save time by focusing on more important things.\n\nWhat are your following key features to learn about Angular\n\nComponent's template features\n\nTemplate-driven vs. reactive forms\n\nUsing RxJS to manage changes and data in your app if not yet done\n\nLearning about dependency injection\n\nLearning about Zone and change detection mechanism\n\nLearning Lazy loading strategy\n\nLearning about route preloading strategies\n\nLearning NgRx to manage app state with a store\n\nLearn about features built-in with Angular CDK for Accessibility",
    "link": "https://medium.com/p/44e4134d053c"
  },
  {
    "id": "ae392a2baf2d",
    "content": "Angular 15 New Must-Know Features!\n\nAngular 15 is out, what's new?\n\nHi there üëã\n\nAngular v15 is out, and great features come with this new version! Here are my favorite ones.\n\n1- Functional router guards\n\nThis is really a revolution! Trust me, you will love it and I think this may make component-based Guards disappear in the future. It's quick, and simple with less boilerplate:\n\n2- Improved Stack Traces\n\nI've also previously talked about this awesome feature that was developed in collaboration with the Chrome team. Reading error is much much easier now:\n\nMore info:\n\n3- Standalone Components are stable\n\nFinally, the standalone component feature is out of \"Developer Preview\" mode! I've already talked about this exciting feature that will change the way we create components and simplify it for new Angular junior developers. In case you want to read my article about it:\n\nWe can't create a standalone app with Angular CLI yet, but the Angular team is working on it so that in the future with one command ng new app --standalone the magic is done.\n\n4- Hiding CLI config files by default\n\nThe last one is CLI config files:\n\n.browserslistrc\n\npolyfills.ts\n\ntest.ts\n\nkarma.config.js\n\nenvironment.ts\n\nenvironment.prod.ts\n\nThese files are no longer generated, Angular let you the responsibility to configure them as you like. For example, if you need any polyfill, you'll need to add it yourself.\n\nIf you are wondering why this decision, it's because Angular find out that most of Angular developers don't open nor change these files. If you want more details about this point here is the answer of Angular team about this question: here.\n\nI'm not really fond of this, since new Angular developers wouldn't know how to configure things and may create a big confusion as well as inhomogeneous code, everyone would create the conf file and name it as he pleases, ...but I added this in this article as it's really important information to know about Angular v15.\n\nJoin the launch event live with the Angular team on Friday 18th!",
    "link": "https://medium.com/p/ae392a2baf2d"
  },
  {
    "id": "4b9c57877639",
    "content": "Angular Component Types\n\n[ üëÄ VV] - How to design your Angular components?\n\nHi there üëã\n\nWelcome or welcome back to Angular stories series. Before going further with today's story, I'd like to thank Ahmed Hafez for becoming my newly referred member. Thanks a lot for your trust and support. It means a lot!\n\nSo far, we learned several things about components:\n\nTheir composition\n\nTheir lifecycle\n\nIt's time to learn how to design them smartly! It's about learning smart vs. presentation component design pattern!\n\nNowadays, frontend frameworks are component-based or focused technologies. The idea is to build the whole page with pieces, and those pieces are components.\n\nBefore creating any Angular component, you should learn how to design components! And there are mainly two types of components:\n\nSmart or container components\n\nDumb or presentation components\n\nSmart vs. Presentation\n\n‚ÜíPresentational components characteristics\n\nDumb/Presentation components do not know the current use case.\n\nThey receive data via inputs, display it in a specific way, and issue events via outputs.\n\nHelp to implement use cases, and hence they are reusable.\n\nDoes not know where the data comes from.\n\nIts responsibility is purely to present and render data.\n\nWe don't inject service into it. It doesn't fetch data.\n\n‚ÜíSmart components characteristics\n\nA smart component is a use case-specific component.\n\nIts responsibility is to interact with the service layer to retrieve data.\n\nAfter getting data, the smart component passes it to the presentational component. This is done through the @Input() decorator.\n\nIt receives events from the child's presentational component via the @Output()decorator and reacts to the event, but it does not know what has triggered the event.\n\nSmart vs. Presentation use case study\n\nThe following video gives an implementation example of smart and presentation components as well as some advantages and limits of this design pattern:",
    "link": "https://medium.com/p/4b9c57877639"
  },
  {
    "id": "6fa0d9279d60",
    "content": "Angular Component Hooks\n\n[ üëÄ VV] - Controle Angular app by using component lifecycle\n\nHi there üëã\n\nHope you are alright! In the last episode, you learned about component composition in Angular:\n\nAs mentioned in the episode's video, we are not yet done with Angular components and this time you will be learning about a component lifecycle.\n\nEach phase can be seen as a pause in time that allows you to do things before it's too late. The most commonly used hooks are:\n\nThe first one is the ngOnInit as it is the phase where you'd want to get some data and subscribe to observables.\n\nThe second one is ngOnChanges as at this phase, it's the perfect place where you'd react to changes and property updates.\n\nThe last one is ngOnDestroy, the place for cleaning up and unsubscribing before the component's destruction.\n\nLearn more about components' lifecycle in the video below as well as some good tips about component hooks:",
    "link": "https://medium.com/p/6fa0d9279d60"
  },
  {
    "id": "4985b49127ef",
    "content": "3 Steps to bootstrap an Angular app without AppModule\n\nBootstrapping a standalone component\n\nHi there üëã\n\nToday's tip is about converting an Angular AppComponent to a standalone component and bootstrapping the component instead of the module.\n\nTo learn more about standalone components:\n\nRequirement:\n\nGenerate an Angular app with the Angular CLI\n\nThere are mainly 3 things you will need to change to bootstrap a standalone component:\n\nEnable standalone mode in the AppComponent:\n\nimport { Component } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n   standalone: true,\n   imports: [MatButtonModule],\n   selector: 'my-app',\n   templateUrl: './app.component.html',\n   styleUrls: ['./app.component.css'],\n})\n\nexport class AppComponent {}\n\nBootstrap the standalone component instead of the AppModule in the main.ts file:\n\nimport './polyfills';\n\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport { AppComponent } from './app/app.component';\n\nbootstrapApplication(AppComponent);\n\nDelete AppModule (the app.module.ts file) as the AppComponent works by itself, import the dependencies it needs, and works by itself\n\nComplete app code here.\n\nBonus:\n\nFor generating a new standalone component in a blink of an eye, use the Angular CLI command:\n\nng generate component my-component --standalone",
    "link": "https://medium.com/p/4985b49127ef"
  },
  {
    "id": "eb292aad1f3d",
    "content": "Angular component composition\n\n[üëÄ VV] -The first must-know about any Angular component\n\nHi there üëã\n\nBefore starting our story today, I'd like to thank you ankit for becoming my newly referred member. Thank you so much for your trust and support üôè !\n\nAll right, in the last episodes, we learned a lot of things about an Angular app. For the upcoming episodes, we will focus on the most building blocks of an Angular app, which are components.\n\nFor this time, we will learn the first must-know about any Angular component, its composition.\n\nIf you are a visual person, you'll find the video version at the end üëá üòâ\n\nComposition of a component\n\nEach Angular component consists of:\n\nThe component brain\n\nThe component body\n\nthe component look (optionally)\n\nAnd finally, the component tests (optionally)\n\n1- The component brain\n\nThe first thing to know about components in Angular is that they are simply classes, like any other class you may have created in other languages or frameworks, except that this class becomes an Angular component by adding the decorator @Component and the component configuration.\n\nThere are two syntaxes for component class: the standard one with HTML and CSS file in the configuration and the inline style syntax.\n\nA good thing to know. There is a newly added syntax in the preview mode of the recent Angular versions, which is the standalone component.\n\n2- The component body\n\nA component's template is simply the component HTML with some extra power that comes with Angular. With what Angular brings, you can, for example, hide or show blocs. Display blocs conditionally, loop over a list inside the HTML code, transform text, and much more ...\n\n3- The component look\n\nAngular, by default, applies the component style inside the component only and not outside the component. You can change this configuration with the Angular ViewEncapsulation API.\n\nYou can write style files in CSS, sass, or less and specify those files in the @Component.styleUrls metadata with the appropriate extensions.\n\n4- The component tests\n\nUnit tests are mandatory in every web application as they check if your app is working as expected. Nothing to do here as the Angular CLI had already downloaded and installed everything we need to write tests with the Jasmine framework and run them with Karma.\n\nNaming best practice\n\nVV version üòâ",
    "link": "https://medium.com/p/eb292aad1f3d"
  },
  {
    "id": "f7032e5655bb",
    "content": "How Does an Angular App Start\n\n[üëÄ VV] - Learn how an Angular app launches\n\nHi there üëã\n\nI hope you are doing great! This time you are going to learn about the secret behind the moment we launch the serve command and the moment the app is launched on the browser.\n\nIf you are more comfortable reading it than seeing it, here you go:\n\nOtherwise, here is the visual version:",
    "link": "https://medium.com/p/f7032e5655bb"
  },
  {
    "id": "f310b7aff36a",
    "content": "Top New Features in Angular\n\n[üëÄ VV] - Angular developers shouldn't miss!\n\nHi there üëã\n\nI hope you are great and willing to learn new things! Today's tips are about the new Angular features you shouldn't miss.\n\nReady, let's go!\n\nAccessibility boost\n\nOne of the concerns of today's web apps is accessibility. The newest versions of Angular come with many new things for this purpose.\n\n1- Custom page title\n\nA document title is essential for your page accessibility. Before, we created routes in Angular with two main properties: the path and the component:\n\nconst routes: Routes = [   \n  { \n      path: 'my-component', \n      component: MyComponent \n  }\n];\n\nWith Angular 14, things got more intuitive and easy. For the opened path or route, you specify a title, and that's it. Your document got a title now!\n\nconst routes: Routes = [   \n  { \n      path: 'my-component',\n      title: 'my component', \n      component: MyComponent \n  }\n];\n\n2- Optimizing images\n\nThe new Angular directive NgOptimizedImage improves image loading performance by enforcing best practices like lazy loading images that are not a priority. Give you a warning with the attributes width and height if they are not set correctly. Warn you if the image will be visually distorted when rendered.\n\nTo use it, you need to import it into your component's module:\n\nimport { NgOptimizedImage } from '@angular/common';\n\n@NgModule({  \n    ...       \n    imports: [NgOptimizedImage]\n})\n\nclass AppModule {}\n\nAnd\n\n<img rawSrc=\"logo.png\" width=\"200\" height=\"100\">\n\nYou can also use the IMAGE_LOADER token for loading your image. For more examples for loading images and usage of the directive, check Angular doc.\n\n3- The @angular/cdk/a11y package\n\nRich package with a lot of features for improving your app accessibility. It's a more advanced approach for enhancing accessibility. It got features like styling utilities for contrast issues, for example. LiveAnouncer announces messages for the screen reader and much more.\n\nOther new features to boost accessibility also come with Angular Material.\n\nA friendly Chrome devTools message for Angular debugging\n\nV15 comes with an exciting feature with Chrome devTools to make your developer's life easier when it comes to debugging Angular apps. Debugging is a headache and time-consuming task. With this new feature, the source problem is displayed for you right away! So happy with this new feature shared recently on Linkedin by Minko Gechev.\n\nThe standalone component\n\nThis preview feature will come in the future, but you can already test it with Angular 14. I was so excited when I learned about it because it is so practical in creating small components. Creating a component sometimes needs imports, providers, and declarations, but what if your component is light and doesn't need a lot of dependencies and services to work correctly? This feature is a time saver and code minimizer solution, perfect for this use case.\n\nIt doesn't stop there. It is also possible to create standalone directives and pipes.\n\nHere is what a standalone component looks like :\n\n@Component({   \n   standalone: true,   \n   selector: 'photo-gallery',   \n   imports: [AnotherComponent],\n   template: `\n      <h1>My first standalone component, yeaaah!</h1>\n      <another-component></another-component>\n   `,\n }) \n\nexport class MyComponent {   \n  ...\n}\n\nYou can import modules, provide services, and export things just like we do in a classical module. The difference is all this configuration for the component to work can be done in one file, your component class.\n\nFor significant components with many imports, exports, and provided services. I'd instead go for the classical way by using NgModule. Otherwise, the standalone feature is an exciting way to simplify and minimize code and have fewer files.",
    "link": "https://medium.com/p/f310b7aff36a"
  },
  {
    "id": "94d41edd32d1",
    "content": "Angular Architectural Overview\n\n[üëÄ VV] - Learn about Angular app structure secrets\n\nHi there üëã\n\nBefore getting started, I would like to thank you so much, Oakdryad and Vasyl Polianchich, for your trust and for becoming my newly referred members. Thanks a lot to all the followers and the readers. Sometimes we are already overwhelmed in our everyday job, especially when we have responsibilities. Keeping my writing, learning, sharing hobbies, and being rewarded by your claps in hard times is the best booster ever.\n\nIn the last episode, we set up the local work environment. Now, we are ready to explore our Angular app, yeaaah!\n\nStep #1 - creating your Angular app\n\nTo create an Angular app, we will use the powerful tool Angular CLI. So make sure you have it installed first.\n\nRun the command ng new to create an Angular app\n\nng new my-app-name\n\n// Or this option if you want to generate app with latest CLI version\n\nnpx @angular/cli new <my-project>\n\nThe command will take some time to install the necessary Angular packages and dependencies, so be patient!\n\nStep #2 - running the app\n\nAngular CLI got a server where you can build and run your app locally. All you need to do is to navigate to your app's folder.\n\ncd my-app-name\n\nAnd run the CLI command ng serve\n\nng serve --open\n\nThe server is launched now. You can see your app opened automatically on the browser.\n\nStep #3 - discovering the app\n\nThis is the most exciting part. This part is more interesting to see visually than to read, so here is the video:",
    "link": "https://medium.com/p/94d41edd32d1"
  },
  {
    "id": "4d6e0cec48ed",
    "content": "[üëÄ VV] - How to Set Up Local Angular Environment\n\nVisual Version of the Angular setup environment\n\nHi there üëã\n\nThere are times when you want to learn things quickly without reading. For those times, I'll be providing a video version for all my Angular stories articles! Learning should be fun! So, enjoy it ^^\n\nüíé Your feedback is precious!\n\nYour subscription, like and comments are really precious to me. Please tell me if you like it or not and why. Your feedback will certainly move things üòâ\n\nüì∞ Article version (in case you want to read it)",
    "link": "https://medium.com/p/4d6e0cec48ed"
  },
  {
    "id": "795b2986a666",
    "content": "üëÄ Visual Version - Angular Helicopter View\n\nVideo version of Angular Helicopter View.\n\nHi there! üëã\n\nThere are times when you want to learn things quickly without reading. For those times, I'll be providing a video version for all my Angular stories articles! Learning should be fun! So, enjoy it. ^^\n\nüíé Your feedback is precious!\n\nYour subscription, like and comments are really precious to me. Please tell me if you like it or not and why. Your feedback will certainly move things üòâ\n\nüì∞ Article version (in case you want to read it)",
    "link": "https://medium.com/p/795b2986a666"
  },
  {
    "id": "d0bc8cec3e4f",
    "content": "How to Set Up Local Angular Environment\n\nA short guide on setting up your local Angular development environment\n\nHi there üëã\n\nIn the last episode, we built a global idea about Angular, what it is, why is it worth learning, and what's interesting about it.\n\nThis article is our first step toward building an Angular app. We are going to set up a professional local work environment so that we can start our journey with Angular.\n\nTools we are going to use\n\nNode.js: It's a JavaScript runtime environment that will allow us to run JS on the server.\n\nnpm or yarn package manager: to install and manage JS packages.\n\nAngular CLI: Angular command line interface, to efficiently generate Angular features in a blink of an eye with only commands.\n\nVSCode: The best code editor I used so far and still use for my frontend projects.\n\nGit: This is our version control system for tracking your coding and changes on files with time.\n\nVSCode Extensions\n\nVSCode extensions are really great tools that can make your coding life easier, and boost your productivity.\n\nAngular Language Service\n\nThis extension provides a rich editing experience for Angular templates, completions, information, go-to definition, etc.\n\nAngular Snippets\n\nThis extension will boost your productivity, you won't have to write from A to Z your code, especially the recurrent blocs of code such as loops, HTTP calls, RxJS operators, and things like that.\n\nAuto Rename Tag\n\nAutomatically rename paired HTML tag. With this extension, you don't need to change both the opening and closing tag. Changing the opening tag will automatically update the closing tag.\n\nGitLens\n\nThis is a great extension for getting insights and information about the git repo. While coding, you can click on a code line and see the one who committed the current line and the name of the commit. Super practical when you work with a team and need clarification about a piece of code, you find right away the author to ask (if he/she is still in the team, thoughüòú). It got a lot of great functionalities.\n\ngit-autoconfig\n\nYou don't want to push your code to your company's Git account. This extension allows you to configure multiple Git accounts in your VSCode, you choose the account to use for the project you're working on.\n\nESLint\n\nOne of the essentials for any developer. The extension analyses the code and finds problems in advance for you. No effort!\n\nInstalling Angular\n\nWe will be using Angular CLI with its great provided features to generate quickly what we need. Thus, we will have to install it with npm or yarn as you like:\n\nnpm install -g @angular/cli\n\nAnd that's it! You are ready to create your Angular app! That's will be the next episode. We will learn about the Angular app architecture and structure and how it runs! Stay tuned üòâ",
    "link": "https://medium.com/p/d0bc8cec3e4f"
  },
  {
    "id": "f3d26ddaeedb",
    "content": "Angular Service's Best Practices\n\nHi there üëã\n\nThis weekend's tip is about Angular services. I hope you'll enjoy it, let's start!\n\nNaming\n\nSet a naming strategy among your team and respect it. Although the Angular style guide does propose not suffixing systematically all Angular services as some names talk already for themselves like \"Logger\". I prefer suffixing all services so that when you read LoggerService, you know it's a service, no doubts!\n\nThe file name should also express itself by adding a dot service .service.ts to it.\n\nService role\n\nSingle responsibility principle\n\nA service must serve one single purpose once you keep in mind that a service should respect the single responsibility principle. You'll have a cleaner app, easy to read by other developers, and easy to maintain (have a problem with authentication = check the authentication service ). You spot quickly where the issue is, the Identify code at a glance principle. The same goes for tests as well.\n\nComplex logic\n\nContainer components or parent components hold a minimum of logic that it manages and eventually dispatch data/info to its children that are just presentational components, also called dummy components (even though I don't like the term!). Still, a component shouldn't have complex logic because it got already a responsibility: the content it renders to the user, the data it dispatches to the children component, its simple logic, ...etc. That's already enough. An example of things to avoid in components is HTTP calls, that's more a service job. A component shouldn't get the data or know where it is coming from.\n\nService functionalities\n\nNow, there are different ways of seeing the single responsibility principle. For some developers, the Service should contain only functions of the responsibility/ functionality it holds, so they don't inject other services into the Service itself. I don't see it like that. If I need to get some data from the ProductService to use in the OrderService, for example. I'd inject ProductService into my OrderService. Whatever logic related to order is still in the OrderService. Product data came from ProductService that is already isolated and used here only to get input data to use in the OrderService functionalities. So we are not mixing things here, the ProductService job is around products whereas the OrderService manages things related to orders.\n\nInjection\n\nAn Angular service must be injected into where you want to use it. So you need:\n\nTo make the services injectable by adding the decorator @Injectable to your class. The providedIn here tells Angular to inject this Service to the app root injector. The root injector's job is to inject services whenever they are needed.\n\nThen you inject it into a component. It is recommended to use this syntax:\n\nRather than this:\n\nThe second option is more adequate in the case the Service you're injecting is not using the services data type as the token for the Service.\n\nWhat do you think about these tips? Do you agree or disagree? I'd love to hear your point of view ^^",
    "link": "https://medium.com/p/f3d26ddaeedb"
  },
  {
    "id": "636d52994b77",
    "content": "Helicopter view of Angular\n\nWhat's Angular, and Why it's worth learning?\n\nHi there üëã\n\nBefore starting, I would like to thank you, Ian Molina and Amine Souissia for your trust and for becoming my newly refereed members. Please reach out to me on LinkedIn if you have any questions and enjoy your writer journey ^^\n\nThis article is about having a global view of what's Angular, why it's popular, and worth learning.\n\nWhat's Angular?\n\nAngular is an open-source framework and development platform for creating efficient and sophisticated SPA (single-page apps) developed by Google.\n\nThe characteristics of the framework:\n\nA component-based framework.\n\nGreat tools and libraries that cover a wide variety of features (routes and navigation, forms, test, state management,...etc.). We will see each of these features in detail in the upcoming articles.\n\nSeveral tools to help you develop, build, test, and update your code.\n\nWhy Angular?\n\nThere are a lot of reasons that make Angular a great solution for building your app.\n\n#1- Multiplatform:\n\nWith Angular, you can build a multiplatform app, and that's super interesting since you create one source code for different platforms and satisfy web users, mobile users, and native desktop users. This helps maintain one source code and pay only for one source code. It's way cheaper than paying for a source code for each platform.\n\n#2- High Performance:\n\nThe Angular team constantly works on app performance‚Äîhow the app compiles and runs are designed to make your app fast. The recent Angular versions had migrated to 100% Ivy engine, bringing more power and performance to the app. You can also use known techniques to boost performance, such as Web Workers and server-side rendering. And it doesn't stop here. Other techniques are coming! Therefore, Angular is a super good solution for large, complex enterprise apps, bringing us to the next strength of Angular, Scalability.\n\n#3- Scalability:\n\nAngular app architecture is designed to make component-based. This facilitates your app scaling. Thus, Angular is great for small apps as well as large complex enterprise apps. Thanks to this architecture, any web app can scale up quickly.\n\n#4- Clean code and reusability:\n\nThanks to its component-based architecture, you can reuse code everywhere in your app, avoiding duplicating code, duplicating bugs, duplicating effort, and maintenance.\n\n#5- Great tools\n\nAngular has powerful tools such as CLI, testing libs, devTools, state management lib,...etc., so you focus on building amazing apps rather than trying to make the code work.\n\nExamples of platforms and web apps using Angular\n\nWell-known platforms and websites already use Angular, such as Youtube, The Weather, PayPal, ...etc.\n\nAngular scares developers since it's not quick to learn, as it's the case with React, for example. There is a whole architecture and concepts to learn about. But what's great about any Angular app is that once you know how things work, any Angular app becomes easy to learn and read since all Angular app respects the global architecture. You become familiar with the app quickly. Whereas with React, for example, the developer is free to implement the app the way he wants, so with each onboard on a React app, you will have to familiarize yourself with the chosen implementation for that project.\n\nAngular vs. AngularJS...\n\nAngular has, in fact, a sibling which is AngularJS, the first one to appear to the modern frontend techs. AngularJS had some limitations based on its deep implementation and philosophy, which made Google start a completely new framework named still Angular with a different philosophy. Here are the main differences:\n\nNext time we'll set the environment and learn about the structure of an Angular app.",
    "link": "https://medium.com/p/636d52994b77"
  },
  {
    "id": "11399de955f8",
    "content": "Angular good coding practices\n\nThings to take into consideration when coding an Angular App\n\nHi there üëã\n\nHaving a global guide will help you create a homogeneous app since all developers will write code based on the rules you set in that guide. Hence, junior developers will make sure they respect it before opening a pull request. That's less job for you and less ping pong in your code review process.\n\nSome key considerations can be:\n\nService per concern: less debugging time and headache\n\nConsistent naming\n\nClass names: upper camel case/ Pascal case\n\nService class: suffixed with the name Service\n\nComponent class: suffixed with the name Component\n\nProperties: lower camel case\n\nImports order: third-party first, then local imports.\n\nRespect lifecycle order: onChange, OnInit, ...etc.\n\nImmutability: not mutating existing objects in memory will help you prevent unexpected changes and behaviors\n\nSmall functions: if it's more than 15 or 20 lines of code, maybe you should split it.\n\nConfigure strict mode. In the latest Angular versions, this option is already activated in the tsconfig.json conf file:\n\nMake sure the base typescript strict mode is also enabled in the same file:\n\nThis means that everything should be typed. This help prevents some weird behaviors as well as helps TypeScript be more efficient by not facing the any type. Learn more here:\n\nOther considerations you can add to your guide:",
    "link": "https://medium.com/p/11399de955f8"
  },
  {
    "id": "c44d6341e8f3",
    "content": "Angular Stories...The Opening!\n\nLearn one of the best frontend frameworks ever!\n\nHi there üëã\n\nFirst of all, I would like to thank Phil Kot for his trust and for becoming my newly referred member. Welcome to your writer's adventure. Please reach out to me through LinkedIn for any questions üòâ\n\nThis is the opening article of the Angular chapter of the 2022 Web Program. This article will give a global idea about the roadmap for this chapter.\n\nAngular is one of the most popular frontend frameworks. This framework is a complete solution for large applications. Learning this framework is not quick compared to React's learning curve, for example. That's why this chapter will take more time compared to other chapters we walked through in this program.\n\nAngular is known to be \"hard\" to learn. This chapter will be a gentle roadmap with many Angular Stories that will make you feel comfortable with Angular, and why not become an Angular Developer?\n\nSo here is the roadmap!\n\nHelicopter view of Angular\n\nAngular basics\n ‚Üí AngularJS vs. Angular \n ‚Üí Setting up the environment\n ‚Üí Architectural overview\n ‚Üí How an Angular app starts?\n\nAngular components\n‚Üí Angular component composition\n‚Üí Angular Component Hooks\n‚Üí Angular Component Types\n‚Üí The right way to create Angular components!\n\nAngular templates\n ‚Üí Interpolation\n ‚Üí Property binding\n ‚Üí Event binding\n ‚Üí #ref variables\n\nAngular Rendering\n ‚Üí Structural directives *ngIf, *ngFor, *ngClass, ...Etc\n\nAngular Forms\n ‚Üí Template-driven forms\n ‚Üí Reactive forms\n ‚Üí Dynamic forms\n\nAngular Services\n ‚Üí HTTP\n ‚Üí Interceptor\n\nAngular lifecycle hooks\n\nAngular routing and guards\n\nAdvanced Angular:\n ‚Üí Custom directives\n ‚Üí Custom pipes\n ‚Üí Modules\n ‚Üí Lazy loading\n ‚Üí DI\n ‚Üí Zone\n ‚Üí App state management\n ‚Üí Compilation System\n\nAngular testing\n ‚Üí Pipes\n ‚Üí Services with dependencies\n ‚Üí Component bindings\n ‚Üí Directives\n ‚Üí Component templates\n\nDesigning Angular app\n\nAngular app metrics\n\nSee you in the next article, till then stay tuned üòâ",
    "link": "https://medium.com/p/c44d6341e8f3"
  },
  {
    "id": "2a4710494828",
    "content": "4 Angular App Architecture Best Practices\n\nArchitecture and app structure best practice!\n\nHi there üëã\n\nModules allow a high-level encapsulation. With modules, you can break your app into big boxes and easily lazy load them when needed for better performance. Let's dive in!\n\n1. App module\n\nThe app module is your main module that bootstraps the app and loads the essential code for the app to launch successfully.\n\nWhen I'm talking about the essential things it needs to render and maunch properly, I mean the BrowserModule, the AppRoutingModule (if your app got routes), the BrowserAnimationsModule, etc.\n\n2. Core module\n\nThe core module is a module that would contain any shared singleton services that should be app-level services.\n\nExamples of what you can consider as a good candidate for the core module could be the app navigation bar, user authentication, etc.\n\n3. Shared module\n\nThe shared module is also called sometimes the common module. This module is a must-have in any Angular project.\n\nThe great thing that comes with the nowadays frontend framework, is the ability to create a reusable component. If you have a Card (for example) you display on multiple pages in your web app, creating a Card component is a wise choice. But importing the component in every module that uses it, is ugly. That's where importing and exporting that component in a shared module is a good practice.\n\nExamples of what you can add to your shared module can be components like a spinner, directives like a highlighter, pipes, used and reused in different modules and pages.\n\n4. Feature module\n\nFeature module is also named sometimes modules although I prefer the feature name. This module gathers all feature components, feature services, directives, and pipes. It might be confusing when choosing between the shared module and the feature module.\n\nThe difference is that the feature module represents your app features and business functionalities. If your app is an e-commerce web app for example. Then a ProductsModule can be a feature to add to your feature module. Inside that module, you use the imported shared module components, like the product card component, spinner component, etc.\n\nEveryone has different preferences, I've worked with developers that would put the authentication module in the feature module and so on. So the structure and architecture I'm proposing here is not a rule you must apply, it's what I find the more appropriate for an Angular app in my point of view!\n\nSo feel free to take it or neglect it, and even better, share with us your point of view. üòâ I'll be happy to hear different feedback and point of view.\n\nOther good practices:",
    "link": "https://medium.com/p/2a4710494828"
  },
  {
    "id": "a95995f85eee",
    "content": "6 Essential Frontend Tools\n\nTo be well equipped is also to guarantee success!\n\nHi there üëã\n\nBefore going for more advanced topics in the upcoming chapters and articles, we need to be well equipped!\n\nVS Code (code editor)\n\nFor every programmer, there is a need for a tool to edit code. For frontend devs, the best of the best is VSCode. In the past, I've used WebStorm, I also love it, but VScode took the 1st place because it was light way, quick at loading, and customizable. You don't need to take all staff with you. Whenever you have a specific need, you install the extension, and your VScode has just extended its abilities.\n\nBrowser & dev tools\n\nThe most popular and used are devTools of Chrome and Firefox:\n\nChrome Dev Tools\n\nFirefox Dev Tools\n\nVersion control (Git)\n\nVersion control is super important. There isn't a project that doesn't use version control. It's mandatory. Therefore Git knowledge is vital for your everyday tasks:\n\nPackage managers and task runners (NPM & Yarn)\n\nNPM and Yarn are package managers. With these tools, you install dependencies, libs, and packages you need for your app. To learn more, here is an article that explains the difference between the two tools:\n\nThere is also another interesting tool, which is nvm. The good thing about this tool is that you can have different nodeJs versions that cohabit on the desktop. This is interesting when you work on different projects with different NodeJS versions.\n\nhttps://github.com/coreybutler/nvm-windows/releases (windows)\n\nhttps://github.com/creationix/nvm (Linux / macOS)\n\nFormatter\n\nCode formatters might appear like something that isn't mandatory, but when you are coding every day, it's not fun to add tabs and format code line by line with your hands. Formatter automates the task for you with a shortcut the job is done.\n\nBundler (Webpack)\n\nSince the browsers speak only HTML, CSS, and JS, bundlers exist to make the translation part. Webpack is one of the most known bundlers. It is used to compile JavaScript modules. Some tools already do the job for you, like Angular CLI, for example. It uses Webpack under the hood. But you can also configure it by yourself.",
    "link": "https://medium.com/p/a95995f85eee"
  },
  {
    "id": "40f83bf975b2",
    "content": "6 Angular Component's Best Practices\n\nBest practice to consider when creating Angular component\n\nHi there üëã\n\nThis weekend's tip is about Angular components. Components are small puzzles we use to build an app. With components:\n\nWe don't repeat ourselves. One component can be used in several places in the app.\n\nWe have a maintainable code. We can detect quickly what's going on and where it's going wrong.\n\nWe can build apps quickly.\n\nThat's why all frontend frameworks and libs nowadays use components or functions to build the frontend as a puzzle.\n\nLet's get to the best practices I keep in mind when creating Angular components:\n\n#1- When to create a component?\n\nThe primary purpose of a component is to encapsulate functionality. If the functionality usage repeats over the app, then you should create a component. If it's simple and not much code, you may not consider creating a component.\n\n#2- Prefixing component selectors:\n\nBy default, the Angular CLI generates the component with the app- prefix. Customizing component selectors is a good practice, especially in large apps. It helps you avoid conflict with other imported modules and explicitly see the component's module it comes from (locate the code quickly principle).\n\nIn small apps, customizing a component prefix is not interesting.\n\n#3- Separating component class, CSS, and template:\n\nAngular style guide recommends that if the CSS or template is more than three lines, move CSS to a style file and HTML to a template file.\n\n#4- Decorating input and Output:\n\nUse inputs and outputs with their corresponding decorators: @Input(), @Output() rather than using attributes inside the @Component @Component\n\n#5- Delegating complex logic (single responsibility principle) to a service.\n\nIf logic is simple, keep it in the component. Otherwise, move it to a service. I prefer to give all the logic to the service and keep the component job at either being the parent/container who gets data and distributes it to children or a dummy component that displays what we give it.\n\n#6- Component member sequence\n\nInside your team, ensure you respect a set of rules to build a homogeneous app. What's common and recommended is:\n\nFirst: class properties (public first, then private ones)\n\nSeconde: constructor\n\nThird: Angular hooks (ordered by their lifecycle order),\n\nThen functions (public ones first, then private ones).\n\nThat's it for this weekend's tip ^^",
    "link": "https://medium.com/p/40f83bf975b2"
  },
  {
    "id": "8abe997d1928",
    "content": "Modern app rendering strategies\n\nModern ways for optimizing app' performance\n\nHi there üëã\n\nNowadays, modern web apps...\n\nAt the beginning of this chapter, I covered some of the classical and historically known ways to improve performance. But the web is growing increasingly with sexy animations, features, and much more. The mobile users are growing too. There are additional keys for optimizing your web app you need to consider:\n\n1- SSR with hydration strategy\n\nSSR with hydration is about rendering on the server, then hydrating on the client. We tell the browser:\n\n‚ÜíFirst paint ‚Üí Then byte ‚Üí After then, time for interactions\n\nServer-side rendering\n\nThe server side is important for three main reasons: Performance, SEO, and data fetching. In this case, the content is rendered quickly compared to the client-side rendering.\n\nClient-side rendering\n\nThe classical way of loading an app.\n\nCoding it...\n\nTo implement these new techniques, there are already frameworks and libs that do the job for you. I'll take React tech because of its popularity and simplicity compared to Angular.\n\nClient-side rendering\n\nServer-side rendering with the ReactDOMServer module\n\n2- Pre-rendering strategy\n\nWith the pre-rendering technique, the HTML page has already been generated at the build time. So when you request the HTML page to the server, it sends it to you immediately. This solution has its limits, such as only working for static content and requiring a list of all the website URLs ahead of time to create their pages.\n\nCoding it...\n\nAgain, there are tools for the pre-rendering strategy too. Gatsby is one of the very known tools for pre-rendering.\n\n3- Streaming server-side rendering strategy\n\nI learned about this strategy recently but didn't use it yet. The tech that can be used for this strategy is spectrum.\n\nIt is mainly about:\n\nStreaming initial HTML response in chunks.\n\n4- Progressive hydration strategy\n\nI don't know much about it, but it seems that it's the new upcoming way of loading apps...",
    "link": "https://medium.com/p/8abe997d1928"
  },
  {
    "id": "f2546647b20e",
    "content": "6 Debugging Tactics\n\nYou can't code without debugging\n\nHi there üëã\n\nDebugging is a part of the development process. There is no way you'll be coding without debugging. It's a must to build muscle to succeed in your coding tasks.\n\nThis article gathers the most efficient tactics for debugging your code!\n\n1- Console\n\nThis is the basics of the basics. If there is an issue, you should first know what's the problem. What's the error? From the error, take action. If no errors are displayed, make sure to add logs to see the path your code takes and if it takes the road you designed for it to take.\n\nAdding logs for each step you take to complete a feature or functionality will make it easy to investigate and catch errors. Make sure to delete the console logs in your code, though. If you need to keep logs in the code, then use a log service to do so.\n\n2- StackOverflow\n\nWho doesn't use StackOverflow? It's the best friend for developers. This solution is worth checking because sometimes you'll find the answer right away, save your time, and increase your productivity. This tactic is quick and concise.\n\nMake sure that you understand the solution and that you're convinced that it's clean and good code you're adding to solve the problem.\n\n3- Read Doc\n\nMake sure to read the doc if things don't work how you'd like them to. Sometimes, the answer is so clear and well explained in the doc. We end up finding it through a link in the StackOverflow post that solves your problem. Therefore, when coding something new to you, start from the doc and refer to it. Until it doesn't answer your questions, you may look outside.\n\n4- BreakPoints\n\nThis tactic is time-consuming since you need to add a breakpoint for the whole code and see and rerun the code to find the area where things go wrong. But, it's definitely the best tactic when StackOverFlow, Doc, and console don't solve the problem.\n\nThis is also a good tactic for learning more about the app and how it works when you're new to the app.\n\n5- Talk it out or draw it\n\nSometimes when there's a significant logic behind the full functionality or bug you want to fix, talking to yourself makes things more straightforward for your mind. If it's complex, drawing schemas is even better.\n\nYou'll end up with a clearer vision and even sometimes with a better solution or implementation than the existing one.\n\nTalking it out to other team members is also a great solution.\n\n6- Take a break: walk, rest, eat, ...change the air\n\nSometimes, it's not about the code itself but you. You're eyes or mind may be tired and can't see it. We often find right away the issue right after a walk or a pause in general.\n\nWhen after several temptations, there is no solution. Try to take a break and try again later.",
    "link": "https://medium.com/p/f2546647b20e"
  },
  {
    "id": "c0a2add046a3",
    "content": "Image optimization strategies\n\nBoosting web page performance by optimizing its images\n\nHi there üëã\n\nToday's article is about images. Their weight is not neglectable on a web page. It can handicap your website performance, especially if you are using a lot of visuals on your page.\n\nHere is where image optimization comes into play.\n\nWhat's image optimization?\n\nImage optimization is about reducing the file size without impacting the quality. The loading time will then be low for optimized images that improve web page performance.\n\nTips to know for image optimization\n\n1 - The image format\n\nThere are several image formats. There is a reason for having different formats you need to know for better image usage.\n\nPNG: for higher quality images, thus larger file size.\n\nJPEG & JPG: for images with many colors, you can adjust the quality level for a good balance of quality and file size.\n\nGIF: the best choice for animated images.\n\nOther types are not widely used because not all browsers support them.\n\n2 - Image compression\n\nWhen an image is compressed, it takes less space on the hard drive. This will help reduce the bandwidth, communication bandwidth, and storage space.\n\nIf you are a medium writer, think of using systematically compressed images for your articles. It improves your articles loading time.\n\n3 - Resize the image\n\nResizing images will lead to a size reduction without touching the amount of data in that image. Resizing images through CSS is an error since you already know that you won't need the original size of the image. Thus, you load a heavier thing, whereas you need only a tiny thing.\n\n4 - Image catching\n\nImage catching is the technique of storing image files within a user's browser cache or on a proxy server for fast and easy access. Browser-side caching reduces application requests and a given page's download size.\n\nThis tip is especially useful for websites with shared and unchanged images among pages.\n\nTools for optimizing images\n\nhttp://jpeg-optimizer.com/\n\nhttps://tinypng.com/\n\nhttp://optimizilla.com/\n\nhttps://enviragallery.com/refer/optimole/\n\nhttps://kraken.io/web-interface\n\nhttps://enviragallery.com/refer/imagerecycle/\n\nhttps://compressnow.com/\n\nhttp://www.resize-photos.com/\n\nCanva (compress and resize options when downloading an image)\n\nhttp://tools.dynamicdrive.com/imageoptimizer/",
    "link": "https://medium.com/p/c0a2add046a3"
  },
  {
    "id": "f81b41cbab69",
    "content": "Meet Web Worker: The Hard-Working Guy Behind the Scenes\n\nWhat is a web worker? How does it work?\n\nHi there üëã\n\nHave you ever heard about web workers? If not, you're on the right page. This article will give you all that you need to know about this guy. Learning about web workers is essential as they are used everywhere and are important for app performance. You'll definitely meet or code it in your everyday tasks as a web developer!\n\nIn one sentence...\n\nA web worker is a JS program for time-consuming tasks that you execute in the background to avoid affecting the performance of the application.\n\nIt's simple as that. You let the main thread render your web app. When there are complex things you need to do, you let it to the super worker guy to do it without blocking the UI, which leads to a smooth and reactive page, thus a good user experience.\n\nTechnically talking Worker is an API interface that lets you create a thread in the background.\n\nUse case of web workers\n\nFor large web applications, performance matters. There are a lot of time-consuming tasks that can affect their performance. One of the use cases could be fetching big data or files from the server, displaying the dashboard page with a lot of stats and real-time data, and much more...\n\nHow does it work concretely?\n\nEstablishing communication with the worker and asking him to do complex things is pretty simple. Here are the steps:\n\nFirst, check if the browser support workers\n\n// in the main script\n\nif (typeof(Worker) !== \"undefined\") {\n // Yes! Web worker is supported!\n} else {\n // Nop! Web Worker not supported\n}\n\nSecond, create the worker file\n\n// in the worker.js file\n\nonmessage = function(message){\n  console.log(message);\n  let sum = 0;\n\n  for (let i = 0; i < 10000000000; i++) {\n    sum += i;\n  }\n\n  this.postMessage(sum);\n}\n\nThird, create the worker object\n\n// in the main script\n\nif (typeof(Worker) !== \"undefined\") {\n  const worker = new Worker(\"worker.js\");\n  \n  worker.postMessage(\"Launch sum\");\n\n} else {\n // Nop! Web Worker not supported\n}\n\nNow, we are good to get the task done for us by the worker\n\n// in the main script\n\nworker.onmessage = (message) => {\n  // The returned sum value is in message.data\n  console.log(message.data);\n}\n\nCleaning up when you are done\n\nworker.terminate();\n\nThe complete demo code\n\nIn the complete demo, in the version without the web worker, the screen is blocked once we launch the sum computing. We can't click on the other button to change the title. Until the for loop is done and only after then, the screen is reactive again, and the other button is working.\n\nThe for loop in the example is just a simulation of an operation that takes time to finish.\n\nThe version without workers is commented. Play with it to see the difference.",
    "link": "https://medium.com/p/f81b41cbab69"
  },
  {
    "id": "c27617e4e022",
    "content": "5 Top 3D illustrations resources\n\nAdd a wow effect to your website with 3D pictures...\n\nHi there üëã\n\n3D has become trendy in the last few years. There are a lot of websites that adopt this style. 3D creates a wow effect, especially if you use clean and well-designed 3D vectors or images.\n\nThis weekend's tips are the continuity to the last tips about the WOW effects article:\n\n1- Isometriclove\n\nA really great resource, the 3D illustration are well designed. The quality is excellent and also go animated 3D illustrations.\n\n2- 3D toy faces\n\nGet 3D illustrations to customize your profile picture. This website is very known and has already worked with notable companies such as Google, Netflix, Adobe, Vercel, and FedEx...\n\n3- Freepik\n\nThis is an already popular and well-known tool for images in general. It also got excellent 3D illustrations. You can use the filters on the left to narrow down the results and find what you need for your website.\n\n4- IStockphoto\n\nVery know too. It's similar to Freepik. It got incredible 3D illustrations too. You have many options to refine and explore 3D illustrations based on your website concept and brand.\n\n5- Handz design\n\nThere is a tendency to use 3D hand illustrations in websites. This website has good illustrations. It got free as well as premium illustrations.",
    "link": "https://medium.com/p/c27617e4e022"
  },
  {
    "id": "f952873be53d",
    "content": "Browser built-in loading strategies\n\nFor better website performance!\n\nHi there üëã\n\nWhat drain the web performance is the loading time of its resources. Fortunately, modern browsers are equipped with built-in hints to load resources efficiently, thus creating a better user experience and website performance.\n\nYou don't have to install anything since all these loading strategies are already built in your browser. These hints look like this:\n\nLet's learn more about each of them.\n\nThe job of each\n\npreload ‚Äì when you want to start loading the resource early in the page life cycle and before the browser's primary rendering mechanism starts.\n\nprefetch ‚Äì downloads the resource in the background and cache it until the user requests it.\n\npreconnect ‚Äì establishes a connection to a server in advance to make the request quick when the time comes to call that server.\n\ndns-prefetch ‚Äì when you want to call DNS lookups on cross-origin domains, not your domain.\n\nprerender ‚Äì preemptively fetch and process a resource when you are sure the user will navigate to it.\n\nmodulepreload ‚Äì the same as the pretender hint, except that it's for JS modules.\n\nThe advantage of each\n\npreload : perfect for performance (especially loading CSS sheets) since it loads earlier, making it less likely to block the page's render. Learn more about what blocks the page's render.\n\nprefetch : improves the user experience since the resource is already loaded and the navigation is instantaneous.\n\npreconnect : improves the user experience, making HTTP calls fast.\n\ndns-prefetch : masks DNS resolution latency. Not effective when you want to point your site or domain.\n\nprerender : immediate rendering since the resource is already loaded, thus better user experience.\n\nmodulepreload : suitable for mandatory JS module to make your app faster.\n\nReference: https://developer.mozilla.org/",
    "link": "https://medium.com/p/f952873be53d"
  },
  {
    "id": "c3d963eabe4a",
    "content": "The browser reflow whereabouts\n\nHow to minimize the reflow time?\n\nHi there üëã\n\nLast time, you learned about CPR and traditional tips for optimizing the performance of a website. This time, you'll learn about the browser reflow, that's new to you? Well, you're on the right article!\n\nWhat's the reflow?\n\nThe reflow is the web browser process used to calculate all the positions of the elements in the DOM tree. Whenever a change occurs on a layout, the recalculation starts again and again, and it is a user-blocking operation. Thus, it is essential to understand this issue and improve reflow time to ensure a good user experience.\n\nScenarios that cause reflow\n\nChanging padding or margin properties for an element\n\nAppend or remove an element to the DOM\n\nHiding and showing elements\n\nResizing the window\n\n....\n\nTips for minimizing the reflow time\n\nReduce the DOM depth. Changes at one level in the DOM tree can cause changes at every level of the DOM tree. I'll let you imagine how time-consuming it would be for each change. The whole recalculating process starts again, and so on.\n\nClean CSS sheet, and remove dead CSS code.\n\nAvoid changing individual CSS styles with JS (element.style.top= 100;)\n\nAvoid using too much CSS selectors, which require more CPU power to do selector matching.\n\nAbsolute and fixed positions are reflow friendly. If you make complex rendering changes like animations, for example, do it out of the flow with the absolute and fixed positions.\n\nTools to help you\n\nMr. Inspector, the browser dev tools, record the performance insights and investigate what slows your website the most.\n\nInvestigate the rendering with Chrome devTools, go to the three dots of the dev tools, click on more tools, and click on rendering.\n\nLighthouse extension to identify reflow and repaint issues",
    "link": "https://medium.com/p/c3d963eabe4a"
  },
  {
    "id": "8b905b5a03d8",
    "content": "4 Tools to add a WOW effect\n\nTo your website and attract users!\n\nHi there üëã\n\nTime to some animations to bring life to our websites. I collected in the article great animations that can create the WOW effect in your website without paying it expensively for your website performance. These libraries are lightweight, which makes them so popular!\n\nParticle JS\n\nGreat background animations you can customize with the provided console on the right of the website. Users can hover or touch and see the animation reacts to their actions.\n\nAnimation on scroll with AOS\n\nAnimation plays a massive role in giving a website life and attracting users. This lightweight JS library provides a collection of fantastic animation effects such as fading, zooming, and flipping while scrolling your website.\n\nFramer\n\nIf you built your website with react and want to add some life to it, \nthen you may love to use this library.\nWith framer motion, you can animate different parts of your website.\n\nSwiper JS\n\nThis library is designed to save your time on building a slider from scratch\nand focus on other things on your website. As √πmobile users grow constantly, this\nlib is designed to work well with mobile UI and features.\n\nOther great tools shared by Satyam Anand and Attila V√°g√≥ (thank you so much for sharing ‚ù§):\n\nAnimista\n\nhttps://animate.style",
    "link": "https://medium.com/p/8b905b5a03d8"
  },
  {
    "id": "92f1ddcf02e8",
    "content": "üî•Critical Rendering Path\n\nVisual explanation of the CRP!\n\nHi there üëã\n\nThis topic is essential to understand because the web is all about the user experience, and loading your web page fast is one of the keys to good user satisfaction.\n\nI- The story of a web page...\n\nThe web is built on three pillars: HTML, CSS, and JS. Here is the path behind the whole steps from loading to rendering.\n\nThe screen is blank, ... the HTML bytes are arriving on the wire\n\nHTML bytes arrived, ...the parser gets to work\n\nJS blocks the whole thing until it is loaded and executed\n\nDOM is constructed successfully, ...to the next step, the CSS\n\nLoading the CSS, the whole CSS file needs to be loaded before going to the next step. It is not incremental like HTML\n\nCSS is loaded, time to build the CSSOM. The screen is still blank in this phase, but we have both HTML and CSS trees.\n\nRender trees = DOM + CSSOM. In this phase, a hybrid tree is constructed to build from it the render tree.\n\nOnly visible things or elements exist in the render tree. Why bother adding an invisible element to the tree? A typical example is assigning a display: none to an element. That element won't be added to the tree).\n\nWe have all the information we need. Time for painting!\n\nThe web page is no more blank.\n\nHave you ever heard this advice when you started your web developer journey? üòÜ\n\n\"Put the CSS first in the HTML and your JS at the bottom\"\n\nWhy CSS first:\n\nThis means that we discover the CSS early and fetch it quickly, which unlocks the rendering\n\nWhy JS last:\n\nIt means that JS blocks the whole thing, but hopefully, by that point, we've already constructed most of the page.\n\nThis is because JS blocks the whole thing until JS is fetched and executed. There is a good reason behind this, though. We know that JS can manipulate the DOM, so it's not a great idea to construct the DOM when we know the JS can manipulate it.\n\nThe good thing is that the event loop and asynchronous code solved this problem by running the async code in the background, so the DOM and CSS are not blocked, and the JS code is executed when it's ready.\n\nTo sum up, fundamental problems for performance\n\nHTML is parsed incrementally. The great thing about this is that we don't have to wait until it is loaded.\n\nUnlike HTML, CSS is not incremental. Rendering is blocked on CSS, so the whole CSS needs to be loaded first!\n\nJS blocks everything since it can manipulate the DOM and the CSSOM (CSS loaded object). It must be fetched and executed before rendering any HTML and CSS to avoid rerendering.\n\nAsync script allows faster DOM construction, faster loading time, and paint.\n\nII- Optimization basic tips\n\nMinify, compress, and cache files\n\nUse inline CSS will allow not blocking the rendering until all CSS code is loaded.\n\nSplit CSS into different files and portions\n\nUse CSS with media queries and attributes to avoid loading CSS for mobile while opening the app on the desktop.\n\nAdd async attribute for JS file so that the rendering process won't be blocked by JavaScript.\n\nUse defer attribute for JS file to tell the browser to execute the script only after parsing the document, so putting it all together to optimize the CRP.\n\nMore advanced tips for the modern web will come in the next articles of this chapter, as well as the tools you can! So stay tuned üòâ",
    "link": "https://medium.com/p/92f1ddcf02e8"
  },
  {
    "id": "e25e4363b93c",
    "content": "Building a Weather App\n\nApplying chapters 1, 2, 3, 4, and 5 of the 2022 Web Program\n\nHi there üëã\n\nTo take the most out of the whole exercise, follow the plan and try to implement it step by step. When you're stuck for more than 30min, check the source code, fix the problem and keep implementing it yourself, and so on...\n\nReady? let's enjoy it!\n\nI- The skeleton (HTML) üíÄ\n\nWhen building the skeleton, hard-code all the text, even the results, until the UI is done. You can pass to the next step of giving it life with JS. For this step, you'll need the knowledge you got from the HTML chapter.\n\nState 1 of the app\n\nAs you can see, we need 3 main things in our HTML document for the initial state of the website:\n\nHeader (a big one: <h1>)\n\nInput (with button as an icon)\n\nA background image adapted to the searched city. To make our app sexy and to use your knowledge about APIs.\n\nState 2 of the app\n\nThe second state of the app is when we are searching:\n\nA spinner indicating that we are searching\n\nAnimation (CSS)\n\nState 3 of the app\n\nThe last state of the app is when we display results:\n\nII- The style (CSS) ‚ú®\n\nMake sure you created all the HTML blocks without hiding any blocks. For now, code with dummy text. We'll show/hide and insert accurate results in the JS part. For this step, you'll need the knowledge you got from the CSS chapter.\n\nMake the image take the whole background.\n\nMake the search block style.\n\nMake the loading block with animation ( flex, transition, @keyframes, transform)\n\nMake the results block style.\n\nIII- The interactions (JS, DOM, and BOM) üé¨\n\nTo accomplish this step, you'll need the knowledge from the JS Chapter and the BOM/DOM chapter.\n\nShow/stop loading mode (state 2 of the app) stopLoading() / showLoading().\n\nShow/hide results block. Use the DOM object document to select the HTML element and then change the style results.style.display = block to show and =\"none\" to remove.\n\nImplement searching methods:\n\n‚Üí By clicking on the button (search icon). Add a listener to detect when the user has finished typing (input.addEventListener(\"keyup\", keyupEventHandler);)\n\n‚Üí By getting the user location searchWeatherByLocation(lat, lon). Use the GeoLocation web API.\n\n‚Üí By what the user typed (KeyUp event) searchWeatherByCity(city)\n\nGet results from the OpenWeatherMap API (you'll need to subscribe to the API (it's free) and get your API key). Use the fetch API and JS promise.\n\nUpdate HTML with the new results (use the DOM object, example: document.querySelector(\".temperature\").innerText = temp + \"¬∞C\"; )\n\nUpdate the background image with the Unsplash API (source.unsplash.com) and new search results.\n\nüôà app online\n\nüíª Source code\n\nMake sure you played the game before checking the source code üòâ and give it a star on GitHub if you like it ^^\n\n‚ùîGot questions\n\nDM in LinkedIn, I'll gladly answer you üòâ",
    "link": "https://medium.com/p/e25e4363b93c"
  },
  {
    "id": "6e73db339b21",
    "content": "4 Best New JavaScript ES2022 Features\n\nGreat features for your everyday JavaScript tasks.\n\nHi there üëã\n\nLast month, new JavaScript features were released. This weekend's tip is about the favorite ones I'll certainly be using in my code.\n\nLet's learn these new features.\n\n1. Await can be used outside of async blocks\n\nThe await keyword previously couldn't be used outside the async box (or function). With ES2022, we can use await without async, for example, to load other code conditionally or dynamically.\n\nif(user.preferences.mode === dark) {  \n   await require(\"path to additional code to be imported\")\n}\n\n2. '.at()' method for arrays\n\nA great feature, instead of slicing the array and getting its length until we get what we want. This feature will help you get what you want in a line of code. Good for readability and less code.\n\nUse a positive index for indexing toward the end of the array and a negative index for indexing from the end of the array to the top.\n\nconst arr = [1,2,3,4]\n\nconsole.log(arr.at(2)); // 3 because positive indexining starts from 0 for first element of the array/string\n\nconsole.log(arr.at(-2)); // 3 because negative indextion starts with -1 for the last element of the array/string\n\n3. 'cause' for Errors\n\nIt's possible now to specify an exception's cause for better error management and debugging purposes:\n\ntry {\n  //something\n} catch (error) {\n  throw new Error('Something went wrong', { cause: error });\n}\n\n4. RegExp match expression\n\nRegexp.exec : for matching multiple parts of a string. Returns result one by one, so you have to loop each result until the end when it returns null.\n\nExample from Mozilla:\n\nconst regex1 = RegExp('foo*', 'g');\nconst str1 = 'table football, foosball';\nlet array1;\n\nwhile ((array1 = regex1.exec(str1)) !== null) {\n  console.log(`Found ${array1[0]}. Next starts at ${regex1.lastIndex}.`);\n  // expected output: \"Found foo. Next starts at 9.\"\n  // expected output: \"Found foo. Next starts at 19.\"\n}\n\nString.matchAll : returns an iterator to use for iterating over all matches.\n\nExample from Mozilla\n\nconst regexp = /t(e)(st(\\d?))/g;\nconst str = 'test1test2';\n\nconst array = [...str.matchAll(regexp)];\n\nconsole.log(array[0]);\n// expected output: Array [\"test1\", \"e\", \"st1\", \"1\"]\n\nconsole.log(array[1]);\n// expected output: Array [\"test2\", \"e\", \"st2\", \"2\"]",
    "link": "https://medium.com/p/6e73db339b21"
  },
  {
    "id": "516b8fc67d30",
    "content": "Congrats for completing chapter n¬∞5\n\nThe BOM & DOM got no secrets from you + BONUS\n\nHi there üëã\n\nCongrats on completing the 5th chapter of the 2022 web program. You should be proud of your perseverance. This chapter was the closing of the basics knowledge of the web. With this knowledge, you can start building websites and keep growing.\n\nüî• The BONUS of the chapter:\n\nNow that we know the basics, it's time to build a real website. Quick preview of what we'll be building in the next article:\n\nNow a quick recap of the BOM and DOM chapter!\n\nIIV- BOM & DOM\n\nWhat are the BOM and the DOM?\n\nElement selectors\n\nManipulating the DOM\n\nAjax & Fetch\n\nEvent phases in the DOM\n\nEvent loop\n\nAPIs\n\nThe next!\n\nNow that we have the web basics, we can already build an app with this knowledge. The following article will be about building this app.\n\nThe next chapter is dedicated to the web performance, so stay tuned üòâ",
    "link": "https://medium.com/p/516b8fc67d30"
  },
  {
    "id": "73353397a30d",
    "content": "APIs, the Big Picture!\n\nA synthetic view of APIs for developers.\n\nHi there, üëã\n\nWe are achieving the end of the BOM & DOM chapter. The last thing I want you to know in this chapter is APIs. Because you'll be using this thing for life or maybe you are already using them.\n\nA big picture\n\nWhat you need to know!\n\nAPI stands for Application Programming Interface.\n\nIts job is to help you access data or services.\n\nAPI plays the role between your app (the consumer) and the app providing the data/service you want to use.\n\nA scenario?\n\nYou want to see restaurants nearby your current location in your app.\n\nFor the map, you'll be using, for example, Google Map API.\n\nGet restaurant data (name, location, stars, ...etc.) by a Restaurants API (Tripadvisor API, for example).\n\nTo get your current location, you can use the Web API Geolocation.\n\nYour user can complete his order by paying with the PayPal API.\n\nSum up\n\nYou develop an entire working app quickly.\n\nYou need to read the API documentation and follow the instructions.\n\nThey are already existing and working and maintained.\n\nYou don't maintain or manage these APIs. You just use/consume them.\n\nThere are free and paid APIs.\n\nThere are API called REST API. They are APIs that respect the standards of the web. API is (the thing: service/data you want), and REST is the way you'll get the data/service you want.\n\nWant to learn more?",
    "link": "https://medium.com/p/73353397a30d"
  },
  {
    "id": "78db4b242249",
    "content": "7 Great Tools for Content Creation\n\nSave time and increase productivity with these tools\n\nHi there üëã\n\nI've been asked frequently about the tools I use for my content on Medium. This weekend's tip is about the top tools I discovered and kept using for my content creation.\n\nBy the way, I'm NOT paid for sharing these tools. I'm just sharing what I used and still use for my content creation.\n\nIf you got great tools too, please share with us üòâ\n\nDear Instagramers, please copy/paste my work but don't forget to add the source. Let's grow together üòâ ... thank you.\n\n#1- Canva\n\nCanva is my love. I can't create any content without it. I use it for:\n\n‚Üí My article covers, document covers, logos, ...etc.\n\n‚Üí My animations, gifs, and my youtube videos.\n\nI used canva free version for one year. I loved it and found it a helpful tool that got all the merit to pay for it. So I switched to the premium plan and didn't regret it.\n\nAlthough I learned a lot of techniques with time, the tool is so intuitive that you'll learn quickly.\n\n#2- Jitter\n\nJitter helps you make motion designs. I discovered it lately and kind of like it. I haven't used all its features yet, but I give it a chance because I found it promising. I discovered it by a friend using it to create tweet testimonials and add them to his website.\n\n#3- Kaptioned\n\nIf you are a vlogger, you'll find Katptioned so useful. It adds automatic subtitles to your videos. Isn't it awesome? You make your videos readable without an extra effort.\n\nI don't use this tool yet because videos take so much time, and I'm already swamped between my job, my 2022 web program, and my curiosity about learning new things (currently learning ionic üòú), so there is no time left for videos.\n\n#4- Cutout pro\n\nCutout pro is a video background removal build with AI power. I discovered this tool recently, and I'm so glad I did. For a long time, I've been looking for a tool to make my gifs background transparent so that if my medium reader's custom background is not white, my gifs will still be sexy.\n\nWhat's also excellent with this tool is that it got other features such as removing a photo background, removing unwanted objects in a photo, animating a photo, and much more.\n\nüî• üî• üî• A really great tool, definitely recommend it!\n\n#5- Carbon\n\nYou might have already used this tool if you are a developer creating content about tech. I use this tool whenever I want to add a code snippet to my animations or content in general.\n\n#6- Magic eraser\n\nI often find a fantastic image but have a small thing I don't like. This tool is so powerful to customize awesome images to your liking.\n\nSince I discovered cutout pro, I switched entirely to it. But the magic eraser is still worth mentioning as it is so powerful.\n\n#7- Screen recorder extension\n\nAll the gifs above are made thanks to the screen recorder extension + canva (for converting to gifs).\n\nYou can record the whole screen, activate the camera, or not. The same goes for the audio. I often use it to record only the browser tab, but it has many exciting features for creating vlogs and blogs content.\n\nOther tips:",
    "link": "https://medium.com/p/78db4b242249"
  },
  {
    "id": "78c5861e98fb",
    "content": "üëÄ Event loop visualized!\n\nHow does the event loop work?\n\nHi there üëã\n\nBefore starting my story, I would like to thank my newly referred member Ethan Cavill. I'm available every day on LinkedIn, DM me if you need anything. Can't wait to read your articles. Let's grow together on Medium!\n\nI've previously talked about the event loop in this article:\n\nFor the current article, I'll make it a short story. If you feel it too short, though, please check the article above for more details.\n\nEvent loop purpose\n\nJavaScript is not multithreaded. It can't do multiple tasks asynchronously. If we wait for every task to finish, no one will use the web anymore.\n\nThe event loop is what makes the web alive. You click the button, the download is launched, then change filters, go to the navbar and switch to dark mode, and so on, ...\n\nFind a complete example of the event loop in action in this video:\n\nKey ideas\n\nThe event loop job is connecting or orchestrating tasks that are waiting to get executed in the JS call stack.\n\nThe event loop job is connecting or orchestrating tasks that are waiting to get executed in the JS call stack.\n\nEvent loop priorities:\n\n‚Üí Sync tasks (Call stack) first (console API, for example)\n\n‚Üí Microtask queue second (fetch API, for example)\n\n‚Üí Async tasks queue third (setTimeout API, for example)",
    "link": "https://medium.com/p/78c5861e98fb"
  },
  {
    "id": "ed724d526a73",
    "content": "4 Awesome Frontend Tools\n\nIncredible tools to add to your dev toolbox!\n\nHi there üëã\n\nThanks a lot to my newly referred member Mark Goldin, I can't wait to read your articles and help each other to grow together. You can DM me on LinkedIn, I'd be glad to share with you my experience on Medium.\n\nThis time, I'm sharing my newly discovered tools for the frontend. Make your website attractive for the users' experience and beautiful everywhere. Let's start!\n\n#1- Responsively\n\nFrontend's primary concern is the user experience. Because mobile users grow each year, a responsive website is a must! These tools will help you ensure your users see what they should see when using your website on their mobiles!\n\n#2- Type scale\n\nIt's time for a responsive text too. There are a lot of surprises you can avoid by making sure that your website text is responsive too!\n\n#3- Unsplash JSON API\n\nUnsplash is very known for its stock of fantastic and free photos. This API allows you to get photos and use them on your website. Medium is powered by Unsplash, Trello, the Facebook portal, and much more.\n\n#4- SVG Wave\n\nThis website helps you generate SVG waves to make your website alive and make the user's first impression positive and beautiful.",
    "link": "https://medium.com/p/ed724d526a73"
  },
  {
    "id": "8ca5d8929ade",
    "content": "Event's Phases Inside the DOM\n\nWhat are event capturing and bubbling in JavaScript?\n\nHi there üëã\n\nThis time to learn about how an event lives inside the DOM. Events go through 3 phases:\n\nCapturing phase\n\nTarget phase\n\nBubbling phase\n\nLet's learn more! A code example is provided at the end of the article.\n\nCapturing phase\n\nThis is rarely used. That's why it's not very known because it is invisible. When we click (click is an example of an event, it can be whatever you want) on an element, we are often interested in the clicked element. Capturing starts from the root element to the clicked element where the event had been fired. Always to \"DOWN\" direction until it reaches the target element.\n\nIt is disabled by default. To enable it:\n\nhtmlElt.addEventListener(..., {capture: true})\n// or\nhtmlElt.addEventListener(..., true)\n\nTarget phase\n\nIn this phase, the event reached the target point. This phase is triggered with the capturing phase if we enable it and with the bubbling phase. It's not a separate phase.\n\nBubbling phase\n\nIt's a process of event bubbling from the inner HTML element up through parents like bubbles in the water.\n\nIf I click on the p element then, if there is a click event handler associated with it, it will be triggered. After then, the same happens with its parent, the section element, and so on until we reach the document or window object.\n\nIt's the opposite of capturing. We go from the target element to the parents' direction. Always \"UP\" direction until it reaches the top, the document object (DOM) or window object (BOM).\n\nThe bubbling process can only stop by using the stopPropagation() method.\n\nThe whole picture\n\nIn the following example, we'll add two listeners (the first for the capturing phase and the second for the bubbling event) for all our DOM elements to visualize the whole process. The querySelectorAll is not good at all for performance, but what I want you to understand here is the event phases and how they work.\n\nExample code",
    "link": "https://medium.com/p/8ca5d8929ade"
  },
  {
    "id": "d9523c7c62e2",
    "content": "Calling for data...\n\nWhat are Fetch and AJAX used for?\n\nHi there üëã\n\nThe best thing the web brought was its ability to be dynamic and display data. Tools like AJAX and Fetch made getting data a piece of cake.\n\nI've already talked about AJAX in a previous article, so I won't go into its details in this article to make it light for you.\n\nAJAX (Asynchronous JavaScript And XML)\n\nAJAX allows web pages to be updated asynchronously. AJAX is used when you need to update only a part of your web page without refreshing the entire page.\n\nHere is what you need to know about AJAX:\n\nTo learn more:\n\nNow let's get to fetch API\n\nfetch is a JS web API. It's your tool to call a server with HTTP(S) request and get data from it. Unlike AJAX, there is no need for XMLHttpRequest with the fetch API.\n\nfetch is often used to retrieve data. You'll definitely see it in a code or use it in your code.\n\n‚ÜíHow does it work?\n\nCall the API with the server data URL or a data file path, get results or errors, and do things with the response.\n\nDo you remember our article about promises? Well, yes, your right fetch is a promise so we can call the then method on it.\n\nSince it's a promise, we can also use the asynch/await we learned in the async/await article.\n\n‚ÜíReal-life example\n\nIn this example, I use DummyJSON to simulate a server that replies with data.\n\nThe results:\n\nCongrats, you've just learned AJAX and Fetch üòâ",
    "link": "https://medium.com/p/d9523c7c62e2"
  },
  {
    "id": "fa826e50f38e",
    "content": "5 Dangerous signs\n\nYou should detect as soon as possible\n\nIf the mind didn't talk the body will!\n\nThe tech world is stressful. The team needs to deliver by the deadlines, regardless of if it's reasonable to accomplish the remaining job or not. In your free time, you need to update your knowledge, keep learning to move with technology, keep your profile attractive, and many more factors. We often talk about burnout in this domain, and here are some signs of upcoming potential burnout!\n\n1- Inability to think\n\nWhen the mind is saturated, it can't think anymore. Have you even read a piece of code multiple times and still don't know what you just read? I'm not talking about understanding the code but just reading it. You read as if you didn't, you try again, and it keeps repeating for days.\n\nThat's a sign you should notice and hear out. You should react before it's too late.\n\n2- Overthinking\n\nOver thinking... sometimes we can't stop ourselves from repeating a cycle of a moment we lived, or just some thoughts. Have you ever kept thinking about an issue (a bug, a work problem, ...etc.) at home? Thinking once or twice from time to time is normal, but bringing your job thoughts home every day is not normal at all, and it's a bad sign!\n\nI used to be like that. Looking back to the nights I was overthinking a bug, a moment, or a reaction was a waste of time and harmful to my health. This will work against you. Solving issues needs a clear and rested mind.\n\n3- Lack of resourcefulness\n\nWe get sometimes lost in the fast life train. We worked, back home we take care of children or job again. At the weekend, we keep working or taking care of issues, ...and so on.\n\nWhen we see the whole picture from above, we don't do anything to ourselves. No activity to recharge our batteries, just things that drain and exhaust our health physically and mentally!\n\nLook to your actual life. What do you do to recharge your batteries every day or every week? Do you exercise? Do you read? What do you do, for yourself and only yourself?\n\n4- Lack of interest\n\nLack of interest in things and more advanced level is lack of interest in life is a dangerous sign you shouldn't neglect at all! You may think that it's lack of interesting activities: \"I don't find anything fun to do, ...\". It's often more profound than that.\n\nIn this case, deep rest for your mind is needed. Look for activities that can make you relax, travel, change the environment, and most of all, fight it because there is no right weapon for this and because it's so hard to fight it, we tend to think that things are like that and that we can't change them. Don't give up on this feeling and these thoughts. You'll learn that those thoughts aren't reasonable when things get better.\n\n5- Repetitive headache\n\nI'm not talking about period headaches, alcohol headaches, or punctual headaches in general. I'm talking about having headaches almost every day! When the mind is overwhelmed and can't support it anymore, the body starts to talk.\n\nRest, read and observe yourself to find the issue and fix it. Learn about yourself, we think we know ourselves the best, but we don't. Be patient and understanding. There is nothing wrong with not being okay. We are humans, not machines!\n\nAlthough this is all good to say and tell to our minds, it doesn't work every time. Traveling doesn't solve our problems, the work environment isn't always healthy, and so on, but when you become observative of yourself, you manage to see from above, not from inside. Thus, your decisions are more likely to help you and not be against you!\n\nMore tips?",
    "link": "https://medium.com/p/fa826e50f38e"
  },
  {
    "id": "13959986300",
    "content": "üëªDOM Manipulation\n\nMake changes behind the scene in real-time\n\nHi there üëã\n\nLast time, you learned about selecting DOM elements. It's time to do things with these elements!\n\nThere are a lot of things we can do with the DOM. Here are some of the common usage:\n\n1. Get & Set an element's text\n\nconst header= document.querySelector('h1');\n\n// Get the header text:\nconsole.log(header.textContent);\n\n// Set/change the header text\nheader.textContent = 'This is the new header';\n\nüí° The returned element is the first header h1 found in the DOM tree. The content changes only for this first header.\n\n2. Iterate over selector elements\n\nLet's say you have a list of items. Each item has a CSS class .item. You can iterate through all items by using the querySelectorAll method.\n\nconst items = document.querySelectorAll('.item');\n\nitems.forEach( item => item.style.color = 'pink');\n\n3. Create a new element in the DOM\n\n\nconst newParagraph = document.createElement('p');\n\nnewParagraph.textContent = \"This is a new paragraph added to the webpage through JS script thanks to the DOM object\";\n\n// To see it added to your web page you need to append it to an // existing element or the body\ndocument.body.appendChild(newParagraph);\n\n4. Remove an element in the DOM\n\nWhen it's already a node base reference, not an element with a parent. You need to use element.remove(...). When the element has a parent, you need to remove it as a child (like removing an li from an ul list parentelement.removeChild(...).\n\n// remove a node (element without a parent)\nconst msg= document.getElementById(\"error\");\nmsg.remove();\n\n// remove an element inside a parent element\nconst items= document.getElementById(\"items\");\nitems.removeChild(items.children[0]); //remove the first child\n\n5. Change the style (CSS)\n\nconst element = document.querySelector('p');\n\nelement.style.color = 'lightgray';\nelement.style.backgroundColor = 'black';\nelement.style.padding = '10px';\n\n6. Hide or show elements\n\nFor this purpose, we'll take advantage of the element style by changing the display property. You can use the visibility property as well, but it won't hide the whole element. It will only hide the element's content, and its place remains the same.\n\nconst header = document.getElementById('myheader');\n\n//hide\nheader.style.display = \"none\";\n\n//show\nheader.style.display = \"block\"; // or any other value based on what you need to see\n\nYou can make it looks as if there is a ghost üëª playing with your web page with the setYimeout():\n\nelement.style.display=\"none\";\nsetTimeout(() => {\n  element.style.display=\"block\"; // show after 5 seconds\n}, 5000);\n\nThere are endless things we can do with the DOM! You need to google it. You'll find the proper method to achieve your client's needs.",
    "link": "https://medium.com/p/13959986300"
  },
  {
    "id": "e33fb235e81d",
    "content": "How to Select DOM Elements\n\nWith the magic of the Selectors API\n\nHi there üëã\n\nOur HTML code becomes a DOM object once loaded on the browser. The DOM object allows us to select the web page content through a JS script.\n\nThe DOM is so interesting since you can do magical things such as showing a part of your web page or hiding it based on a condition, a click, or whatever you want.\n\nThe ability to manipulate the DOM (web page content) is possible thanks to the selectors API. Without these selectors, we would use the DOM document object to get the root node and loop over the whole tree. Imagine doing that each time you need to access an element.\n\nThankfully, there are selectors API that makes retrieving an HTML element like a kid's game.\n\nThe most used selectors are querySelectorAll and querySelector. So let's focus on them.\n\nExamples\n\nLet's say we want to select all warning paragraphs in the DOM. Let's say each warning paragraph has a class warning. Here we are going to use the querySelectorAll of the document object.\n\nconst warningParagraph= document.querySelectorAll(\"p.warning\");\n\nWhat if you want to select only one specific element? In this case, we need to identify this element with a unique ID. The element must have an id value and use it to select it with querySelector in the JS script like the following: identifier\n\nconst identifierEl= document.querySelector(\"#identifier\");\n\nWhat happens if no element(s) correspond(s) to our selectors (p.warning, #identifier)?\n\nIn this case, the result is null.\n\nüí°Other very known methods are:\n\ndocument.getElementById(\"idhere\"), and document.getElementsByTagName('div'). Note the difference between these methods. You don't need to add the sign of the identifier # like it's the case with querySelector.\n\nAs you can see, the only thing you need is to know how to select the HTML element. If it's with an id, you suffix the id with #. If it's with a CSS class, then suffix with .. Learn more about HTML selectors here:\n\nThe next article is about manipulating the DOM by using these selectors üòâ!",
    "link": "https://medium.com/p/e33fb235e81d"
  },
  {
    "id": "fa76e21b4213",
    "content": "6 Tips to learn programming faster!\n\nLearn programming efficiently and smartly!\n\nHi there üëã\n\nThis weekend's tips are about how to learn programming fast. I'm always obsessed with learning efficiently. To learn English, I've set a plan to do it in one summer, and I'm so glad because my plan worked and was so efficient. This is my little story about learning English if you are interested:\n\nThe same goes for learning a tech or programming in general. This article is about the tips I have learned so far!\n\n#1- Invest in yourself\n\nWorking hours alone won't work your efficiency and performance. Professional projects are not enough to make you efficient at your work. Investing in yourself has 3 benefits: you become a better you with time, you work your brain muscle and strengthen them, and you make a difference among ordinary developers. Therefore, you can ask for a better salary because you've already upgraded your skills and you deserve it!\n\n#2- Create short goals\n\nThe moment you decide to invest in yourself, you'll need some guidance to avoid being lost after your first days of investment. Like building habits, strengthening your skills starts with small steps. Setting short goals will help you see the global vision and the direction your path or goals lead to and adjust before starting. These small steps are also helpful. After each accomplished goal, your self-confidence grows!\n\n#3- Code a lot\n\nWhen you copy/paste a code that works and solves your problem, try to understand it and write it in your style. If you love how a project is implemented, analyze the code, close it, and start implementing by yourself. Create small apps, experiment, clone websites ...etc.\n\nJust keep your hand on the keyboard and do things! It's like learning a new language. You need to keep hearing it and speaking it. In the beginning, you won't understand everything you hear, but you'll learn that language so fast than any other method.\n\n#4- Read code, ...a lot of code\n\nNothing will enlarge your vision better than learning others' visions. There is an excellent way to do that, read code on Github. See how an open source project is implemented, its structure, the architecture, and the whole code. Observe with a curious and critical eye at the same time.\n\n#5- Learn how to debug efficiently\n\nDebugging helps you understand how the code runs, what it does, ...etc. Debugging with messages is not enough. You need to update your debugging skills by learning how to use debuggers systems, dev tools, ..Etc.\n\n#6- Respect your efforts\n\nLast but so important. Learn to respect your effort. If you are okay with yourself, you'll stick to your plan, feel motivated, and stay disciplined. When you're not okay with yourself, people tend to give up when they are on the right path. Respecting your effort, whatever your progress was (good or bad), will make your unconscious self works with you, not against you.\n\nMore tips?",
    "link": "https://medium.com/p/fa76e21b4213"
  },
  {
    "id": "9fb1a3ed736f",
    "content": "What are the DOM and BOM?\n\nOpening the BOM and DOM chapter...\n\nHi there üëã\n\nWe've completed so far the HTML, CSS, and JS chapters in the 2022 Web Program. Things will get more exciting since we'll use all these skills on the BOM and the DOM!\n\nBut before that, you have to know about the BOM and the DOM first!\n\nThe BOM (Browser Object Model)\n\nBOM = the browser object\n\nThe BOM is the window object that represents a window in the browser. An object of the window is created automatically by the browser.\n\nThe power of the BOM\n\nWith the window object, you can:\n\nManipulate the browser window with the window object and things like scrolling, opening a new window, closing the current window, ..Etc.\n\nUse the object document property to interact with the DOM.\n\nGet the browser history with the history object.\n\nManipulate the screen with the screen object.\n\nGet and do things with the location object.\n\nThe DOM (Document Object Model)\n\nDOM = The whole content of the web page\n\nThe DOM consists of the document node which represents the content of the page. You can manipulate it using javascript.\n\nThe document object represents the whole HTML document. When an HTML document is loaded in the browser, it becomes a document object, and you can use document object to manipulate the web page.\n\nThe power of the DOM\n\nThere are a lot of things we can do with the DOM object. You'll be able to pick an HTML element and manipulate it in your JS script.\n\nChange an element text.\n\nChange an HTML element color.\n\nHide and show elements\n\nMake an HTML elements listen to an event\n\nAnd much more...\n\nNow that you can differentiate between the BOM and the DOM. Let's manipulate the web page in the next article by learning how to select HTML elements.",
    "link": "https://medium.com/p/9fb1a3ed736f"
  },
  {
    "id": "e38a3ca1612c",
    "content": "Congrats to JS Chapter finishers!\n\nRecap of all that you've learned so far about JavaScript!\n\nHi there üëã\n\nAnother chapter badge earned? Congrats üéä! For new readers, this article is a part of the 2022 Web Program to learn more:\n\nOur JS stories had achieved their ending. Here is a recap of all that we have learned so far!\n\n‚Üí Asynchronous code\n\n‚Üí 'This' keyword\n\n‚Üí Variables\n\n‚Üí Scopes & hoisting\n\n‚Üí Operators\n\n‚Üí Closures\n\n‚Üí Higher-order functions\n\n‚Üí Objects & methods\n\n‚Üí Arrays, Set & Maps\n\n‚Üí Functions & arrow functions\n\n‚Üí Timeouts & intervals\n\n‚Üí Destructuring & Spread\n\n‚Üí Callbacks\n\n‚Üí Promises\n\n‚Üí Async, await\n\n‚Üí Modules\n\n‚Üí Classes\n\n‚Üí ES6+ syntax\n\nWith these skills, you'll be able to do incredible things. The next chapter will be the BOM & DOM. We'll gather what you learned so far from the HTML chapter, CSS chapter, and JS chapter to do exciting things! So stay tuned üòâ\n\nBOM & DOM Chapter\n\nElement selectors\n\nManipulating the DOM\n\nIterating Nodelist\n\nAttributes & style manipulation\n\nAjax & Fetch\n\nEvent bubbling & delegation\n\nEvent loop\n\nShadow DOM\n\nAPIs",
    "link": "https://medium.com/p/e38a3ca1612c"
  },
  {
    "id": "cbd2a1cf423b",
    "content": "ES6+ Most Essential Features\n\nLearn how to use the best of JavaScript.\n\nHi there üëã\n\nI added this article to the JS chapter because we tend to look over the internet and StackOverFlow and copy/paste a solution that works indeed but is often written with the old JS. Thus, you lose the power of the new JS features added to JS so far.\n\nI started especially from ES6 because this is where JS gets more interesting! These new awesome features make your code modern, readable, and do things in less code.\n\nI won't go through everything in ES6+ to make it light for you. I'll show only the most relevant and most used things.\n\nArrow functions\n\nLearn more about arrow functions:\n\nDefault function params\n\nBacktick '`' or template strings\n\nDestructuring\n\nArrays\n\nObjects\n\nLearn more about destructuring:\n\nObject property assignment\n\nLearn more about JS objects:\n\nSpread operator\n\nLearn more about spread operators:\n\nPromises\n\nLearn more about Promises:\n\nAsync Await\n\nLearn more about async/await:\n\nJS Modules\n\nExport\n\nImport\n\nLearn more about JS Modules:\n\nNew exciting features are coming next month (June 2022) for new features I'll cover that in another article. Till then, stay tuned üòâ",
    "link": "https://medium.com/p/cbd2a1cf423b"
  },
  {
    "id": "4d24f838d439",
    "content": "7 Tips towards your expert developer\n\nBuilding your future expert self starts now!\n\nToday's tip is about building your future expert self as a developer or a programmer. These tips are inspired by my junior developer errors and changes I have made so far and from what I noticed and learned from other developers I worked with.\n\nDear instagramers, if you like my work, you can copy it but please add the source. It takes time and effort to brainstorm ideas and an article's topic so that my reader won't lose his/here precious time. So please respect my effort and my time too!\n\nLet's start our tips story üòâ\n\n#1- Tendance and social media\n\nDon't blindly follow whatever the social media talks about. It is good to know about the existence of a technology and why they are talking so much about it. It doesn't mean you must learn it, though. There are 50% chances that it's a good idea to learn it, and 50% you'll waste your time.\n\nThink before you react\n\n#2- Google it first. Ask later\n\nThis happens so often at work. Asking why something doesn't work, what an error means, and how to solve it. You ask the tech lead, and he/she sends you a StackOverFlow link üòë. You feel so stupid at that point. It all happened to us. No worries! The solution:\n\nTry your best to solve it, and understand the problem/error. If after 30min or 1 hour you didn't solve it, ask for help.\n\nDon't be ashamed or destabilized. We all need help, even experts!\n\n#3- Plan it before coding it\n\nStarting a user story without analyzing how you'll implement the solution will lead to 2 main things: rollback because you forgot a functionality or realize that your implementation is not good. Better ideas will pop up later, and it will be too late because you've already consumed the user story estimated time.\n\nI always recommend starting with a pen and a paper! If you want tips about improving your logic of coding, here is what you're looking for:\n\n#4- Understand rather than memorize\n\nI'm one of those developers that don't memorize all syntaxes by heart. Because how does it work? Why does it work? Is there a better, cleaner, clearer, and optimized option? Is my priority.\n\nSyntax changes because we are in a race of technology. The way we created functions years ago in JS changed to arrow functions and so on. I don't say you shouldn't memorize syntax, but over memorizing may make you skip the most important step, understanding it!\n\nUnderstand the code\n\n#5- Documentation first, other resources second\n\nWhen I first started coding, Google was my best friend, and StackOverFlow was my best website. This is not the proper process/order. A technology's documentation is the best source of truth. It's updated, it's detailed with the best options you can use to solve your problem.\n\nGoogling comes later if the documentation is incomplete and doesn't respond to your question.\n\n#6- Code it in a way you'll be proud of it\n\nWe all start with making an app work. We all started by creating a hello world app. That shouldn't stay for life like that. You should upgrade to the next level. Making your code work + high quality.\n\nThere is no best code or perfect code, though. Why? Read your own code of one year ago. You'll notice that you can improve it. That will repeat each time because the experience will forge your personality, your critical sense, and your technical skills.\n\nSo when writing your code, write it with the following intention:\n\nMake it work, make it clear, clean, understandable by other developers, and optimized for better performance.\n\n#7- Find your one strong technical skill\n\nNowadays, the technology race doesn't stop. Will you learn all the new techs? You'll never be an expert like that. I'd rather have a general culture about new techs and not learn everything the social media keeps talking about.\n\nThere is a risk, though! To survive in this domain, you need to update your skills based on the market needs. Otherwise, you'll end up without a job. The key idea here is to make sure you know the tech in demand on the market and keep mastering it. When the market \"needs \"changes, react to it and learn the new tech that you judged has a higher potential for the future.\n\nIf you don't plan to quit your current country, check its market demands. How? By reading offers and analyzing the offers you receive on your LinkedIn (if you have one, I recommend having one).\n\nIf you aim the world's market, check websites that analyze each year what are the techs in demand that keep growing. The number of tech downloads can give you a general idea too.",
    "link": "https://medium.com/p/4d24f838d439"
  },
  {
    "id": "82b1093d1362",
    "content": "Classes in JavaScript: Yes, JS Does Have Classes!\n\nWhat are classes in JS? Classes are templates for JavaScript objects.\n\nHi there üëã\n\nIt's about classes this time! If you're already familiar with OOP or Java, this article won't teach you anything new. You may want to skip it! Otherwise, let's get this together!\n\nWhat's JS Class?\n\nJS classes were introduced in ECMAScript 2015. And they are simply:\n\nClasses are templates for JS Objects.\n\nüíªExample\n\n‚Üí Creating a class\n\nTo create an object in JS, you have a few rules to respect here:\n\nA constructor is necessary if your class has properties. Otherwise, JS will automatically create an empty one, so it is unnecessary to add it explicitly.\n\nClasse constructor has the exact name constructor.\n\nTo initialize the class, use the constructor.\n\nTo define class methods, you'll need to add them inside the class. Class methods are just ordinary JS methods.\n\n‚Üí Using a class\n\nFind the code here.\n\nüí°Keep in mind\n\nJS Class =/= JS Object.\n\nJS Class = template for JS objects.\n\nThe constructor method is called automatically when a new object is created.\n\nIf no constructor is defined, JS will automatically create an empty.\n\nIf a class has properties, you'll need to create a constructor to add them.",
    "link": "https://medium.com/p/82b1093d1362"
  },
  {
    "id": "e876937e3206",
    "content": "Break your app into boxes!\n\nModules in JavaScript\n\nHi there üëã\n\nIt's time for an essential knowledge you'll need for your development. Modules in JS!\n\nüí£ The problem\n\nIn real life applications, the number of code lines grows and keeps growing. Putting all in one single file is just impossible to maintain and read.\n\nThe organization is the key to fixing this problem. And that's the Module's job.\n\nSolution: JS Module\n\nModule is a file that exports code\n\nModules are used in an app to separate codes into separate files based on their functionality.\n\n- Module content\n\nJS Module may contain variables, objects, functions, classes ...etc.\n\n- Module usage\n\nTherefore, inside the main program, when you need a specific functionality, you just need to import it from the Module (file) dedicated to that functionality or task.\n\nFind the source code of the example above here:\n\nA module can export its code in different ways:\n\nName export\n\nDefault export: with the default keyword, you don't need any name. You name it as you like:\n\nDefault + named export\n\nList export\n\nRename import\n\nRename export\n\nImport All\n\n‚ûï Module based app benefits\n\nBetter maintainability\n\nOrganization and readability\n\nThe app becomes tree shakable. You import what you need, and shake off the rest, which leads to a smaller bundle size thus, better performance.\n\nModules allow you to break up your code into separate files (like puzzles).\n\nLess debugging headache for developers üòâ",
    "link": "https://medium.com/p/e876937e3206"
  },
  {
    "id": "b0f5133e14ae",
    "content": "Making Async code looks like Sync code in JS\n\nAsync/ await in JavaScript\n\nHi there üëã\n\nSo far, you have learned about callbacks and promises. Now, it's time to learn the newest way to do async programming in JavaScript: async/ await.\n\nToday's story is about asynchronous programming in JavaScript. Years ago, to manage asynchronous operations in JS, developers used callbacks.\n\n- Callbacks limitation\n\nAs I explained in the Callbacks article, this approach has its limitation. In real life complex use cases, you'll be at some point faced with the pyramid of doom or the callback hell:\n\n- Promise limitation\n\nES6 introduced the JS promises that allows you to write asynchronous code in more manageable ways to avoid the callback hell. That's what we learned in my previous article:\n\nThis approach is perfect, but when you have a use case that does a lot of promise chaining (need to complete an action before launching another, and so on...), the code becomes long and unreadable.\n\nüî• - Async/ await power\n\nES2017 introduced the async/await approach. It's also a promise-behavior-based. With this approach, we avoid the need to configure promise chains explicitly. The code becomes, therefore, more readable and straightforward.\n\nWhat you need to know about Async/await\n\nasync/ await starts with the keyword async. The code inside the function becomes eligible to use the keyword await. The await keyword gives the illusion that it freezes the time and the code execution. It is used in front of a promise. It will wait until the promise is done. Get the result of the promise and executes the following line of code.\n\nIt's an asynchronous operation, but with async/ await you feel as if it's synchronous.\n\nüíª Example\n\nüíª With promise:\n\nBoth code example are readable, nah?\n\nIndeed, in this case, it's wiser to use promise to solve this use case. Let's see when it's more interesting to use async/ await approach.\n\nAsync/await vs. promise\n\nUse case:\n\nLet's say we want to get the student after then, get his rights, and after then, get the course he is eligible to have access to.\n\nüíª Promise approach:\n\nüíª Async/await approach:\n\nIn the promise example, we need to keep chaining .then() function until we get the information/data, we need. Whereas in the async/ await solution, you'll know right away that we get the student, then the rights, then the coursesList right away!\n\nImagine if the process is longer (more .then() chaining) ... that's when async/await is a wiser choice!\n\nThe async/ await makes an asynchronous code looks like a synchronous code and makes the code look intuitive and quickly readable.",
    "link": "https://medium.com/p/b0f5133e14ae"
  },
  {
    "id": "308fd1f5eeb6",
    "content": "4 Best JavaScript Email Libraries\n\nResources for sending emails in your JS app\n\nHi üëã\n\nIt's time for the weekend's tip! Emails are part of our daily tasks and habits. This article is about the best libraries you can use to send email in your app. Save this article. Who knows, you may need to send email through your app one day üòâ\n\nLet's start!\n\nNodemailer\n\nNodemailer is a module for Node.js applications to allow easy as cake email sending. The project got started back in 2010 when there was no sane option to send email messages, today it is the solution most Node.js users turn to by default. - Official website\n\nLearn more:\n\nEmailJS\n\nA quick and simple way to get a good understanding of EmailJS is to follow our \"Contact Form\" tutorial that covers all the fundamentals of EmailJS. The tutorial will guide you through building a contact form that sends the content of the form to your email. - Official website\n\n3 main steps:\n\nConnect your email service\n\nCreate email template\n\nSend email from JavaScript\n\nPostmark\n\nPostmark helps deliver and track application email. In a nutshell, the service replaces SMTP (or Sendmail) with a far more reliable, scalable and care-free environment. In addition, you can track statistics such as number of emails sent or processed, opens, bounces and spam complaints. - Official website\n\nMailslurp-client\n\nSend and receive emails from unlimited custom email addresses in code and tests. MailSlurp is the leading email API for developers, QA testers, and email marketing teams. - Official website",
    "link": "https://medium.com/p/308fd1f5eeb6"
  },
  {
    "id": "e0039fe341ba",
    "content": "How JavaScript promises you!\n\nPromises in JavaScript\n\nHi there üëã\n\nThis article is one of the most important articles among all articles of the JS chapter in the 2022 Web Program. The callback and promise are keywords you need to master because you'll be using them everywhere, in every app and project.\n\nSo, let's get it!\n\nPromises\n\nI promise I'll answer you!\n\nA promise in JavaScript is used for asynchronous actions. Witch means not completed right away. It will take time to give you a response.\n\n1- When to use Promises?\n\nWhenever you have an asynchronous operation (for example, you need time to get the result from the server, the operation is not synchronous).\n\nPromise is a good solution for asynchronous operations. Since a promise is an object that can encapsulate the result and tell you when it's ready so that you can pass it to the other operations that need the result.\n\nJust like humans, we give a promise but we are not sure, we will fulfill it.\n\nWhen you call a promise, it launches the asynchronous operation. Wait until the result is ready. For example, the result can be our data returned from the server (success = promise resolved) and can also be an error returned from the server (failed = promise rejected).\n\n2- The promise syntax\n\nThe promise syntax is intuitive and human friendly üòú\n\nHow you create a promise:\n\nresolve and reject are callbacks. To learn more about callbacks:\n\nHow you use a promise:\n\nExplanation\n\nüíª Examples\n\nUse case: we want to fetch products and take only the products available in the stock.\n\nExample 1\n\nIn the following example, I'll be using the setTimout() event so that I can simulate the delay of a server call and response.\n\nIn real life tasks, you don't use setTimout() to get the request's response, you have other ways, such as the fetch API:\n\nExample 2:\n\nWe want to fetch products and take only the products available in the stock.\n\nIn this example, we are using the fetch API, which is already a promise, so we can call the then function. If we got the product from the backend, the promise is resolved, and we got our products. If not, then reject the promise with an error.\n\nüí° What's good about promises!\n\nA promise always returns another promise. So you can chain .then() function. This is super helpful when you need to use a result of an asynchronous operation for another asynchronous operation and so on:",
    "link": "https://medium.com/p/e0039fe341ba"
  },
  {
    "id": "9cdb74aafca3",
    "content": "Call me back later in JavaScript!\n\nUnderstanding Callbacks in JS\n\nHi there üëã\n\nThe callback keyword is something you will hear and talk about in your daily tasks. You need to understand callbacks because you'll be hearing and using them everywhere, in every app and project.\n\nThis article, as well as the next 2 articles, are one of the essential articles among all articles of the JS chapter in the 2022 Web Program.\n\nSo, let's get it!\n\nCallbacks\n\nI'll Call you back later\n\nA callback is a function or code that you pass into another function as an argument to execute it later.\n\nWhy do we need callbacks?\n\nIn real-life use cases, we need to do some actions after finishing an action. For example, you need to take a shower üöø after working out üí™. The order is important here. In an app, you need to display a loader (action 1) and when data is ready, remove the loader and display data (action 2).\n\n- Callback approach\n\nA callback function can solve this problem, and here is how:\n\nIn the example, we have:\n\nThe loadProducts() function that has as param a callback (a function).\n\nThis function is not executed right away.\n\nWe use after then the setTimeout() function to simulate the fetching time from the server.\n\nAfter the fetch of data (after 1 second simulated by the setTimeout), run the isLoading(false) to stop the loader.\n\nIf you want to learn more about the setTimout():\n\n- Where developers get confused!\n\nWhen you first start learning about callbacks, you may ask why do we need this mechanism when we can simply call first the startLoader() , followed with loadProducts(), and finally, with stopLoader().\n\nTo understand why you must know about the event loop:\n\nThe event loop makes the code asynchronous. Making the code asynchronous will make your app interactive and do multiple things simultaneously. Otherwise, for each action, the whole app will freeze until the action is done, and that's terrible for the user experience.\n\n- Alright, coming back to my loader example\n\nLaunching the loader will work right away. There is nothing to process so the loader will be displayed quickly.\n\nLoading the data will take time. Since you make a request to the backend, the backend will launch database queries, get the response and send it to you (we simulated this time by using the setTimeout() function).\n\nWhen you call loadProducts(), the action is triggered (it's asynchronous), and the app won't stop there. It will continue to launch other actions. So the next code will be executing stopLoader(). The loader is removed, but data are not done loading. That's a problem!\n\nA callback function will solve the problem. With a callback, you can fetch data, and only after that action is done (data received from the backend) can you stop the loader.\n\nLimitations of Callbacks\n\nIn real-life cases, you may need to launch actions sequentially. Using callbacks for this is not pertinent since it will work but with the app growing and complexity growing, scaling is not something that goes with callbacks. This problem is known as the pyramid of doom or the callback hell.\n\nThat's where Promise and Async/await are vital! That will be another episode of the JS chapter that you will learn in the next articles. Till then, stay tuned üòâ\n\nüí° Takeouts\n\nA callback is a function passed into another function as an argument to be executed later.\n\nThe function that has a callback (function) as a parameter is called a higher-order function. To learn more:",
    "link": "https://medium.com/p/9cdb74aafca3"
  },
  {
    "id": "d33e575ff8e6",
    "content": "6 tips to improve your logic in coding\n\nHow to enhance coding skills?\n\nHi there üëã\n\nThis weekend's tip is about how to enhance your coding skills. Let's start!\n\nDear instagramers, if you like my work, you can copy it but please add the source. It takes time and effort to brainstorm ideas and an article's topic so that my reader won't lose his precious time. So please respect my effort and my time too!\n\n#1- Pen & Paper\n\nWork out the solution by using the old way of pen & paper. Trust me. There isn't better than that. Brainstorming starts with drawing and writing big guidance, steps, and things you need for your final solution.\n\nStarting coding write away will make you lose your time either because you'll need to redefine another solution or forget a case or something.\n\n#2- Coding a lot\n\nCoding a lot, there is no good or bad code. Why? Because while you keep learning, you discover that your old code isn't good, so you write a better one, and so on. Learning by coding a lot will work your logic mascle and your coding level.\n\n#3- Code review by other developers\n\nThis is very known with the agile methodology. But even if your team isn't using this methodology, having someone to read your code will give you things you'll never get by yourself. Why? Because you can't have others' opinions, experiences, and what they have learned so far ...it's a whole life you'll only get by collaborating with others and reading other code too.\n\n#4- Learn new things\n\nLearning will enlarge your vision, and this is really important. Having in mind new techniques, new technologies, and how a solution is implemented will inspire you and give you ideas to solve problems efficiently and smartly.\n\nThis is the most valuable tip I can give you! This is also an important quality to have as a developer. Learn more here:\n\n#5- Consistency rather than motivation\n\nCoding once will not improve your skills. Working out your mascle will not make them bigger and stronger. Only when you are consistent, do you build things. That's true for everything, even changing something you don't like in yourself.\n\nMotivation never lasts. Only consistency and discipline do.\n\n#6- Face Problem headon\n\nJunior developers often avoid taking challenging and complex tasks or user stories. Whereas these are the best opportunities where you can learn, build vital skills, and be different.\n\nIt's good to start with easy tasks to gain self-confidence. But staying in your comfort zone will make you an ordinary developer and not unique.\n\nStarving for more tips?",
    "link": "https://medium.com/p/d33e575ff8e6"
  },
  {
    "id": "d9260a725c99",
    "content": "Destructuring & Spread syntax in JS\n\nHow to use Array/Object Destructuring\n\nHi there üëã\n\nSo far, you have learned about objects and arrays. It's time to learn about some practical and useful syntax/operators you will see and frequently use in JS code with objects and arrays.\n\nLet the story begin!\n\nObject Destructuring\n\nDestructuring is taking values from arrays or objects properties and set them as local variables.\n\n‚Äî The old way\n\n// Array example\nconst techs= [\"React\", \"VueJS\", \"Angular\"];\nconst tech1 = techs[0];\nconst tech2 = techs[1];\nconst tech3 = techs[2];\n\n// Object example\nconst blog = {\n   name: \"web stories\",\n   type: 'web dev and tips\",\n}\n\nconst blogName= blog.name;\nconst blogType= blog.type;\n\n‚Äî The new way with object destructuring (less code)\n\n// Object example\n\nconst blog = {\n    name: \"web stories\",\n    type: \"web dev and tips\",\n}\n\nconst {name, type} = blog;\n\n// Creates 2 local variables (blogName and blogType) and set them\n// respectivly to blog.name value and blog.type.\nconsole.log(name); // Outputs: Web stories\nconsole.log(type); // Outputs: web dev and tips\n\nThe advantage of array/object destructuring\n\nWith object destructuring, we can do things in one line. By surrounding each variable in curly brackets {} for objects and [] for an array. New local variables will be created automatically.\n\nSpread syntax (...)\n\nSpread syntax (...) is another helpful syntax you'll be using in your everyday tasks as a JavaScript developer. This syntax is used with arrays, objects, and function calls.\n\nThe spread syntax is used to expand or spread an iterable or an array. This is useful for making shallow copies of data structures and manipulating data.\n\n‚Äî Old way of concatenating arrays\n\n// Create an Array\nconst tools = ['vscode', 'chrome devTool']\nconst otherTools = ['React DevTool', 'Angular devTool', 'Marinara', 'ColorZilla']\n\n// Concatenate tools and otherTools together\nconst allTools = tools.concat(otherTools)\n\n‚Äî New way of concatenating arrays\n\nWe can do the same thing with the spread operator:\n\n// contcat both arrays\nconst allTools = [...tools, ...otherTools]",
    "link": "https://medium.com/p/d9260a725c99"
  },
  {
    "id": "d44c24ed8641",
    "content": "Timing Events in JavaScript\n\nTimeouts & intervals in JavaScript\n\nHi there üëã\n\nDid you hear about timeouts and intervals in JavaScript? This time we'll talk about timing events in JavaScript.\n\nWe've already talked about the window object in the previous articles.\n\nThe window object represents an open window in a browser and give you access to functionalities and properties of the window.\n\nThis object allows the execution of code at specified time intervals. There are 2 methods you can use for timing events in JavaScript:\n\n‚Äî setTimeout\n\nsetTimeout(function, milliseconds) : Executes a function or a code snippet once the timer expires.\n\n‚Äî setInterval\n\nsetInterval(function, milliseconds) : Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.\n\nGood to know...\n\nYou can stop the execution of a setTimeout() by calling the clearTimeout() method.\n\nYou can stop the execution of a setInterval() by calling the clearInterval() method.\n\nThe setTimeout() and setInterval() are both methods of the HTML DOM window object.\n\n1000 milliseconds = 1 second.",
    "link": "https://medium.com/p/d44c24ed8641"
  },
  {
    "id": "2c65f2357a5e",
    "content": "8 Essential Personality Traits for a Developer\n\nQualities for a successful developer\n\nAre you new in this field? Are you starting your developer journey? Are you willing to become a better developer in the future? Are you looking for a better you?\n\nIn this article, I share the essential qualities you need in your developer journey. This is a sum up of what I learned from my mistakes and my journey till now as a software engineer.\n\n1- Puzzle solver and logical mindset\n\nA developer's job is all about solving problems. Every functionality is wanted to solve a problem or facilitate something. There is no perfect system or program. As long as we code, new things are needed, new bugs appear, and you'll have to fix them!\n\nHaving a logical and building a logical mind and strategy to be efficient at problems smartly is essential and makes the difference between developers.\n\n2- Learner and tech lover\n\nThe technology field evaluates and moves so fast. Having a learner mindset and habits is essential to maintain your skills as a developer and an attractive profile to get the best opportunities and salaries.\n\nTwo main things I can say about learning:\n\n- Learn when you are doing a new task you've never done\n\nSometimes you want to be quick and fix or develop the functionality without knowing its whereabouts. That's productive. In the long term, it's not good at all for your skills and your professional experience.\n\n- Learn based on the market needs\n\nAlways check what's going on in the market. What technologies are the most in demand? It's not interesting to learn about something unknown or wanted in your target market (e.g., your country's market and needs) unless you want to learn for fun.\n\n3- Curious\n\nBeing curious makes your learner skill stronger and funnier. You'll not force yourself every time you start learning about something. When it's funny, it doesn't appear hard, and you build a cheerful souvenir and experience!\n\nCuriosity makes this job so fun and enhances your self-confidence‚Äîbeing curious means looking behind a solution by asking how the application of a solution works deeply? Based on what the provided solution or architecture is chosen? What can be done differently to make it better? What are other innovative and brilliant techs to solve a problem (this can be answered by learning other techs and discovering new ones)?\n\n4- Self-disciplined\n\nBeing curious and a learner is not enough because these skills are often fed with motivation and a general emotional state. Motivation never lasts forever. You need to make a plan and set goals, and keep yourself disciplined whether you are motivated or not motivated.\n\nDiscipline\n\nThat's a super powerful skill in life in general. People set goals to lose weight, stop smoking, ...etc. At the beginning of every year, few stick to their goals and achieve them! Motivation is the starting point but never enough when it's not followed with discipline.\n\nOne but never twice\n\nOne error I made in the past is making a plan and not sticking to it sometimes for X reasons. Whenever it happened, it destabilized me, and I started step by step giving up the plan, thus the goal!\n\nThe solution that really made the difference for me was accepting that it's a part of the process. It will happen for sure! Change your mindset and believe it will happen. It's okay and normal if it happens, and it happens for sure for all of us without exception.\n\nThe golden rule is when you skip the program (an activity) of a day, never skip it twice. This will enhance your self-confidence and will definitely help you build good habits and achieve your goal.\n\n5- Communicator\n\nA developer has a double dimension, being autonomous at doing their task and social at the same time by building the whole app with the team.\n\nCommunication is super important because you build with others and are not alone. A part of the communication skill is your adaptability to the team and the general environment.\n\nYou need to learn how to speak to each developer based on their personality. You need to speak to your client professionally. You need to choose your words when you speak with your manager or employer.\n\nThis is not easy at all. You learn by making mistakes and recognizing them. I still learn about communication!\n\n6- Patient\n\nFrankly talking, a developer job isn't an easy thing to master. You'll face stubborn bugs, logic issues, and other troubles. Patience is so vital at work. Nowadays, it's the one must-have trait to become a successful programmer or developer.\n\nPatience is mandatory in different ways. When you are working with your client, you need it. When you work with other developers, when you work with managers, when you learn, when you fix problems, when you feel down and destabilized by a complex problem, ...etc.\n\nAll these skills are not easy to build and maintain. So being patient has a significant role in achieving your future wanted self.\n\nOne thing to keep in mind, it's like a roller coaster, there is downs and ups, and you to be resiliante.",
    "link": "https://medium.com/p/2c65f2357a5e"
  },
  {
    "id": "235b5ade3958",
    "content": "Arrow Functions in JavaScript\n\nFunction & Arrow Functions\n\nHi there üëã\n\nFunctions are used for a specific task and functionality. This is super important when you code so that you can separate concerns and make your code readable as well as maintainable.\n\nThe classical syntax is as below:\n\nfunction welcomeMsg() {\n  return \"Hi, welcome!\";\n}\n\n// Or\n\nwelcomeMsg = function() {\n  return \"Hi, welcome!\";\n}\n\n‚û°Ô∏è Arrow Functions\n\nThe arrow functions allow us to write shorter function syntax, and it's a modern way of creating functions in JavaScript that was introduced in ES6:\n\nwelcomeMsg = () => {\n  return \"Hi, welcome!\";\n}\n\nWe can even make it shorter when it's only returning one statement:\n\nwelcomeMsg = () => \"Hi, welcome!\";\n\nExample of arrow function with params:\n\nwelcomeMsg = (name) => \"Hi, welcome \" + val + \"!\";\n\n// Or\n\nwelcomeMsg = name => \"Hi, welcome \" + val + \"!\";\n\nThat's it! Arrow functions are essential to know as it's a popular way of declaring functions nowadays.",
    "link": "https://medium.com/p/235b5ade3958"
  },
  {
    "id": "9a13f7aa82b3",
    "content": "Data Structures in JavaScript\n\nArrays, Set & Maps in JavaScript\n\nHi there üëã\n\nThe last time, we learned about JS Objects. Now, it's time for a more modern approach to manipulating data and managing complex data structures:\n\nArray\n\nMap\n\nSet\n\nLet's get this!\n\nArray\n\nArray is used for storing ordered collections.\n\nAn array is a particular object suited to storing and managing ordered data items.\n\nWe can use an array as a deque with the following operations:\n\npush(...items) adds items to the end.\n\npop() removes the element from the end and returns it.\n\nshift() removes the element from the beginning and returns it (not recommended for performance issues).\n\nunshift(...items) adds items to the beginning (not recommended for performance issues).\n\nüíª Example\n\nlet techs= [\"React\", \"Angular\", \"VueJS\"];\n\n// Access elements\nalert( techs[0] ); // React \nalert( techs[1] ); // Angular \nalert( techs[2] ); // VueJS\n\n//Replace element\ntechs[2] = 'Svelte'; // now [\"React\", \"Angular\", \"Svelte\"]\n\n//Add new element with push\ntechs.push(\"Ember\"); // now [\"React\", \"Angular\", \"Svelte\", \"Ember\"]\n\nTo loop over the elements of the array:\n\nfor (let i=0; i<arr.length; i++) ‚Äì works fastest, old-browser-compatible.\n\nfor (let item of arr) ‚Äì the modern syntax for items only.\n\nMap\n\nMap is a collection of keyed data items.\n\nA collection of keyed data items, just like an Object. But the main difference is that Map allows keys of any type.\n\nnew Map() ‚Äì creates the map.\n\nmap.set(key, value) ‚Äì stores the value by the key.\n\nmap.get(key) ‚Äì returns the value by the key, undefined if key doesn't exist on map.\n\nmap.has(key) ‚Äì returns true if the key exists, false otherwise.\n\nmap.delete(key) ‚Äì removes the value by the key.\n\nmap.clear() ‚Äì removes everything from the map.\n\nmap.size ‚Äì returns the current element count.\n\nconst famBlog = new Map([\n    ['name', 'Web stories'],\n    ['type', 'Web developement'],\n    ['age', 2],\n]);\n\nfamBlog.set('Techs', 'React, Angular, JS, VueJS, NodeJS, ...');\nconsole.log(famBlog.has('type')); // returns true\n\nfor(const [key, value] of famBlog) {\n  console.log(`${key}: ${value}!`);\n}\n\n//Outputs\n// \"name: Web stories!\"\n// \"type: Web developement!\"\n// \"age: 2\"\n// \"Techs: React, Angular, JS, VueJS, NodeJS, ...!\"\n\nSet\n\nSet is a special type of collection of \"set of values\".\n\nA Set is for a set of values (without keys). Each value may occur only once.\n\nnew Set(iterable) ‚Äì creates the set.\n\nset.add(value) ‚Äì adds a value to the set.\n\nset.delete(value) ‚Äì removes the value, returns true if value existed at the moment of the call, otherwise false.\n\nset.has(value) ‚Äì returns true if the value exists in the set, otherwise false.\n\nset.clear() ‚Äì empty the set.\n\nset.size ‚Äì is the elements count.\n\nüíª Example\n\nlet usersSet = new Set();  \nlet user1 = { name: \"John\", email: \"john@mail.com\" }; \nlet user2 = { name: \"Pete\", email: \"pete@mail.com\" }; \nlet user3 = { name: \"Mary\", email: \"mary@mail.com\" }; \nusersSet.add(user1); \nusersSet.add(user2); \nusersSet.add(user3);\nconsole.log(usersSet);\n\n//Outputs\n// [object Set] (3)\n{// [object Object] \n{\n  \"name\": \"John\",\n  \"email\": \"john@mail.com\"\n},// [object Object] \n{\n  \"name\": \"Pete\",\n  \"email\": \"pete@mail.com\"\n},// [object Object] \n{\n  \"name\": \"Mary\",\n  \"email\": \"mary@mail.com\"\n}}",
    "link": "https://medium.com/p/9a13f7aa82b3"
  },
  {
    "id": "43f3a3de286c",
    "content": "4 Best Tips for Responsive Design in CSS\n\nMake it took beautiful everywhere!\n\nHi there üëã\n\nIt's time for the weekend's tip. This time I'll share with you the best tips to consider for a responsive web page!\n\n#1- Media Queries\n\nTo make a web page responsive, you must adapt your design based on some breakpoints. You'll have to make your page look the same for each web page width or adjust to the new width!\n\nüëâ Determine the Breakpoints the website starts looking distorted.\n\nüëâ Adapt your design by changing the CSS when a breakpoint is triggered.\n\nüëâ Make sure you test your page with different widths to make sure it still looks fine and not distorted.\n\n#2- Flex wrap power\n\nFlexbox is one of the advanced positioning systems in CSS and a must-know for every web developer. You'll find diplay: flex; everywhere!\n\nThe Flexbox system has an essential property which is the flex-wrap. This property adapts the Flexbox content automatically to the space it got. By enabling it, you'll see the elements wrap in multiple lines whenever there is no space for all the elements in one line.\n\nüëâ The big + of this tip is \"It already exists. Thus, no extra implementation in CSS is needed.\"\n\nüëâ Make sure your items are inside of a flexbox container: display: flex;\n\nüëâ Enable the wrap property for the container's items: flex-wrap: wrap;\n\nIf you want to learn about the advanced positioning systems in CSS:\n\n#3- Units for responsive design (%, rm, and em)\n\nThe px unit is wildly used in CSS, but it's not a good solution for responsive design. Always try using em, % and rem instead of px so that the element (text, img, ...Etc) adjusts to the device width.\n\nüëâ An example could be:\n\nbody { font-size:60%; }\ndiv { font-size: 2.4em; }\np { font-size: 1.4rem; }\n\n#4- Box sizing\n\nThe CSS padding property causes a lot of problems for responsive design. A box width and height in a web page are not always accurate since the element can be much bigger with the padding property that is transparent.\n\nHere comes the box-sizing property to the play. This property allows us to include the padding and border in an element's total width and height.\n\nüëâ To make padding and border included in the final element's width and height, set the box-sizing: border-box;\n\nüëâ All elements are sized more intuitively. That's why developers love this property. No surprises with it applied!\n\nüëâ It's safer and wiser to consider using the box-sizing property.\n\nThat's it for this weekend's tip üòâ ... stay tuned!\n\nLearn more with the 2022 Web Program CSS chapter!",
    "link": "https://medium.com/p/43f3a3de286c"
  },
  {
    "id": "64fa3e82765f",
    "content": "Objects in JavaScript\n\nCreating and working with JS objects\n\nHi there üëã\n\nIt's time to learn about objects and methods in JavaScript.\n\nObjects in JS\n\nIn JavaScript, an object is an unordered collection of key-value pairs. Each key-value pair is called a property.\n\nJavaScript provides you with many ways to create an object. The most commonly used one is to use the object literal notation.\n\nCreating an Object in JS\n\nAn empty object looks like:\n\nlet empty = {};\n\nAnd an object with properties:\n\nlet person = {     \n    firstName: 'John',\n    lastName: 'Doe' \n};\n\nAccessing object's property:\n\n‚Äî The dot notation (.)\n\nobjectName.propertyName\n\n‚Äî Array-like notation ([])\n\nobjectName['propertyName']\n\nTakeouts\n\nAn object is a collection of key-value pairs.\n\nUse the dot notation ( .) or array-like notation ([]) to access a property of an object.\n\nObject Methods in JS\n\nJavaScript methods are actions that can be performed on objects.\n\nconst person = {\n  firstName: \"Lara\",\n  lastName: \"Doe\",\n  fullName: function() {\n    return this.firstName + \" \" + this.lastName;\n  }\n};\n\nYou will typically describe fullName() as a method of the person object and fullName as a property.\n\nThe fullName property will execute (as a function) when invoked with ().\n\nIf you access the fullName property, without (), it will return the function definition:\n\nTo add a method to an object:\n\nperson.name = function () {\n  return this.firstName + \" \" + this.lastName;\n};\n\nTakeouts:\n\nMethods are functions stored as object properties.\n\nBuilt-In Methods\n\nThere are a lot of built-in methods in JS that are so essential in your everyday tasks.\n\nSome methods help you manipulate strings effectively, for example:\n\ntoUpperCase - return a string with all characters converted to uppercase.\n\ntoLowerCase - return a string with all characters converted to lowercase\n\nlet str = \"welcome\";\n\nconsole.log(str.toUpperCase());\n// WELCOME\n\nAnd there are so much more... in the next articles of the program, we will do exciting things with JS objects üòâ till then stay tuned!",
    "link": "https://medium.com/p/64fa3e82765f"
  },
  {
    "id": "9fb68a9c3f6f",
    "content": "What's HoF in JavaScript?\n\nWhat are higher-order functions good for?\n\nHi there üëã\n\nToday, it's about:\n\nFunctions that accept functions as parameters and/or return a function.\n\nIn JavaScript, functions are objects. Therefore, they can be assigned as the value of a variable, and they can be passed and returned just like any other reference variable.\n\nExample:\n\n// Simple function\nfunction sum(a, b) {\n   return a + b;\n}\n\n// Assign function to a variable\nconst sum = (a, b) => {\n   return a + b;\n}\n\n// Use sum function\nsum(2, 3);\n\nExample:\n\nIn the following example, we want to filter an array and keep only numbers that are superior to 20:\n\nconst data = [1, 48, 83, 9, 73];\n\nconst result = data.filter((num) => {\n    return (num > 20);\n});\n\nconsole.log(result); // [48, 83, 73]\n\nThis is a typical example of HoF since we affect a function to a variable (result). We used the array's filter function that takes as a param another function.\n\nWhy do you need HoF?\n\nHigher-order functions can bring to the table like code size reduction and re-usability and are perfect for functional programming.\n\nHere is an example with and without HoF.\n\nWithout Higher-order function:\n\nconst numbers = [1, 2, 3, 4, 5];\n\nfunction power2(array) {\n  for (let i = 0; i < array.length; i++) {\n    array[i] = array[i] * array[i];\n  }\n}\n\npower2(numbers)\nconsole.log(numbers); //[1,4,9,16,25]\n\nWith Higher-order function:\n\nconst numbers = [1, 2, 3, 4, 5];\n\nnumbers.forEach((number, index) => numbers[index] = number * number);\n\nconsole.log(numbers); //[1,4,9,16,25]\n\nAs you can see, we do the same thing with less code with the Higher-order function approach. The Higher-order function forEach() applies a function to each number of the numbers array.\n\nThere are other built-in JS Higher-order functions such as: Array.prototype.forEach , Array.prototype.map, Array.prototype.filter and Array.prototype.reduce.\n\nNote that, () => {} is the same as function(){}.\n\nHigher-order functions are also essential for callbacks. I'll come back to the keyword callback later in the upcoming articles. But, to give you a quick overview, you'll need a callback function whenever you want to do extra things after a specific task. For example, you want to get a products list from the backend, and just after getting data, you want to stop the progress bar.",
    "link": "https://medium.com/p/9fb68a9c3f6f"
  },
  {
    "id": "382ea73bee84",
    "content": "6 JS Tips for a Better Code\n\nWeekend tip: How to write better JavaScript code?\n\nHi there üëã\n\nThis weekend's tip is about writing a better JS code by considering some fundamental things while coding.\n\nLet's start!\n\n#1- Variable's naming\n\nVariable name should reveal its intent\n\nVariable name should be pronounceable\n\nVariable name should be searchable\n\nThe project's naming strategy should be consistent\n\nAvoid adding context when it's already expressed, for example:\n\nconst customer = {\n   cutomerName: \"Lara\",\n   customerAge: 28,\n   customerAddress: \"XXX\",\n   ...\n}\n\nWe already know that we are talking about customers here, so we don't need to add this context; otherwise, it will be redundant:\n\nconst customer = {\n   name: \"Lara\",\n   age: 28,\n   address: \"XXX\",\n   ...\n}\n\nLearn more here:\n\n#2- Function's naming\n\nThe same for function. Its name should describe what it does.\n\nAvoid using general keywords alone: toggle() => toggleDarkMode(). change() => handleChange().\n\nNaming consistency: handleAddUser() vs. addUserHandler(). A team should have one naming strategy and stick to it for a homogeneous code.\n\n#3- Less function arguments\n\nWhen you have more than 3 arguments, you may want to consider creating a config variable to switch from a function with 3 arguments to a function with a single argument.\n\nThe config variable is explicit and explained itself by more than 3 arguments passed to a function.\n\nwriteFile(name, content, status, errors) = { // add logic here};\n\n// To =>\n\nconst fileConfig = {\n   name: \"queries.sql\",\n   content: \"....\",\n   status: \"Ready\",\n   errors: \"...\"\n}\nwriteFile(fileConfig)\n\n#4- No complex functions\n\nFunction serves one task. That's the rule you should keep in mind. Whenever a function does many things, this is a sign that you should split it.\n\nAlways consider the SoC concept (Separation of Concerns)\n\nWrite a function based on the single responsibility principle.\n\n#5- No hardcoding\n\nA well-known concept is the DRY (Don't Repeat- Yourself). Whenever you repeat a hardcoded value, this value should be declared as a constant variable and used instead of the hardcoded one:\n\nvs.\n\n#6- No over commenting\n\nComments exist to make code readable, intuitive, and quickly understandable. So when the code is already explicit and clear, you don't need to add a comment.\n\nThat's it for this weekend's tip üòâ ... which one is your favorite?",
    "link": "https://medium.com/p/382ea73bee84"
  },
  {
    "id": "99666fe36a6a",
    "content": "JS Closures\n\nWhat are JavaScript closures?\n\nHi there üëã\n\nüëâ Requirement:\n\nIf scope in JS is a new word to you, I recommend learning about it first before going further:\n\nThis concept is confusing for a lot of developers. But once you get it, you'll see that it's straightforward to understand. So please trust me and follow my explanation.\n\nExample #1\n\nconst name = \"FAM\";\n\nfunction helloMessage(){\n   console.log(\"Welcome \", name);\n}\nhelloMessage();\n\nIf you followed my article about scope in JS, you'd know that this code outputs: Welcome, FAM even though the name variable is global and doesn't belong to the helloMessage().\n\nThat's what we call a closure.\n\nA closure is created once we have created a function, and it (the closure) gives access to the outer scope of that function. The variable name comes from an outer scope and inside the helloMessage() function, we accessed it and displayed it thanks to the closure mechanism.\n\nExample #2\n\nNow, when we talk about closure, we often talk or mean functions. So, let's analyze the following example:\n\nfunction outerFunction(outerVariable){\n\n    return function innerFunction(innerVariable){\n        console.log('Outer variable: ', outerVariable);\n        console.log('Inner variable: ', innerVariable);\n    }\n}\n\n(a) const anotherFunction = outerFunction('outside'); // Execute the function\n(b) anotherFunction('inside');\n\nWe have 2 functions, the function outerFunction() which has an innerFunction() inside it.\n\nIn line (a), we execute for the first time the outerFunction() => the closure is created, remember the rule? What's outside the created function is accessible inside that function.\n\nSo logically, what's outside the outerFunction() is accessible inside the outerFunction(). Since the innerFunction() is inside the outerFunction(). The innerFunction() has access to all the outerFunction() variables as well as the global scope (outside the outerFunction()).\n\nLine (b) outputs:\n\n// Outer variable: outside\n// Inner variable: inside\n\nHow does the innerFunction() had access to the outerFunction() (value: outside) and displays it?\n\nWell, that's the closure magic! In line (a), the function outerFunction() and its innerFunction() get executed.\n\nThe innerFunction() says: okay, I'm inside the outerFunction(). And the outerFunction() has the variable outerVariable. Alright, I'm going to save this variable and make sure I know its value at all times. I need to keep track of the outerVariable.\n\nTo sum up in one phrase: Everything inside the outer scope (outerFunction) is avaialable inside the inner scope (innerFunction).\n\nBy the way, this is not possible in all programming languages. JS is able to do that üòé!\n\nSo, when you hear closure, translate it to:\n\nA closure gives me access to an outer scope from an inner scope.\n\nAnd that's it.\n\nExample #3\n\nFor JS developers that have already experience with JavaScript. Probably the most known example of their everyday tasks is the fetch() API.\n\nfunction getProducts(url){\n   fetch(url).then((data) => {\n      console.log(\"Fetched products from: \", url, \"...\");\n      // do things with returned data and return data\n   })\n}\n\nThe same thing happens here getProducts() has an inner function which is the fetch() function.\n\nThe fetch() function has access to whatever the getProducts() function has, in this example, the url variable. Whenever the getProducts() is executed, the fetch() function keeps track of the variable url.",
    "link": "https://medium.com/p/99666fe36a6a"
  },
  {
    "id": "3511c8545719",
    "content": "An Introduction to JavaScript Operators\n\nThe must-know JavaScript operators\n\nHi there üëã\n\nAfter learning about JavaScript variables, now we can do more things with them with JS operators.\n\nThere are a lot of Types of operators in JS. I'm going only through the most important ones you'll need in your daily tasks as a developer.\n\nBasic operators:\n\nYou can perform basic operations like addition, multiplication, etc. using these operators.\n\n+ - Addition\n\n- - Subtraction\n\n* - Multiplication\n\n/ - Division\n\n(...) - Grouping operator, operations within brackets are executed earlier than those outside\n\n% - Modulus (remainder )\n\n++ - Increment numbers\n\n-- - Decrement numbers\n\nExamples:\n\nComparison Operators:\n\nHere is the list of all the Comparison operators in JavaScript:\n\n== - Equal to\n\n=== - Equal value and equal type\n\n!= - Not equal\n\n!== - Not equal value or not equal type\n\n> - Greater than\n\n< - Less than\n\n>= - Greater than or equal to\n\n<= - Less than or equal to\n\n? - Ternary operator\n\nExamples\n\nLogical Operators:\n\nThe following operators are a must-know to be able to do things in JS. Here is the list of all the Logical operators in JavaScript:\n\n&& - Logical AND (If and only if all of the operands are true. Otherwise, the condition will return false)\n\n|| - Logical OR ( If and only if one or more of its operands are true)\n\n! - Logical NOT ( Converts truth to falsity)\n\nExamples\n\nType operators:\n\ntypeof: returns the type of a variable.\n\ninstanceof : returns true if an object is an instance of an object type.\n\nThe next step is Closures in JS üòâ till then, stay tuned!",
    "link": "https://medium.com/p/3511c8545719"
  },
  {
    "id": "8091063f7d04",
    "content": "6 Amazing Free APIs for Unlimited High-Quality Data\n\nThe weekend tip: build apps with real data!\n\nHi there üëã\n\nThis weekend's tip will be about where to get high-quality, live, and accurate data to use in your app and build a strong portfolio and confidence. All these resources are APIs you can call with your RapidAPI account key by subscribing to the API you want:\n\nIf you don't know what's an API, here is an express article about it:\n\nLet's get some data üòÅ\n\n1- Flight data\n\nGet flights to popular destinations and build your awesome app with it. You can get inspired by other real trip apps and build their clone.\n\n2- Coinranking\n\nThis API provides outstanding data about coins, markets, exchanges, and cryptocurrencies.\n\n3- Currency Exchange\n\nAPI for a live currency and foreign exchange rates by specifying the source and destination quotes and optionally amount to calculate. Support a vast amount of quotes around the world.\n\n4- COVID Stats\n\nWith this API, you can get Covid stats for the world and your country. You can build a covid tracker app with some charts.\n\n5- Video Games\n\nFor video games lovers, use your hobby to build a fantastic app and have fun:\n\n6- Food Data\n\nGet data about nutrition, diet, food, and meals.\n\nBonus\n\nWhat if it's the contrary? Do you already have data but not an API?\n\nThat's it for this weekend's tip üòâ ... Wich API did you like the most?",
    "link": "https://medium.com/p/8091063f7d04"
  },
  {
    "id": "12431e094103",
    "content": "JavaScript Mechanism You Should Know!\n\nUnderstand scope and hoisting in JavaScript\n\nHi there üëã\n\nOne of JS's essential concepts to understand is the hoisting. But, before learning what it is, we need to learn first about the scope in JavaScript.\n\nWhat's scope in JavaScript?\n\nScope determines the accessibility of variables inside a JavaScript script.\n\nThere are different scopes in a JavaScript program:\n\nGlobal Scope\n\nFunctional Scope\n\nBlock Scope\n\nüí° Global scope\n\nThe global scope is known as global variables and functions. A global variable or function is accessible and used inside the whole JS script.\n\nüí° Functional scope\n\nThe functional scope is known as variables declared inside a function. In this case, the scope or the area where you can use/manipulate this variable is only inside that function and not outside. These variables are called local variables.\n\nüí°Block scope\n\nA bit like functional scope, but in the block scope, the variables are declared inside a block {}. These variables are not accessible outside of the block:\n\n{ // declared here? then accessible only here}\n\nExample:\n\nNow, Hoisting?\n\nIt's a bit confusing and not easy to understand right away. But with an example, you'll be able to picture it and create a mental picture about it for life. Let's compare the two following examples:\n\nüÜö the following code:\n\nWhich of these examples works?\n\nBoth work just fine without error. So how does the first example, when we call the function before its declaration work? Well, this is possible thanks to the hoisting mechanism.\n\nDuring the compilation phase, the function's declaration is moved to the top of its scope before code execution.\n\nThe JS script declarations (functions and variables) are put into memory during the compile phase (the top level), but stay exactly where you typed them in your code.\n\nHoisting works with variables too\n\nYou can use a variable in code before it is declared or initialized. There is no error with the following code:\n\nWhereas the following code throws an error because myVariable was never declared at any place inside the script:\n\nVariables declared with let or const keywords are stored in memory as uninitialized.\n\nNext time, you'll learn about JavaScript Operators.",
    "link": "https://medium.com/p/12431e094103"
  },
  {
    "id": "fb8994ed9d0d",
    "content": "JS Variables... What you need to know!\n\nAll essentials about JS variables\n\nHi there üëã\n\nA web page without data gives simply a blank web page, Nah? üòÜ\n\nData are essential to any web app, and to be able to use data, manipulate them, to do incredible things in your app, you need variables where we can stock these data and use them when needed!\n\nLet our story begin!\n\n1- It all starts with declaring variables\n\nIn JavaScript, there are no types. The variable takes the value as it is: a number, a boolean, a string, or an object.\n\nExample:\n\nlet rating= 3;\nlet accountNumber = '135486';\nlet isAvailabe = true;\n\nOr, ...\n\nlet rating= 3, \n    accountNumber = '135486', \n    isAvailabe = true;\n\n2- It needs you to respect some conditions\n\nVariables' naming conditions:\n\nMust start with: _, $ or letter (all letters from a to z). You can't start a variable name with a number.\n\nMust be followed with: _, $, letter or number.\n\nIt cannot be a keyword. For example, we can't use the let as a variable name. The same goes for all other reserved keywords.\n\nYou can not affect a value to a variable that isn't yet declared:\n\nrating= 3; // affect 3 as the rating value\nlet rating; // the rating variable is declared later.\n\n3- It has some conventions...\n\nThe most commonly used naming convention is the camel case notation: variableName. The first world variable is lowercase, and the second Name is capitalized.\n\nUsually, the _ denotes a variable for private use. It also means in a function param, skip this param functionName(_, param2).\n\nUsually the $ signs an automatically generated variable. In the RxJS, the $ sign is often used to tell that we are dealing with observable. RxJS is an advanced topic, but if you want to learn more, here is my top list:\n\n4- It has many keywords for different purposes: const vs. let vs. var\n\nlet is used to declare a variable, you can affect or not an initial value when declared, re-affect a new value, and so on.\n\nconst is used to declare a constant. You need to affect it a value in its declaration. We can't affect a new value to it.\n\nvar old keyword used before the new keywords let, const came out. It's been since then not recommended to use var because of its problem. It cannot tell you what's going wrong on the console, and this is so confusing when debugging:\n\n// The following code doesn't show any error to tell you what's \n// going wrong\nconsole.log(rating) // shows undefined\nvar rating;\n\n\nüî• Bonus\n\nNaming best practice:\n\nNext time, you'll learn about Scopes & hoisting in JS üòâ, tell then, stay tuned!",
    "link": "https://medium.com/p/fb8994ed9d0d"
  },
  {
    "id": "5dc91d499677",
    "content": "\"This\" for developers!\n\nThis 's meaning in the web world.\n\nHi there üëã\n\nFor ordinary people, \"this\" refers to people or things. For us developers, \"this\" has a different meaning, Nah?\n\nFor ordinary people, it's a world, determinator, or a pronoun. For us developers, it's a keyword that cannot be changed.\n\nThis has different meanings, depending on the context where it is used:\n\nCase 1: this alone without a specific context.\n\nIt refers, in this case, to the global object. In the global context, the global object which is the window object on the web browser.\n\nCase 2: this in a specific context\n\n‚Äî Function context (non-strict mode):\n\nIn non-stricmode the this refers to the global object too inside the function:\n\n‚Äî Function context (strict mode):\n\nIn the strict mode, this is undefined:\n\n‚Äî Method context\n\nWhen you have a method inside an object or class, the this keyword refers, in this case, to the object itself.\n\n‚Äî DOM event function context\n\nOne of the use cases you'll be using a lot of times. An event handler is used to handle actions on an HTML element such as clicking, typing, ...etc. The this, in this case, is set to the element where the action is triggered. A button for a click event an input for type event.\n\nWe'll see more later about DOM event handlers in the following articles.",
    "link": "https://medium.com/p/5dc91d499677"
  },
  {
    "id": "7f61fe2e862e",
    "content": "Can the Web Live without Asynchronous Code?\n\nThe truth about JavaScript!\n\nHi there! üëã\n\nA new chapter, a new step in the 2022 Web Program. I'm really excited about this chapter because JavaScript is really fun. You can manipulate and make the page interactive.\n\nIt's what makes the web page alive.\n\nNow, before learning JS, you absolutely need to learn what asynchronous code is. It's really a fundamental knowledge in web development.\n\nSynchronous vs Asynchronous\n\nSynchronous can be translated to \"the real-time\", \"at the moment\", and \"one by one task\".\n\nSynchronos tasks are completed one after another.\n\nWhereas\n\nAsynchronous code can happen over a long period of time. You don't wait for a task to finish and then proceed to the next one.\n\nAsynchronos tasks are completed independently.\n\nAsynchronous code is so crucial in every web page!\n\nWondering why? Well, it's indeed confusing: why launch things in parallel and keep going? It's more simple to do things task by task (synchronous code). The thing that makes asynchronous a must in a web page is the user experience.\n\nSynchronous means one thing - when you click on a button, you can't do anything else until the button task is handled and finished. The whole program is in freeze mode and completely focused on that task. Can you imagine not being able to do anything while watching a YouTube video until it's done? That would make your experience terrible.\n\nA web page can't live without asynchronous code.\n\nI choose to open the JS chapter with the asynchronous code topic because many people think that JavaScript is all that you need to make your web page interactive. It's not true at all.\n\nWhat makes the web page interactive is the asynchronous code. And to be able to make your code asynchronous, you need two things:\n\nEvent loop + JavaScript (single-threaded) = multithreaded illusion\n\nA single thread: means one hand to use/ do one task at the moment. Yes! JavaScript can't do multiple things at the same time!\n\nWanna dig deeper?\n\nCode will come later in the next articles. You need to first understand the difference between the synchronous and asynchronous concepts to be able to code it.",
    "link": "https://medium.com/p/7f61fe2e862e"
  },
  {
    "id": "ae388d51e564",
    "content": "Recap of the CSS Chapter!\n\n2022 Web Express Program, CSS chapter\n\nHi there üëã\n\nCongrats on completing the CSS chapter! You're now able to build a beautiful website. Here is a recap of what we've learned so far from the CSS chapter:\n\nCSS Selectors\n\nBox model\n\nTypography\n\nCSS Positioning\n\nAdvanced Positioning\n\nShadows, colors, and gradients in CSS\n\nCSS transitions, transform, and animations\n\nResponsive design\n\nOther exciting things to learn about CSS\n\nThe next chapter will add some reactivity to our website! This chapter will be a bit longer than the HTML and CSS chapter. This is because JS is so essential in your web developer journey. That's why I give it two months in my 2022 web program.\n\nHere is the program for the JS chapter:\n\nWeb interactions: JavaScript\n\nAsynchronous code\n\nThis\n\nVariables\n\nScopes & hoisting\n\nOperators\n\nClosures\n\nHigher-order functions\n\nObjects & methods\n\nArrays, Set & Maps\n\nFunction & arrow functions\n\nTimeouts & intervals\n\nDestructuring & spread\n\nCallbacks & promises\n\nAsync, await\n\nModules\n\nClasses\n\nES6+ syntaxes",
    "link": "https://medium.com/p/ae388d51e564"
  },
  {
    "id": "4cdba21914e5",
    "content": "Make your web page look good everywhere!\n\nWhat makes the web so powerful!\n\nHi there üëã\n\nThis is one of the superessential steps to learn in the CSS chapter and the 2022 Web Express Program.\n\nA responsive web page!\n\nYou're asking why?\n\nThe World Wide Web was designed so that no matter what hardware you've got, no matter what operating system your computer is running. Only one thing, the internet! Internet is all that it needs.\n\nAlright, you might say: \"Hello, we're talking about the responsive design here, not the WWW!\"\n\nThe WWW made the web page accessible to the world. That's already great. But will a website be browsable without a responsive page?\n\nWhat is it if you loved the dress and you can afford it, but the boutique doesn't have your size (It happened to me several times, by the way, üò©)\n\nThe web's power is indeed its accessibility to the world. But, people use desktop computers, laptops, tablets, foldable phones, cars, and much more! If you have to make a website version for each of these, no one will do it! It's too much money, maintenance, and pain in the ass.\n\nPeople expect to see the web page look the same, good, usable (interactions) no matter their device.\n\nOf course, a responsive design came after many other tentatives of different techniques, the only solution that made the job is the responsive design and the proof is that we still use it. It's a must for every web page nowadays since the variety of devices is just endless.\n\nThe keyword for responsive design in CSS is Media Queries! And that's our today's story ^^\n\nWhat's a media query?\n\nSimply put, media queries are a CSS tool that, given some conditions (device's type, screen resolution, ...), will apply/adapt style to make it the same or different but still looking good and works! (By the way, you can have a stylesheet for the mobile version and another for the desktop version.)\n\nI worked years ago on the PEPS app for Paris users. Our client asked for two design versions, one for mobile with a specific design and another for the desktop version.\n\nFor users, it's a different app or page, but technically We don't change the page. We apply another style!\n\nThe app is online and looks like this:\n\nNow, that's good, but how to does it work!\n\nThe CSS rule (it came actually with CSS3) is @media rule. What it does is simply include some CSS code if a specific condition is true.\n\nSyntax\n\n@media type and (feature)\n\nExample\n\nThe condition: When the screen width is less or equal to 600px.\n\nThe new style: Display blocs in columns and change the width and color of the blocs.\n\nIn terms of CSS\n\n@media only screen and (max-width: 600px) {\n\n/* The new style when the condition is true */\n\n}\n\nResult\n\nHave you noticed how CodePen also reacts when the screen width changes? It closed all tabs and hid some buttons of the header.\n\nThe code (CSS)\n\nThe code (HTML)\n\nAs you can see, we adapt or change the style. When the condition is valid, the CSS of the media query is prioritized and applied right away. The whole code: here.\n\nAnother example\n\nLandscape mode\n\n@media all screen and (orientation: landscape) { /* style for landscape */ }\n\nPortrait mode\n\n@media all screen and (ortientation: portrait) { /* style for portrait */ }\n\nWhat a headache if we do this to all the pages, right?\n\nFortunately, nowadays, the web is more advanced than ever. Some frameworks do the job. All you need to do is learn about its classes and pick the right one when you need it.\n\nOne of these frameworks is the famous Bootstrap!\n\nWith Bootstrap, it's infrequent when you'll need to add custom media queries to your style.\n\nGood to know\n\nEveryone has his way of organizing things. For me, if the style code is not negligible, I prefer to use a separate file. First, the developer will understand that that file is for landscape, for example, and the other for the portrait. Second, it will definitely make the main style file readable and make the app style easy to maintain. Here is how to do this:\n\n<link rel=\"stylesheet\" href=\"landscape.css\" media=\"all and (orientation: landscape)\">\n<link rel=\"stylesheet\" href=\"portrait.css\" media=\"all and (orientation: portrait)\">",
    "link": "https://medium.com/p/4cdba21914e5"
  },
  {
    "id": "b9906310f1c2",
    "content": "üé¨CSS in Action: Yes, CSS can Move without JavaScript!\n\nTransitions, transformations, and animations\n\nHi there üëã\n\nThis time, we'll move things with just CSS. Yes, you've read it right. We don't need JavaScript to make HTML elements move.\n\nLet's add some action to our story!\n\nTransitions\n\nTransition in CSS has two main things to do it. Determine the CSS element you want to transmit and the effect duration.\n\nLet's see who it looks like:\n\nHere is a div that we styled to look like a black box with width: 100px and height:100px:\n\nIn this example, we choose to add the transition effect on the width property when covering the div element. We could do the same on other CSS properties. You can also add effect to several CSS properties, like transition: width 2s, height 2s;.\n\nAlright, what about the 2s? This represents the duration of the transition: 2 seconds.\n\nWe can do other things, like delay the transition effect by using the property transition-delay and giving it the seconds. We can also play with the speed curve, and this is done by using the property transition-timing-function. This property can take a variety of values:\n\nease: Effect with a slow start, then fast, then end slowly.\n\nlinear: Effect with the same speed from start to end.\n\nease-in: Effect with a slow start.\n\nease-out: Effect with a slow end.\n\nease-in-out: Effect with a slow start and end.\n\ncubic-bezier(n,n,n,n): lets you define your own values in a cubic-bezier function.\n\nExample with all the transition properties (extended and shorthand versions):\n\nExample:\n\nFind the source code here.\n\nTransformations\n\nNow, the transformations. This CSS property allows us to do more exciting things such as move, rotate, scale, and skew elements in 2D or 3D.\n\nHere are the most commonly used 2D transformation methods:\n\ntranslate()\n\nrotate()\n\nscaleX()\n\nscaleY()\n\nscale()\n\nFor 3D transformation, you can use the following methods:\n\nrotateX()\n\nrotateY()\n\nrotateZ()\n\nExample of transition with transform\n\nAnimations\n\nAnd finally, the most exciting thing: animations. Yes, you can animate elements with CSS only. No need for JavaScript!\n\nHere are the CSS rich properties you can use for this purpose:\n\n@ keyframes : This will gradually change from the current style to the new style at a specific time. You need to name it so that you can use it later. This done with @keyframes animationname { ... }.\n\nanimation-name : This property allows us to use the animation we created. In this example the animationname.\n\nanimation-duration: As it is named, it defines the duration of the animation in seconds. You must specify it to launch the animation. Otherwise, nothing will happen.\n\nanimation-delay: To specify a delay in seconds, the animation will start after the defined seconds.\n\nanimation-iteration-count: To set how many times the animation will repeat itself.\n\nanimation-direction: To set the direction of the animation, forwards ( animation-direction: normal), backward ( animation-direction: reverse), or both directions (First forwards then backward: animation-direction: alternate, or first backward then forwards animation-direction: alternate-reverse).\n\nanimation-timing-function: To set the speed curve of the animation. It takes the same values as it is for the transformation above.\n\nanimation: Is kind of a shorthand property that allows setting animation details in one line. It's not readable like that, but it economizes 6 lines of code. A comment is necessary for the short version so that other developers understand what's the code does.\n\nExample\n\nSuper important to know\n\nNot all browsers support all properties. There are also some properties on the experimental stage so pay attention to make your web page look and react the same on all browsers (or at least the browsers commonly used by users or clients)\n\nMy tip for this issue:\n\nUse vendor prefixes\n\nAndroid: -webkit-\n\nChrome, iOS, Safari: -webkit-\n\nFirefox: -moz-\n\nInternet Explorer: -ms-\n\nOpera: -o-\n\nUse CanIUse tool\n\nUse the super good tool to determine the browsers' support for a CSS property if it's supported no need to add vendor prefixes for the supported browser.",
    "link": "https://medium.com/p/b9906310f1c2"
  },
  {
    "id": "de40e965c452",
    "content": "‚ú®CSS Beauty...\n\nShadows, colors, and gradients ... what make a web page sexy!\n\nWhat makes a house beautiful is the interior design, the colors, the furniture, the contrast, the decoration, ...etc.\n\nFor a web page, it's the CSS colors, shadow, and gradient. It creates a good and pleasant user experience combined with good performance and practicality of surfing through it.\n\nToday's story is about the ingredients you need to make a web page beautiful!\n\nThe ingredients are mainly: colors, shadow, and gradients! Let's dive deeper into each ingredient!\n\nColors\n\nThe color CSS property defines the text color. Browsers support a lot of colors, and that's what gives the website beauty and identity. As in marketing, colors present a feeling, a message, an environment, ...and much more.\n\nMost common methods to specify colors\n\nThere are a lot of methods to specify a color in CSS. The most common are rgb, rgba, hexadecimal with or without transparency.\n\nRGB colors\n\nThe RGB color value is specified with the rgb() function. To do so, here is the syntax: rgb(red, green, blue). The red param defines how intense the red color should be, and the value must be between 0 and 255 or between 0% and 100%. The same thing applies to the other params (green and blue). Like in painting, you gather all the colors, which gives you the final color the browser renders.\n\nRGBA colors\n\nThe same applies to the rgba() function. Except for one thing, the a param represents the opacity. The syntax is as the following: rgba(red, green, blue, alpha). This last param defines how the final color is transparent.\n\nHexadecimal colors\n\nA hexadecimal color looks like #RRGGBB. The RR for red, the GG for green, and the BB for blue. The 00 is the lowest value, and the FF is the highest. For example, the #0000FF value renders the blue color.\n\nHexadecimal colors with transparency\n\nThe same goes again for the hexadecimal color with transparency in the end. For example, the #0000FF50 represents the blue color with 50% of transparency.\n\nPredefined color names\n\nColors that are cross-browser colors. Examples are: blue, red, black, ...etc.\n\nThe other methods are:\n\nHSL colors: hsl(hue, saturation, lightness).\n\nHSLA colors: hsla(hue, saturation, lightness, alpha).\n\nShadows\n\nThe text-shadow property adds a shadow to text. The box-shadow property adds shadow effects around an HTML element.\n\nSyntaxe\n\ntext-shadow: h-shadow v-shadow blur-radius color|none|initial|inherit;\n\nbox-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;\n\nTo avoid making the article too long. Here are more details about how shadows params work:\n\nBox-shadow\n\nText-shadow\n\nGradients\n\nGradient background is a magical touch when well used on a web page. It makes backgrounds beautiful and unique. We can actually use images for backgrounds, but this is not recommended for performance reasons.\n\nAs you know, gradients are just colors that fade into each other. What makes gradients special in CSS is the control we have over it. We can control many aspects such as the colors, the direction, where the fading should start, the angle ...etc.\n\nThe problem with gradients!\n\nSometimes, you are inspired by a design or a web page, and you want to have the same gradient background for your web page. Playing with values to make it look like the gradient you want may take time and effort to try out values and see what it gives on the browser.\n\nI personally use some interesting tools that facilitate this task. T learn more, here is my article about these tools:\n\nTo learn more:\n\nGradient complete guide\n\nüë®‚ÄçüíªExample\n\nCode source in the repo!\n\nNext time, we'll make things move üíÉ",
    "link": "https://medium.com/p/de40e965c452"
  },
  {
    "id": "90890b748e58",
    "content": "My REX about Google's Women Developer Academy\n\nAll the whereabouts about the WDA program!\n\nHi there üëã\n\nI recently became a part of the European Google's WDA program of 2022. I was so happy to live this experience and decided to share how it happened. What comes from it? And my feedback about it!\n\nI'm really so excited to tell you about it!\n\nBefore telling you about how the whole thing happened, you may need to know first about WDA (Women Developer Academy program).\n\nWhat's WDA?\n\nWomen Developers Academy trains technical women to be\nleaders in the industry\n\n3 months ago, I got the link from Debbie O'Brien, a brilliant woman in tech who loves sharing and learning. I got in touch with Debbie thanks to the React 2022 conference. And I'm so thankful that I subscribed and got selected to be a part of this program.\n\nThe program started on February 8th. We were 107 participants across Europe, technical women from more than 24 countries. We had the chance to have more than 60 mentors.\n\nWhy I wanted to be part of this program\n\nPeople who love to share their knowledge and passion for tech.\n\nWhat the program looks like\n\nHere is the schedule of the WDA program for 2022.\n\nWeek 1: We started with a gentle introduction, program context, and questions/answers from experienced and talented people.\n\nWeek 2: We learned about how to select a topic. How to spot opportunities and how to prepare a technical presentation (of course because we all are women in the tech world)\n\nWeek 3: Use the acquired knowledge from the last week and contribute to the community by using different ways and marketing yourself as a contributor.\n\nWeek 4: The most exciting week is where you will apply all you learned and practice with a 5min live speaking and get fresh and real-time feedback from mentors and the audience.\n\nAfter all that, the graduation!\n\nWait a minute. There are some rules to respect to get graduated, though...\n\nAttend at least 80% of the sessions\n\nAttend at least two mentor sessions (Yes, you have your personal mentor ü•∞)\n\nTopic selection exercise\n\nBlog post-write-up\n\nSpeaker profile/bio\n\n5min Live Speaking.\n\nThere is a lot, really a lot to learn.\n\nMy feedback\n\n‚ù§Ô∏èI loved ...\n\nThe environment is healthy and has positive vibes.\n\nThe core idea of starting where you are (you don't need to contribute already, blogger or speaker, all you need is your motivation to learn and shine as a woman in the tech world)\n\nThe main idea of the program: \"We're here to encourage and uplift each other\".\n\nHave fun doing it!\n\nGet the fruits of years of experience of talented people. Really not a given thing.\n\nüî•I learned ...\n\nHow to present and market myself\n\nHow to present and create a technical talk\n\nHow to spot opportunities and find topics to talk about\n\nIt all starts with telling a story that was the principal of my blog and youtube videos (web stories), so I was happy that I'm on the right track!\n\nI learned fascinating strategies and algorithms to find the right topic to write/ speak about.\n\nüß∞Tools/ tips used by professionals ...\n\nhttps://www.katacoda.com/\n\nhttps://www.promodo.com/\n\nhttps://habitica.com/\n\nhttps://hacktoberfest-projects.vercel.app/repos/javascript?q=angular\n\nhttps://www.linkedin.com/sales/ssi\n\nhttps://accounts.coschedule.com/login?service=headlineStudio\n\nhttps://dev.to/chibichibibr/work-and-study-routine-28bg\n\nMetricool\n\nhttps://www.planoly.com/\n\nhttps://www.hootsuite.com/\n\nhttps://www.powtoon.com/\n\nhttps://shotcut.org/\n\nhttps://sessionize.com/\n\n‚úîÔ∏èMy advice...\n\nVideos are recorded but not chat (there are a lot of interesting things people share, so it's good to copy/paste and keep it somewhere who knows you might need it ;)\n\nAs long as the sessions go, prepare yourself to write notes for each session (I personally use OneNote). This strategy will help you enforce what you've just learned and keep your fresh thoughts safe somewhere so that you can go back and read them when needed.\n\nDownload all supports and recorded videos at the end. Each Friday, the organizer sends the program newsletter with the drive link to get these precious supports, but who knows what happens? It's better to keep a copy locally at the end of the program.\n\nReplay the record of yourself at the live speaking and build a constructive critic. (For mine, the topic I talked about was sensible and needed a lot of courage. That was the most difficult part for me. I was surprised though, for my English, it's been a long time not speaking in English, and it was pretty good, so I was really happy about that üòú)\n\nYour turn!\n\nI can't specify what I learned from each week and session here. Otherwise, this article will be too long to read! So please tell me in the comment section what you're more interested in, based on that I'll write a detailed article.\n\nüéìFinally, my WDA Graduation Certificate üéá\n\nüôèüèª Special thanks to ...\n\nPatrizia (Pati) Jurek, Nino Nanitashvili, Alicja Olga Heisig, Laura Morillo-Velarde Rodr√≠guez, Kate Munday, Richard Thornber, Blandine Marcelin, Anna Altshuller, Natalia Villalobos, Evi Karrakozoglou, Amanda Cavallaro, Rustam Mehmandarov, Majid Hajian\n\nSpecial thanks to all the talented participants and mentors I met through this awesome and unforgettable experience.\n\nThanks so much for making me grow!\n\n‚è≠Ô∏èNext step...\n\nMy next step will be responding to the Monika Janota proposition of applying to GDE üí™\n\nBy the way thank you Monika for this awesome opportunity üíå\n\nI am so thankful for the amazing opportunity that the Women Techmakers, Google, and the Google Developers Experts gave us ‚ù§Ô∏è",
    "link": "https://medium.com/p/90890b748e58"
  },
  {
    "id": "90cf5689cb61",
    "content": "Advanced positioning systems in CSS\n\nWhat is Flex and grid in CSS?\n\nHi there üëã\n\nI hope you're safe and alright, and GOD protects Ukrainian citizens üòå. Before going further with this important course in CSS, I would like to thank Alex Gracia Lupotto so much for his trust and for being my newly referred member! I'll always give my best!\n\nAlright, let our story begin!\n\nEvery webpage story starts with a layout design.\n\nWhat's a website layout?\n\nA web page layout is the structure of its elements: header, nav bar, content and footer\n\nThere are common website layout designs such as:\n\nThere are tons of other designs. You can even invent your own layout. Just keep in mind that you should take into consideration your user experience.\n\nIn the CSS positioning article, I explained the position options and how they generally work. We need a more advanced way for CSS layouts to arrange and structure elements rather than using the basic position options. These advanced techniques are FlexBox and Grid.\n\nFlexBox\n\nFlexBox stands for Flexible Box Module. You can design a one-dimensional layout model with it. The power of the Flexbox appears when you need space distribution between items in an interface and alignment capabilities.\n\nFlex items should be inside of a flexbox container so that flexbox properties can work: dispaly: flex;\n\nFlexbox items can move on two axes/directions (row or column but not both).\n\nItem can start from the right to the left and vice-versa (in case of row direction). And from bottom to top and vice-versa (in case of column direction)\n\nThere are other properties to adjust items stretch, wrap, ...etc.\n\nThe Flexbox system is perfect for aligning items vertically or horizontally.\n\nExperimenting:\n\nGrid\n\nThe Grid layout system is so powerful when it comes to dividing a page into major regions or defining the relationship in terms of size, position, and layer. It's therefore excellent for positioning a two-dimensional layout model.\n\nGrid items need to be inside a grid container: display: grid;\n\nGrid is two-dimensional. You can choose columns with the grid-template-columns property and rows with the grid-template-rows property.\n\nThere are a lot of other properties to do exciting things with the Grid system.\n\nGrid is a perfect choice for positioning items as a grid or array of 2 dimensions\n\nExperimenting:\n\nLet's apply this knowledge\n\nKnow that we learned about these advanced techniques to position elements. Let's build the layout design in the example. I choose this example because of its popularity.\n\nHere is the template or user interface we want to build:\n\nThe elements we need are:\n\nHeader with navigation\n\nLeft side content\n\nMain content\n\nRight side content\n\nFooter\n\nHere are the HTML elements we need to position and render the final layout design with flexbox system:\n\nExplanations\n\nFind the demo code here!\n\nI didn't provide a Grid example. First because the article is already long and second because you'll find flexbox everywhere so you must learn it. If you want an example please let me know in the comments üòâ\n\nFlex vs. Grid\n\nNow that you have learned about FlexBox and Grid. It's wise to know when to use each of these systems. Here are the key points of when and where to use them:\n\nAnother great reference to experiment and use when coding is CSS tricks:\n\nFlexBox Guide\n\nGrid Guide\n\nThe next article will be about CSS shadows, colors, and gradients!",
    "link": "https://medium.com/p/90cf5689cb61"
  },
  {
    "id": "62ded441ef4d",
    "content": "A Guide to Positioning in CSS\n\nWhat you need to know!\n\nIn CSS, positioning is a mandatory course. We can't see anything that makes sense without proper positioning of web application front elements, right?\n\nThis article will give you the essential knowledge about CSS positioning and a mental picture of it for life!\n\nLet our story begin!\n\nWhat is CSS positioning?\n\nA position in CSS is a property that gives you the power to position elements on your app's front or user interface. It got different options:\n\nA static position (the default one)\n\nA fixed position\n\nA relative position\n\nAn absolute position\n\nCSS position options... let's dive in!\n\n- The static position\n\nThis option will position an element statically on top, bottom, left, or right. And by the way, this position option or value is the default value of each HTML element.\n\nSince the static position is by default the value given to any HTML element, we don't need to set it explicitly position: static\n\n- The fixed position\n\nThe fixed position is a position that makes an element relative to the viewport.\n\nTherefore, a fixed position of an element is relative to the document, so its value is unaffected by scrolling. It stays fixed to the document even when scrolling.\n\n- The relative position\n\nA relative position is as it is named relative to its current position. It's like a static position that we can move with left/right/top/bottom values.\n\n- The absolute position\n\nAn absolute position is where the element is relative to the closest parent that doesn't have a static position.\n\nSource code\n\nYou can find the examples source code in the 2022 Web Program Repo.\n\nYou can either get the code and play with it or use the provided stackblitz project and play with CSS values and position properties. Experiment with it!\n\nVideo version\n\nThe next article will teach you advanced CSS positioning techniques.",
    "link": "https://medium.com/p/62ded441ef4d"
  },
  {
    "id": "eb92cdd9b534",
    "content": "Web Typography\n\nWhat are the CSS properties of font style?\n\nThis time it's about Typography!\n\nWeb typography represents the letters and text we see on every web page. It's about styling the text choosing its size and spacing. Typography is not only about the web page's beauty but also about readability and user experience.\n\nWith your text on your webpage, you can express emotions. Therefore, letters style should be chosen wisely to create a good feeling that complements your web page content and message.\n\nBy the way, when I'm talking about typography feelings, here is what I mean üòú\n\nCSS properties you can use for typography\n\nYou can use many tools to express your web page message and feeling. Those tools are CSS properties that allow you to define the color, size, spacing, and shape of a text.\n\nColor\n\nDefines the color of the text. It can be the color name. But they are often not really interesting for a specific color. You can then use either hexadecimal color (e.g. #ffffff for white) or RGB/RGBA which stands for red, green, and blue. The a is for the opacity of the color:\n\nFont family\n\nDefines the font of the text. Here is an example:\n\nfont-family: \"first-font-name\", \"second-font-name\", sans-serif;\n\nThe list of the font families fonts (\"first-font-name\", \"second-font-name\") defines the priority in which the browser should choose the font family. If there is a problem finding the first font, then the browser will display the following font, and so on.\n\nIn this example, the browser will try to use first-font-name if it's available. If it can't find it, it will try to use second-font-name. If it's not available, it will use the browser's sans-serif font.\n\nfirst-font-name and the second-font-name are not real font names. They are used here just as an example to illustrate their rule.\n\nReal example:\n\nfont-family: \"Source Sans Pro\", \"Arial\", sans-serif;\n\nFont size\n\nDefines the size of the text.\n\nYou can use other units for your size, such as:\n\nem : The value is relative to the parent's font-size.\n\nrem : The value is relative to the root element's font-size. Therefore, the text will depend on the context.\n\n% : The percentage value is relative to the parent's font-size.\n\nFont style\n\nDefines how much the text is slanted. They are: normal, italic and oblique:\n\nfont-variant\n\nDefines which glyph to use for each letter.\n\nFont weight\n\nDefines the weight of the text. It can be normal (the default value), lighter, bold, a number,\n\nLetter spacing\n\nDefines the spacing between the characters of a block of text.\n\nLigne height\n\nDefines the height of a single line of text. normal is the default value if there is no light height defined. The unitless value is relative to the font-size and pixel/em, ... values.\n\nText align\n\nDefines how the text content of the element is horizontally aligned: left, right, center and justify.\n\nText decoration\n\nDefines how the text content of the element is decorated.\n\nText intend\n\nDefines the indentation of the element's first line of text.\n\ntext-overflow\n\nDefines how the hidden text content behaves if it's overflowing. The clip value and the ellipsis often used for paragraphs so that you don't overload the page with a lot of content.\n\ntext-shadow\n\nDefines the shadow of the text content. This property is not often used, but it's good to know.\n\ntext-transform\n\nDefines how the text content should be transformed. The values that can be used are: none, capitalize, uppercase and lowsercase.\n\nwhite-space\n\nDefines how the element's white space is handled. An essential property, it proves how the web page is well done. When there are many letters, they will appear outside the box, and it is not professional. So always pay attention to that.\n\nword-break\n\nDefines how words should break when reaching the end of a line. The same applies to this property too.\n\nword-spacing\n\nDefines the spacing between words of a block of text.",
    "link": "https://medium.com/p/eb92cdd9b534"
  },
  {
    "id": "b67b40bb8930",
    "content": "Box Model\n\nWhat is the box model concept?\n\nIn the last article, you learned how to select your HTML elements by using tags and combinators. Now, that you can select them, you can do exciting things.\n\nThe starting point of every HTML element styling...\n\nThe HTML styling story starts with a simple idea! Every HTML element can be considered as a box. In CSS language we call it box model.\n\nYou need to open up your imagination and see every box model element as a box that wraps around an HTML element. The box consists of the following:\n\nBox content‚Äî The HTML element itself without any style.\n\nBox padding - The space/ area around the content.\n\nBox border - A border that goes around the box content and padding\n\nBox margin - The space/ area outside the border.\n\nHere is a mental picture (gif) to keep in your mind:\n\nIn terms of CSS\n\nTo style the button example we need to add some space around the button, margin and padding's space are transparent, in contrary to the border that can be colored as you want:\n\nbutton {\n  border: 15px solid green;\n  padding: 50px;\n  margin: 20px;\n}",
    "link": "https://medium.com/p/b67b40bb8930"
  },
  {
    "id": "4f4f48316731",
    "content": "HTML Selectors From Basic to Complex\n\nSelecting HTML elements & styling them\n\nHi there! üëã\n\nLast time you learned about CSS and how it works. Now, time for some action. Today's store is about selecting HTML elements and styling them.\n\nThe Big Picture\n\nFirst, you need to know that a selector is just an element, id, or class you use to select an element in the HTML doc. Nothing complicated. Here are some examples:\n\nbody selects the HTML body element\n\n.className selects all elements with the \"className\" class (class=\"className\")\n\n#idName selects the elements with the idName id (id=\"idName\"`)\n\n* selects all DOM elements\n\nThe real-life use cases are not all the time simple. There are times when we need to select a specific thing with many criteria and characteristics. That's when we need to use CSS combinators.\n\nCSS Combinators\n\nTo make it rememberable for life for you, you can see combinators as me asking you to find the person with a black hat, blue eyes, red jacket, black bots, etc.\n\nThat's exactly what happens with HTML documents. Sometimes we want to color a subheader differently based on status, a position, or other criteria based on your client's need.\n\nCombinators help you create a relationship between CSS simple selectors so that you can target a specific element in your HTML document. There are mainly 4 types of CSS combinators:\n\n1. General Sibling Selector (~)\n\nThe general sibling selector selects all the following siblings of a specified element.\n\nThe following example selects all <p> elements that are next siblings of <div> elements:\n\nResult\n\n2. The child selector (>)\n\nThe child selector selects all elements that are the children of a specified element. Such as:\n\nThe following example selects all <p> elements that are children of a <div> element:\n\nResult\n\n3. Descendant selector (space)\n\nThe descendant selector matches all elements that are descendants of a specified element. such as:\n\nThe following CSS example selects all <p> elements inside <div> elements:\n\n4. Adjacent sibling selector (+)\n\nThe adjacent sibling selector is used to select an element directly after another specific element.\n\nSibling elements must have the same parent element, and \"adjacent\" means \"immediately following.\"\n\nThe following example selects the first <p> element that is placed immediately after <div>elements:\n\nSource code\n\nYou can find all code examples here:\n\nPlay with it, experiment, and break it. üòÑ That is how we have all started!\n\nüõÑTakeouts\n\nThere are mainly 4 different relationships that can link two HTML selects: space, > , + , and ~.\n\nThe more you need to target a specific element in your HTML document, the more you'll need to use these combinators.",
    "link": "https://medium.com/p/4f4f48316731"
  },
  {
    "id": "f98c3e2434bf",
    "content": "The Web Page Makeup!\n\nGive your web page some beauty and modernity\n\nHi there üëã\n\nThis is the third step of the 2022 Web Express Program toward the web developer journey! Congrats you learned so far about the web essential knowledge, you built your web page content skills, and now you'll give some beauty and modernity to your web page.\n\nThis chapter is about CSS. Without it, the web page won't be attractive. Appearance count!\n\nThe program for this chapter and this month is:\n\nSelectors (From basic to complex)\n\nBox model\n\nTypography\n\nPositioning\n\nLayouts: Flex & Grid\n\nShadows, colors, and gradients\n\nTransitions & transformations and animations\n\nResponsive design (Media queries)\n\nWhat's CSS?\n\nIn one phrase, we can define CSS as:\n\nCSS stands for Cascading Style Sheets a language used to format and style an HTML document.\n\nHTML is the structure of a page, and CSS is its appearance, element positions, colors, ...etc.\n\nHow does it work?\n\nYou include the CSS code in your HTML code by using selectors. Her is types of CSS usage with HTML:\n\nInline by using the style attribute inside HTML elements\n\nInternal by using a <style> element in the <head> section of HTML's document\n\nExternal by using a <link> element to link to an external CSS file with .css extension.\n\nInline example\n\nInternal example\n\nExternal example\n\nHTML code\n\nCSS code\n\nWhat you need to know\n\nCSS code style based on selectors. They are HTML element that identifies the element we want to style. In the examples above, I used the following selectors:\n\nbody to select the whole HTML document.\n\nh1 to select the heading level 1.\n\np to select the paragraph element.\n\nWe don't want by default to style all headings, so there are more techniques to select one heading than all headings and so on for other elements. This part of the CSS story will be discussed in the next article üòâ",
    "link": "https://medium.com/p/f98c3e2434bf"
  },
  {
    "id": "69d9b2349355",
    "content": "Your HTML Essentials üìï\n\nRecap of the HTML chapter\n\nCongrats on completing the HTML chapter. With the acquired knowledge, you can build any web page you want. It won't be beautiful, but no worries. The next chapter is about how to style your web page üòâ\n\nHere is a recap of the HTML chapter:\n\nHTML and Page structure\n\nElements & attributes\n\nForms, inputs, images, ...\n\nLists & tables\n\nEvents\n\nWeb storage\n\nSemantic HTML\n\nAccessibility\n\nThe next chapter is about CSS and styling. We'll give some beauty to our pages üíÑ‚ú®‚ú® üòâ",
    "link": "https://medium.com/p/69d9b2349355"
  },
  {
    "id": "c99a867a750b",
    "content": "Make Your Web Page Accessible to the World\n\nWeb accessibility is vital\n\nIt's the last article in the HTML chapter. This article is about accessibility! It won't impact the web page look, but it's essential to keep in mind accessibility whenever you are building a web page.\n\nHere is my 11-rules checklist for any web page accessibility:\n\n1. Structured data should be valid\n\nSearch engines use structured data to understand what kind of content is on your page. For example, you can tell search engines that your page is an article, a job posting, or an FAQ.\n\nMarking up your content with structured data makes it more likely that it will be included in rich search results. For example, content marked up as an article might appear in a list of top stories relevant to something the user searched for. - web.dev\n\nTo verify if your app respects this rule, you can use the Google Search tool below:\n\n2. A website should have a <meta name=\"viewport\"> tag with width or initial-scale\n\nMany search engines rank pages based on how mobile-friendly they are. Without a viewport meta tag, mobile devices render pages at typical desktop screen widths and then scale the pages down, making them difficult to read.\n\nSetting the viewport meta tag lets you control the width and scaling of the viewport so that it's sized correctly on all devices. - web.dev\n\nAdd a <meta name=\"viewport\"> tag to optimize your app for mobile screens:\n\n3. Your app's HTML should have the <title> element\n\nThe title is essential as it appears on the top beside the favicon. The title gives screen reader users an overview of the page, and search engine users rely on it heavily to determine if a page is relevant to their search.\n\nAdd <title>Your title</title> to your index.html or HTML document.\n\nResult:\n\n4. Your app's document should have a meta description\n\nThe <meta name=\"description\"> element provides a summary of a page's content that search engines include in search results. A high-quality, unique meta description makes your page appear more relevant and can increase your search traffic. - web.dev\n\nA meta description may be included in search results to summarize the page's content:\n\n5. Your website's pages should return a successful HTTP status\n\nServers provide a three-digit HTTP status code for each resource request they receive. Status codes in the 400s and 500s indicate that there's an error with the requested resource. If a search engine encounters a status code error when it's crawling a web page, it may not index that page properly. - web.dev\n\nPages with unsuccessful HTTP status codes may not be indexed appropriately.\n\n6. Links should have a descriptive text\n\nLink text is the clickable word or phrase in a hyperlink. When link text clearly conveys a hyperlink's target, both users and search engines can more easily understand your content and how it relates to other pages. - web.dev\n\nDescriptive link text helps search engines understand your content. Avoid the following description for a link: click here, click this, go, here, this, more.\n\nGood example:\n\n<p>To see all of our basketball videos, <a href=\"videos.html\">See basketball video</a>.</p>\n\n7. Your website links shouldn't be crawlable\n\nGoogle can follow links only if they are an <a> tag with an href attribute. Links that use other formats won't be followed by Google's crawlers. Google cannot follow <a> links without an href tag or other tags that perform a links because of script events. - Google Search Center\n\nSearch engines may use href attributes on links to crawl websites. Ensure that the href attribute of anchor elements links to an appropriate destination so that your website can be secure.\n\nHere are some examples of links that Google can and can't follow:\n\n8. Your robots.txt file should be valid\n\nThe robots.txt file tells search engines which of your site's pages they can crawl. An invalid robots.txt configuration can cause two types of problems:\n\nIt can keep search engines from crawling public pages, causing your content to show up less often in search results.\n\nIt can cause search engines to crawl pages you may not want shown in search results. - web.dev\n\nIf your robots.txt file is malformed. Crawlers may not understand how you want your website to be crawled or indexed.\n\nIf your file is not valid, check these common errors:\n\nThe file doesn't include:\n\nNo user-agent specified\n\nPattern should either be empty, start with \"/\" or \"*\"\n\nUnknown directive\n\nInvalid sitemap URL\n\n$ should only be used at the end of the pattern\n\nExample of a valid robots.txt file:\n\n9. Image elements should have [alt] attribute\n\nInformative elements should aim for short, descriptive alternate text.\n\n<img alt=\"Audits set-up in Chrome DevTools\" src=\"...\">\n\nIf it's just decorative, use an empty alt attribute.\n\n<img src=\"background.png\" alt=\"\">\n\n10. Your HTML should use legible font sizes\n\nFont sizes less than 12px are too small to be legible and require mobile visitors to \"pinch to zoom\" to read. Strive to have >60% of page text ‚â•12px.\n\n11. Tap targets should be sized appropriately\n\nInteractive elements like buttons and links should be large enough ( 48x48 px), and have enough space around them to easily tap without overlapping other elements.\n\nIncrease the size of tap targets that are too small.\n\nIf needed, increase the spacing between tap targets that are too close together using properties like margin.\n\nLast thing\n\nYou can use the Google Lighthouse tool to evaluate your website Accessibility and fix eventual errors:",
    "link": "https://medium.com/p/c99a867a750b"
  },
  {
    "id": "57bbef7bb7aa",
    "content": "Give Your HTML A Meaning!\n\nHow vital is HTML semantics?\n\nHi there ^^\n\nBefore going with HTML semantics, I'd like to thank you RZL and jshjchoi for becoming my newly reffered members. Thanks from the heart for your support ‚ô°\n\nWe've built a good knowledge of HTML so far. We still need to learn two last things that are good practice and essential at the same time. The first one is semantic HTML, which we'll discuss in this article. And the second is the web page accessibility, the next article's topic! Two more steps, and you're done learning the essentials of HTML.\n\nLet's do this!\n\nWhat's semantic HTML?\n\nSemantic HTML is an HTML code that uses the correct HTML elements for their intended purpose as much as possible.\n\nTake for example <h1> tag. Most browsers will render their text with a large font size to make it look like a heading (of course, you could style it to look like anything you wanted).\n\nIt's true that the <h1> text renders a top-level header, but semantically speaking, it has no meaning. We could have styled any other element a space , for example, like a <h1> look.\n\nA semantic HTML gives meaning to your document for both the browser and the developer.\n\nWe shouldn't use <h1> just because of its large text size. The same goes for other HTML elements. HTML should be coded to represent the data that will be populated with and not based on its default style.\n\nWhy should you write semantic HTML?\n\n- Reason #1: maintainability\n\nRespecting and coding semantic HTML makes it easier to maintain and have well-organized code.\n\nIt's good to give meaning to our code for developers and browsers that will interpret HTML and display the web page accordingly.\n\n- Reason #2: SEO\n\nAnother essential advantage of semantic HTML is its impact on SEO. Google has bots that index web pages.\n\nTheir job is to scan your website's source code and extract the meaning from it. Of course, if you code without respecting rules, bots won't get any meaning from your code, and that's not good for your web page referencing on the web. Having specified tags for semantic HMLT such as section, nav, footer ...Etc, makes it easier for them to do their job.\n\nGoogle SEO Bots love semantic HTML\n\n- Reason #3: Accessibility\n\nSemantic HTML also helps your web page accessibility (screen readers can use it as a signpost to help visually impaired users navigate a page, keyboard navigation, ...etc.). Anyone has the same right to access your web page despite their disabilities or handicap! For those users, finding blocks of meaningful code is significantly easier than searching through endless divs with or without semantic or namespaced classes.\n\nWe'll learn more about web page accessibility in the next article.\n\nDo the page look change with semantic HTML?\n\nNo, it doesn't impact at all the look of a page. Having the following code with divs or with specified tags doesn't change the web page look. But, when you look and compare as a human, you'll definitely understand quickly the code with HTML tags rather than the one with divs.\n\nThe look of HTML elements is the sole responsibility of CSS, not HTML.\n\nHow do we use semantic HTML?\n\nThe key idea to keep in mind when writing HTML code is using tags representing the data you want to display. Use nav for a navbar, header for the page header, footer tag for the page footer, ...etc.\n\nExamples:\n\nAlright, how can you know when to use each tag. Here is a good reference that will help you start your trip with writing semantic HTML:\n\nWhat to keep in mind\n\nSemantic HTML uses HTML elements for the right purpose and job.\n\nSemantic HTML doesn't impact the page look. The CSS is the only guy that changes the page look and gives it style.\n\nEach time you need to add content to a web page, ask yourself what data you want to display? Based on that, choose the appropriate HTML tag.\n\nUse the HTML5 doctor cheat sheet whenever you hesitate on which HTML tag to choose for your content.",
    "link": "https://medium.com/p/57bbef7bb7aa"
  },
  {
    "id": "43ca7d1d8283",
    "content": "Web Storage üóÉÔ∏è\n\nWhat is web storage in HTML5? What is web storage used for?\n\nHello everyone üëã,\n\nIt's time to learn about Web Storage.\n\nWhat's web storage?\n\nWeb storage is the browser's ability or mechanism to store key/value pairs.\n\nRemember the Cookies article? I briefly discussed the inconvenience of storing data with cookies and that web storage is a better and more intuitive solution.\n\nAn application might need to store some data locally within the user's browser. An example of data could be darkMode: true to tell the app that the current user has chosen the dark mode or other user's UI preferences.\n\nQuick refresh about why you should store in web storage and not cookies?\n\nIn the cookies article, we learned that we could store data in cookies that we send with a request. But there are many advantages for web storage:\n\nMore secure (the information is stored locally and never transferred to the server)\n\nCan store a large amount of data (at most 5MB)\n\nIt doesn't affect the browser's performance.\n\nThere are two web storage mechanisms (or objects)\n\nBased on your needs or your user story needs, you can choose the more appropriate solution:\n\nlocalStorage: No expiration date for the stored data. The data won't be deleted when you close the browser or tab. You need to manually delete them, either through JavaScript or clearing the browser cache.\n\nsessionStorage: Data is stored for only one session, which means when you close the browser window or tab, the stored data are deleted.\n\nüöâReal use case story\n\nWe used LocalStorage to save important data when I worked for France railways. In the app, we had two spaces (and eventually future ones can be created), so we needed a global solution. The need we had back then was when switching between spaces (apps), we needed to keep each space's current state. The first space was a map app with railway structures and infrastructure with widgets where we can search for a train station, draw on the map, and do other complex functionalities ...etc. The second space was a linear view of an itinerary from X position to Y position with infrastructure data drawn based on real positions. It's an itinerary-specific app that displays a kind of dashboard. (I don't know if my English was clear for you, it's a bit technical üòú)\n\nIt's a lot of data. We can't use cookies.\n\nData can be stored in a SessionStorage, but if the user closes the web app accidentally, all data will be deleted.\n\nThe last option we had was LocalStorage, and it solved the problem!\n\nTo code!\n\nLocalStorage example\n\nHere are the essential functions or APIs you can use to create, retrieve and delete data. It's always a name/value pair.\n\nOnce data is stored in the LocalStorage you can do whatever you want with it in a JS script. We don't have to understand this part, for now. All we need to know is that we can store data locally on the browser, and we can access them via the browser:\n\nTo see the stored data in the local storage:\n\nHit F12\n\nGo the application tab\n\nOn the left, Go to Local Storage :\n\nAll I needed to do to store this information is:\n\nlocalStorage.setItem(\"name\", \"Fatima\");\nlocalStorage.setItem(\"country\", \"France\");\nlocalStorage.setItem(\"hobbies\", \"learning and sharing!\");\n\nThese created items will persist in your browser's local storage and won't be deleted unless you do it yourself.\n\nNot all browsers support web storage, but modern ones support them. You need to check if your browser supports LocalStorage/SessionStorage with the following JS code:\n\nif (typeof Storage !== \"undefined\") {\n    // It doens't support it\n} else {\n    // It doens't support it\n}\n\nYou'll learn more about JS code in the JS chapter.\n\nüëâ Get the demo code and play with it!\n\nSessionStorage example\n\nThe same applies to SessionStorage except when you close the demo HTML file tab in your browser, your data will be deleted.\n\nTo store data:\n\nsessionStorage.setItem(\"name\", \"Fatima\");\nsessionStorage.setItem(\"country\", \"France\");\nsessionStorage.setItem(\"hobbies\", \"learning and sharing!\");\n\nTo see the stored data in the session storage:\n\nHit F12\n\nGo the application tab\n\nOn the left, Go to Session Storage :\n\nThese created items will persist in your browser's session storage and be deleted each time you close the tab or the browser.\n\nüëâGet sessionStorage demo code and play with it!",
    "link": "https://medium.com/p/43ca7d1d8283"
  },
  {
    "id": "1eb41726096e",
    "content": "HTML's Super Ability\n\nWhat are HTML events? What are some examples of them?\n\nBefore starting this article, I'd like to thank you, Piero Sabino for being recently my newly referred member. Thank you so much for trusting me and making my articles valuable ‚ù§\n\nWe learned so far about the HTML structure its content pillars. Congrats because you can now build a web page with the acquired knowledge. (It will take some time, but that's how all of us (developers ) started. So, no worries!)\n\nHTML's Super Ability\n\nWe know that HTML builds web page content. But I didn't tell you all. Actually, there is a part hold hidden in the story, muahahaha. In fact, the greatest ability HTML got is letting events trigger actions in the browser.\n\nJavaScript is used for website interactions and behavior. But, in fact, JavaScript can't get to work without HTML. It's the one that lets events trigger actions. When the event is triggered, then JavaScript takes over. For now, we'll focus on the HTML job in the whole thing. JavaScript will come later!\n\nWhat's an event, and how does it work?\n\nHTML events are like life's events. We call an event \"event\" because it's an interesting change, something different than the usual routine‚Äîa marriage, a birthday, a job, etc.\n\nHTML events can be coming from the user interactions, such as moving the mouse, changing the size of the window, clicking, etc. It can also be triggered programmatically (we'll see how in the JavaScript chapter)\n\nIn life, an event is a souvenir, an experience. In tech, it's on object üòú. The object provides information about what happened (the event data).\n\nExample of events:\n\nClipboard event\n\nMouse\n\nNetwork/ Connection\n\nPrint ...\n\nTo see more events:\n\nNow, let's experiment with some events\n\nThe following example uses: onclick , onmousemove, and onmouseout events.\n\nonclick is fired when we click on the HTML element\n\nonmousemove is fired when the mouse pointer is moving while it is over an element.\n\nonmouseout is fired when the mouse pointer moves out of an element\n\nAgain, let's start with a user story. I need to trigger these three events on an HTML button.\n\nWhen I click on the button, I want to show the text: \"Boooow.\"\n\nWhen my mouse pointer moves over the button, display the text: \"Oh, I see you moving\"\n\nThe last thing, when my cursor moves out of the bottom element, display the text: \"You're leaving :(\"\n\nThe code uses JavaScript to make some actions when an event is fired. Don't mind it. The important thing to learn from the example is that without HTML, we can't do anything. It's the entry point where we let an event be triggered. What happens next is from JS code.\n\nHow does it work in code?\n\nThe HTML element (in this use case, a button) got the ability to say if someone clicks me, then launch the function I'm given ( onclick=\"show()\"). Nothing could have happened without the ability of the HTML element to listen to the click event and fire the function you give it.\n\nAll you need is to add the event you want (click in this case) to the HTML element (button in this case) and give it the function you want to execute when the event is triggered:\n\nThe same applies to the other events:\n\nTo try it yourself, here is the full code. Again what happens after the event when it's triggered will be discussed in the JS Chapter, so don't mind it üòâ\n\nCode repo:",
    "link": "https://medium.com/p/1eb41726096e"
  },
  {
    "id": "a1e7b966698a",
    "content": "HTML Content Essentials that every web developer should know!\n\nII- Lists & tables HTML essential elements\n\nüö®Requirementüö®\n\nThis article requires the step before's knowledge:\n\nQuick refresh\n\nThere is some other HTML element that you must know. You'll be using them for your tasks as a web developer.\n\nLists\n\ntables\n\nWhat we are going to build:\n\nThe HTML elements we are going to learn in the interface above are HTML lists and tables.\n\nHTML List\n\nTo render a list, you have two choices:\n\nOrdered lists <ol>\n\nUnordered lists <ul>\n\nTo render the list part of the interface, here is the corresponding code:\n\nThe same syntax can be applied to render an ordered list by replacing ul in the example with ol.\n\nHTML Table\n\nTo render a table, it's a bit complicated. There are a lot of elements we need to do so:\n\ntable for a two-dimensional table element\n\ntr for table row element\n\ntd for table cell element\n\nth for the table header cell\n\nthead for grouping the header content in a table\n\ntbody for grouping the table content in a table\n\ntfoot for grouping the footer content in a table\n\nNote that you don't need to use all of these elements. It depends on what you want to render in the example I showed earlier. We don't have either a table header or a footer.\n\nTo render the table part of the interface, here is the corresponding code:\n\nI cheated to make it look like a table (with border and grey color) with CSS. In the full code, don't mind the CSS part. It will be clearer with the next chapter of the program.\n\nFind the source code of the example here.\n\nAny comment, feedback, or question are welcomed, I'm available on LinkedIn üòâ\n\nI- General Web Knowledge\n\nII- Web page skeleton: HTML\n\nHTML and Page structure\n\nElements & attributes\n\nForms, inputs, images, ...\n\nLists & tables\n\nEvents\n\nWeb storage\n\nSemantic HTML\n\nAccessibility\n\nLet's build a better 'us' for 2022!\n\nLearn more about the 2022 Web Program:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nIf you like my article, subscribe to get my latest ones. If you like to experience Medium yourself, consider supporting me and thousands of other writers by signing up for a membership. It only costs $5 per month, it supports us, writers, and you have the chance to make money with your writing as well. Of course, you can cancel the membership anytime. By signing up with this link, you'll support me directly with a portion of your fee, it won't cost you more. If you do so, thank you a million times!\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/a1e7b966698a"
  },
  {
    "id": "dcb8b8715125",
    "content": "HTML Content Essentials that every web developer should know!\n\nWhat are the essential HTML tags?\n\nAfter learning about every web page structure and its pillars (elements and attributes), it's time for its content pillars!\n\nSo far, we learned:\n\nüö®Suuuuuper importantüö®\n\nI'm not going through what each tag is and what it does for several reasons:\n\nA part of every web developer (and programmer) job is learning googling skills and finding the information they need.\n\nThe big purpose of the 2022 Web Express Program is to lead you to become a web developer. Becoming a web developer doesn't need knowing by heart what each tag does, but knowing how to get the information you need, use it correctly, and process and work when you are faced with a user story or a client need. Otherwise, this program won't be worth it. There are a lot of tutorials that teach the same thing, what each tag does, what HTML is, what JS is, ...etc. Your time is precious and mine as well. You need to spend it wisely, work smarter, not harder!\n\nI've given you some good resources you can use to look for HTML tags and elements. That's all that we need, for instance.\n\nThe right process for coding\n\nHave a global picture and idea about the language or technology (HTML structure, its main pillars: tags, elements, and attributes)\n\nGet good documentation (you'll find by googling and checking the official documentation if the language or tech you're using).\n\nGet your need in from of your eyes (In agile methodology, it's called US (User Story), I'll come through this methodology in a future article):\n\nIn this case, the web page content you want to code. In the field we call it: the template, the UI (User Interface), the HCI (Human‚Äìcomputer interaction) in France we often use IHM (HCI in french) and maquette (model).\n\nStart looking for the elements you need.\n\nWith experience, you'll write HTML code without documentation, and the same goes for any technology or tool. It's simple as that.\n\nDon't worry about it, everything is difficult at the beginning once learned it becomes 'clear ' and with practice it becomes 'easy'.\n\nSo, talking about practice, let's start practicing\n\nI chose these HTML elements because they are a must-know. Almost every web page you'll be building as a web developer will be using these elements:\n\nHeaders, input elements, media elements.\n\nHere is what we are going to build:\n\nIt is not beautiful as a web page ^^' but every web page is like that without a style. The beauty comes from the CSS code (we'll add it in the next chapter).\n\nUser eye vs. developer's eye\n\nAll right, how to do this? First, you need to build a developer eye (that also comes with experience and practice)\n\nThe methodology\n\nWith time every developer builds their way of coding. You'll build yours with time. Meanwhile, this is mine!\n\nSet the main structure\n\nAdd comments for each section\n\nDivide into smaller blocs and start building bloc by bloc\n\nThat's it!\n\nIf we follow the process, we have the main page <main> HTML tag. Two blocs inside, we can see them as <section> HTML element, we can also use <div> but for semantic and web page accessibility reasons, it's good practice to build a semantic HTML page. It's also good for Google indexing. There is an upcoming article about it in this chapter üòâ\n\nInside each section, we need headers and some HTML elements.\n\nNote:\n\n<hr/> is just a line divider to make things a bit well organized.\n\n<!-- comment text --/> is the way we add HTML comments for code readability.\n\nFirst bloc (section)\n\nOne big header, <h1> followed by a smaller one <h2>, followed by a paragraph. Then another small header <h2>, a link <a> and an image <img>.\n\nFor each element you want to render on your web page, make a quick google search, or look at any HTML cheat sheet that will give you the tag name and its example.\n\nTranslated to code:\n\nThe section tag is used to define a section. Inside we add our HTML elements: headers h1 and h2, a paragraph and image.\n\nSecond bloc (section)\n\nThe second section is a form. Every web app has a form. It's used everywhere, so you must learn it. I explicitly put on all the different inputs and types of inputs and elements commonly used for a web developer's daily tasks.\n\nFor each label input pair, I wrap the HTML element in a div. You don't have to do it, but it's always good to divide your interface into small blocs. This philosophy is also used in modern front-end libs and frameworks such as React, Angular, and VueJS.\n\nHere is how each of these different elements is coded in HTML:\n\nAll gathered gives the following code:\n\nGet to code!\n\nNow, it's your turn to build the bonus part:\n\nThat's it for this time. You'll find the whole code in the 2022 Web Program repo (with the bonus üòâ).\n\nIf you need further explanation or have issues with your code, please contact me on LinkedIn. We'll resolve it together!\n\nThe next article requires this article's knowledge!\n\nI- General Web Knowledge\n\nII- Web page skeleton: HTML\n\nHTML and Page structure\n\nElements & attributes\n\nForms, inputs, media, iFrame, ...\n\nLists & tables\n\nEvents\n\nWeb storage\n\nSemantic HTML\n\nAccessibility\n\nLet's build a better 'us' for 2022!\n\nLearn more about the 2022 Web Program:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nIf you like my article, subscribe to get my latest ones. If you like to experience Medium yourself, consider supporting me and thousands of other writers by signing up for a membership. It only costs $5 per month, it supports us, writers, and you have the chance to make money with your writing as well. Of course, you can cancel the membership anytime. By signing up with this link, you'll support me directly with a portion of your fee, it won't cost you more. If you do so, thank you a million times!\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/dcb8b8715125"
  },
  {
    "id": "1cd709c3a418",
    "content": "What are elements and attributes in HTML\n\nHTML elements & attributes examples!\n\nWhat are HTML attributes? What are HTML elements?\n\nAfter learning about the general structure of an HTML page, we'll learn about HTML attributes and elements. A blank HTML page is not interesting ^^' isn't it?\n\nHTML Elements\n\nAn HTML element is what we created from a tag start to its end.\n\n<tag> This is an HTML element </tag>\n\nA tag is surrounded by < and >. If it's a closing tag, we need to add a /.\n\nThere is an exception to this rule, though. It's the <br> tag that doesn't have a closing tag used to define a line break.\n\nExamples of some HTML elements:\n\nYou've already used some HTML elements in the HTML structure article.\n\n<h1>This is the page big header</h1> for the big header\n\n<p>This is a simple paragraph</p> for the small paragraph\n\nYou may have noticed other elements in the HTML structure article example.\n\nbody, html and head.\n\nEach HTML element has its own job. p ' s work is to define a paragraph. h1 's job is to define a header level 1 (the biggest header),\n\nFor everything you want to render on your web page, there is an HTML element you can use for that purpose.\n\nDo you have to learn them by heart to create your web page content?\n\nNo, at all. It's with practice you'll finish by memorizing them unconsciously (like driving a car üòâ, at first, you'll look at the gearbox each time until it becomes acquired unconsciously!)\n\nSo the keyword here is practice! Whenever you need a tool, you check the toolbox and get it. Here is your toolbox by Stanford:\n\nHTML Attributes\n\nAll right, now that we learned about HTML elements, it's time to learn HTML attributes.\n\nWhat are HTML attributes?\n\nHTML attributes are like parameters/ information/ data we need to provide to an HTML element.\n\nSo, yes, an HTML element has attributes. Thus, each attribute is always used in the start tag, and its format is key/value pairs like attributename= \"valueoftheattribute\".\n\nExample\n\nThe same example of the HTML structure with the img HTML element. This element uses 3 attributes in the example below: src, width and height:\n\nYou've just learned the logic behind HTML elements and attributes. The same applies to the other existing HTML elements and their attributes. Each element has its attributes.\n\nBy the way, you may have noticed that img element doesn't have a closing tag, <img ... />. The same logic applies, is got an / at the end, just a small differentiation in the syntax. There are some other elements that don't have a closing tag:\n\n<input />, <meta />, <link /> and <img />.\n\nAgain, no need to memorize them. You'll end up doing so unconsciously. Here is a super good resource to help you get what you want when coding an HTML page:\n\nThat's it for today!\n\n2022 Web Program Repo.\n\n2022 Web Program Roadmap\n\nI- General Web Knowledge\n\nII- Web page skeleton: HTML\n\nHTML & Page structure\n\nElements & attributes\n\nForms, inputs, images, multimedia, canvas, and iFrame\n\nLists & tables\n\nEvents\n\nWeb storage\n\nSemantic HTML\n\nAccessibility\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf you like my article, subscribe to get my latest ones. If you like to experience Medium yourself, consider supporting me and thousands of other writers by signing up for a membership. It only costs $5 per month, it supports us, writers, and you have the chance to make money with your writing as well. Of course, you can cancel the membership anytime. By signing up with this link, you'll support me directly with a portion of your fee, it won't cost you more. If you do so, thank you a million times!\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/1cd709c3a418"
  },
  {
    "id": "78ebdcb6d874",
    "content": "HTML: The Foundation of Any Web Page\n\nWhat is HTML used for, how do I write HTML code, and how do I start HTML?\n\nNow that we learned about the Web, general knowledge we needed to know. We are ready for the next step!\n\nThe next step is HTML. To quickly refresh your memory, HTML is the web page skeleton and structure, CSS is its style, and JS is its interactions and behavior. These three technologies are web drivers. The Web can't live without them!\n\nThis chapter of the 2022 Web Program will be about the web page structure - HTML.\n\nWhat's HTML?\n\nHTML: HyperText Markup Language\n\nHypertext is a text which contains links to other texts. One document points to another document which points to a bunch of other documents, and it grows on and on.\n\nMarkup is to mark something up, to annotate. On the Web, it's all about content. We want to annotate the content to tell the browser what this content is, an input, a header, a table, ...etc., and that's what HTML does.\n\nLanguage is a programming language basically implies that it has its own syntax meaning there's a right and a wrong way to code it. Not respecting the syntax will cause parsing and potentially rendering errors. Thus, HTML is a language.\n\nWhat does it look like?\n\nHTML looks like instructions for a document structure. The good thing about it is that its tags provide semantic meaning, machine-readability, and human-readability to the content on the page.\n\nMain structure\n\nAs you can see and read:\n\nIt's an HTML document.\n\nIt got the web page header.\n\nIt got the web page body.\n\nThat's it!\n\nThis is what will see on the browser:\n\nSee HTML in action\n\nHere are the steps you need to follow to see HTML in action:\n\nCreate a file with .html extension.\n\nAdd the code above to your file or copy from the 2022 Web Program Repo.\n\nOpen the file with any browser.\n\nEt voila!\n\nWe see the big title and a small paragraph. That's all for this article. It's not interesting with only a title and paragraph. The next articles will help us create a complete web page content üòâ\n\nTo sum up\n\nHTML's job is to annotate content and define document structure and as any language, it has a right and wrong syntax, which you'll have to learn in order to code it.\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\nII - Web page skeleton: HTML\n\nHTML & Page structure\n\nElements & attributes\n\nForms, inputs, images, multimedia, canvas, and iFrame\n\n...\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf you like my article, subscribe to get my latest ones. If you like to experience Medium yourself, consider supporting me and thousands of other writers by signing up for a membership. It only costs $5 per month, it supports us, writers, and you have the chance to make money with your writing as well. Of course, you can cancel the membership anytime. By signing up with this link, you'll support me directly with a portion of your fee, it won't cost you more. If you do so, thank you a million times for your precious support ‚ù§\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.",
    "link": "https://medium.com/p/78ebdcb6d874"
  },
  {
    "id": "499fb0707220",
    "content": "üî• 2022 Web Program Chapter n¬∞ 1 is Done\n\nCongrats, you've just accomplished your first step toward web development!\n\nHi everyone üëã\n\nReally proud of everyone who followed and managed to stay motivated! Congrats!\n\nSo far, we have learned the basics about how the web works, its language, and how the browser interprets and plays a big role in the game!\n\nTo recap and keep refreshing your memory, here is the first chapter articles:\n\nChapter n¬∞1: General Web Knowledge\n\nHow it works\n\nHTTP & HTTPS\n\nHeaders & methods\n\nCookies & sessions\n\nBrowsers\n\nJSON\n\nSecurity\n\nThe next level is HTML. Here is the roadmap for this month!\n\nChapter n¬∞2: Web page skeleton: HTML\n\nHTML & Page structure\n\nElements & attributes\n\nForms, inputs, images, multimedia, canvas, and iFrame\n\nLists & tables\n\nEvents\n\nWeb storage\n\nSemantic HTML\n\nAccessibility\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf you like my article, subscribe to get my latest ones. If you like to experience Medium yourself, consider supporting me and thousands of other writers by signing up for a membership. It only costs $5 per month, it supports us, writers, and you have the chance to make money with your writing as well. Of course, you can cancel the membership anytime. By signing up with this link, you'll support me directly with a portion of your fee, it won't cost you more. If you do so, thank you a million times, you won't regret it!\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/499fb0707220"
  },
  {
    "id": "e3052d6a9c36",
    "content": "Internet is open. Let's learn about securing!\n\nYou need to secure your app!\n\nHi everyone üëã\n\nSorry for my late article for this week. It was such a busy week with my project deadlines at work. Anyway, let's get stronger with the web!\n\nThis is the last topic of the first chapter of the 2022 Web Program. If you manage to follow up now, you are fantastic, and you can definitely be a web developer. The next chapters will get in touch with some code. The most exciting part is when you see what your hands have created on the browser!\n\nSo stay motivated! Nothing is impossible, it's a matter of consistency!\n\nWe will not get a deep knowledge of security since this is another specialization in web development. This article is about the primary and general things you need to know about web security!\n\nUse case\n\nLet's first get a real-life scenario of how people get scammed nowadays.\n\nI have an account at Amazon, for example. I shop for whatever I need.\n\nMy Amazon account has confidential information such as my email, password, address, and credit card. (We all seek a faster and hassle-free experience when shopping)\n\nAll this information are stocked somewhere on the cloud (nothing more than a simple server = a simple computer that hosts your Amazon account's data)\n\nOne \"lucky\" day, I received a special discount voucher from \"Amazon\" at my email address. Excited and wanting to get it right away, I click on the link, and I'm forwarded to a page to get the discount voucher. The page asks me to fill in my Amazon account credentials. It's a bit fishy, Nah?\n\nAgain one day, I got a message from my bank telling me that money was wiped off my bank account.\n\nYes, it is a scam. And that's the scenario that happens a lot of times with people not aware of the security issues and not having a general knowledge.\n\nDo wonder how was this possible? Well, the \"special\" discount voucher email was FAKE!\n\nThis is known as a cyber attack! The third party that scammed me is called a hacker.\n\nThe field of cyber security\n\nYour job is to build web apps. Securing them is another domain called cyber security. But you still need some general knowledge to avoid silly mistakes and to alert your team about the crucial need for a cyber security developer in your team!\n\nThere are a lot of cyberattack types:\n\nMalware Attack\n\nIt's a very common attack. It's about malware (a program) that you download unconsciously. An attachment, for example, could have malicious viruses embedded within and thus corrupt your system.\n\nPhishing Attack\n\nStarts like the scenario above. The hacker will send you a fraudulent email and make it appear as if it's coming from a legitimate source (by adding the same style, the same logo, the same police, ...etc.). Through this mail, the hacker will either install malware to attack your system or steal sensitive data (like Amazon account credentials in the example above).\n\nMan-in-the-middle Attack\n\nCalled like that because the hacker gets between you (user) and the website server. The hacker will get the user's IP address and then gets secretly intercepted in the communication line between the server and the user. The hacker uses to do so malware or an unsecured WiFi network.\n\nPassword Attack\n\nThe easiest one. Using common passwords such as \"admin\", \"123\", \"yourname\", ...etc. The hacker uses a common password or all possible standard alphabets combinations with password hacking systems. That's why each time we choose a password, we are asked to type in a unique password with a combination of alphabets, numbers, and special characters.\n\nHow to avoid cybersecurity attacks\n\nHaving some good practices\n\nInstall a firewall: a virtual wall between my computer and the internet. This virtual wall will filter the communication between my computer and the internet.\n\nUnique alphanumeric passwords: there are a lot of apps that can generate a strong password. But you also need to save these passwords somewhere safe.\n\nAntivirus software: to detect viruses and delete them before they corrupt your system.\n\nAwareness: beware of suspicious emails and SMS, notice details, and not the big picture. Before clicking the link, hover it with your mouse to check if it's really the website you know and not some suspicious thing such as: \"www.cutt.cof.IOqp0Xo\". When asked for your credential, double-check even more when asked for your credit card credentials.\n\nCompanies are not an exception!\n\nCompanies are even more subject to various attacks. Some examples of attacks:\n\nAdvanced Persistent Threat (APT)\n\nThe hacker gets access to the company's network for a long period. He then gains continuously confidential information. This makes the company lose billions of dollars. It's not a joke.\n\nDenial of Service Attack & DDoS\n\nThe company network is flooded by traffic and leaves legitimate service requests. Multiple systems are then used to launch the attack, called DDoS: Distributed Denial of Service.\n\nSQL Injection Attack\n\nAnother attack is by using SQL. It stands for Structured Query Language. A straightforward language to learn to communicate with the database (insert, get, delete data). The hacker uses SQL injections to view, edit and delete tables from the database.\n\nSecurity is a big challenge for companies. It never ends because it is people against people, minds against minds. And human is intelligent. He will continuously innovate to find new ways to attack!\n\nThat's it for the article.\n\nYou can be proud of yourself. You've just gained the general knowledge level in the game!\n\n2022 Web Program Roadmap\n\nI- General Web Knowledge\n\nHow it works\n\nHTTP & HTTPS\n\nHeaders & methods\n\nCookies & sessions\n\nBrowsers\n\nJSON\n\nSecurity\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/e3052d6a9c36"
  },
  {
    "id": "f251abf50568",
    "content": "JSON, an essential pillar for web developers!\n\nHi everyone üëã\n\nSo far, we have built a general knowledge about the web and how it works.\n\nSpecial thanks to all the people that contacted me on LinkedIn and trust me to lead them through this exciting journey of 2022 ‚ù§\n\nJSON is one of the essential pillars of the web. You'll see and manipulate JSON data for your life when you are developing apps.\n\nJSON stands for:\n\nJavaScript Object Notation\n\nSimply put, you can see JSON as a data representation format, nothing more. It's like XML if you heard or know about it.\n\nWhy is JSON a Must-Know?\n\nJSON is used wildly in almost everything on the net. Its success is thanks to its characteristics:\n\nLightweight to send back and forth (super important for app's performance and user experience)\n\nEasy to write (the contrary of XML)\n\nEasy to read (the contrary of XML)\n\nIntuitive\n\nIntegrated easily with JavaScript (a strong point since JS is used throughout the web for frontend (the website interface) and backend (the behind the scene like a 'kitchen' where data (meals) are prepared, fetched, queried, and much more ...)\n\nEvery library or framework has some form of built-in or library functionality to parse JSON data to strings, objects, ...etc.\n\nAll these strong points make JSON today extremely easy to use inside of a programming language. You're going to use JSON for life for creating API, consuming them, creating config files.\n\nNote: I talk about API several times since everything on the web uses them. Here is an analogy of their job.\n\nWe'll come through in the coming chapter of the 2022 web program but if you want to cheat:\n\nNow, let me show you what's JSON concretely!\n\nSince it's a data representation: we need it to represent data type. We have string for text data, number for numeric data, ...etc.\n\nHere are the types JSON supports:\n\nStrings: \"this is an example\" \"David\" \"Student\" ...etc.\n\nNumbers: 18 1.3 -20 1.5e10 ...etc.\n\nBooleans: true false.\n\nnull: null\n\nArrays: [1, 2, 3] [\"Hello\", \"this\", \"is\", \"a\", \"list of strings\"]\n\nObjects: {\"key\": \"value\"} {\"age\": 28}\n\nBuilding a JSON file:\n\nThe file must have .json extension.\n\nRemember, a JSON file is a data representation, so unless you have some data you want to represent, it's not coherent to create a JSON file for just one string or number.\n\nEvery JSON file starts with opening curly braces and ends with closing curly braces. { ... }\n\nInside of these curly braces, we add all the \"key\" and \"value\" pairs. Every key and value is surrounded by double quotes except for number and boolean values. Every key is followed by a colon and then the value of that key (e.g. \"name\": \"David\".\n\nWe separate multiple key-value pairs with commas.\n\nExamples:\n\nA JSON file:\n\nFor numbers, no double-quotes. In the following example, we have all sorts of possible types in JSON. Strings surrounded by double-quotes. Numbers are not surrounded by double quotes. We have an array of strings and an array of objects such as \"books\":\n\nSometimes it's a bit complicated to see what's the problem with a big JSON file since one missed colon will make your JSON file invalid.\n\nThankfully, many websites check where the error is for you. Otherwise, you'll become like üòÇ :\n\nThe one I personally use is JSON lint. Of course, there are a lot of good other tools and websites.\n\nhttps://jsonlint.com/\n\nAll our upcoming interactions with data and API will use JSON format, and congrats because you've just learned it!\n\nTo sum up:\n\nJSON is a data representation format\n\nCommonly used for APIs, app configuration files, and many other programming things.\n\nIts strength resides in its intuitiveness, readability, lightweights.\n\nWildly used and built-in modern web technologies.\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\n1- How it works\n\n2- HTTP & HTTPS\n\n3- Headers & methods\n\n4- Cookies & sessions\n\n5- Browsers\n\n6- JSON\n\n...\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/f251abf50568"
  },
  {
    "id": "727a0b0dee04",
    "content": "Mr. Browser, what's your job?\n\nWhat you need to know about browsers\n\nWe have discovered what happens behind the scene when making a request and how web pages communicate on the Internet in the latest episodes. But, there is still a missing puzzle: the browser.\n\nDo you know what's its job in the whole story?\n\nLet's start!\n\nThe browser plays an important role that consists in doing the following tasks:\n\n1Ô∏è‚É£ DNS resolution\n\nI mentioned this in the latest articles. DNS is like a register that has for each IP address its corresponding domain name. The browser is the one who resolves this task. That means that if I publish a website online, I don't need to get the IP address for my website manually the browser does automatically.\n\n2Ô∏è‚É£ HTTP/HTTPS exchange\n\nAt this step, the browser has the server address. The communication can start using the internet language (HTTP) or secured language (HTTPS) to talk between web-based applications.\n\nThe browser acts as a client. It requests a website and waits for the server to process its request and respond. The response can be HTML code, images, videos, files, audios ...etc.\n\n3Ô∏è‚É£ Rendering\n\nThis step is the most exciting one when you get to see the result of your request and work!! Hihihi.\n\nIn this example, we receive HTML, images, JS, and CSS files. But that's because I requested access to my website. There are cases when we get only data from the backend instead of HTML code. It depends on what we asked for.\n\nTo know what we are waiting for as a response, we need to check the response body. The Content-Type tells us what content we should receive. If it's text/html, that means we receive an HTML page.\n\nThis code (HTML) will be decrypted by the browser and rendered as the structure of a website (usually an ugly page), the browser will apply the received style (CSS file) and the JavaScript code that will make our page interactive.\n\nFor video, images, gifs, ...etc. They are received and displayed by the browser.\n\nThe browser's main job:\n\nFind the right home (IP address)\n\nAsk for the web page (for my website example, it can also ask for author things such as a list of articles, or whatever form the server)\n\nGets what it needs to render the page (HTML (for the structure of the page), CSS (kind of makeup for the page), JS (add interactions, animations, ...etc), and images, videos, ...etc.\n\n4Ô∏è‚É£ Clean & repeat\n\nSimply repeat endlessly with other requests.\n\nJoin our community and 2022 web program!\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\n1- How it works\n\n2- HTTP & HTTPS\n\n3- Headers & methods\n\n4- Cookies & sessions\n\n5- Browsers\n\nJSON\n\nSecurity\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/727a0b0dee04"
  },
  {
    "id": "1cb9e4ad6f7b",
    "content": "Cookies & sessions üç™\n\nWhat is a web cookie and session?\n\nNow that we have the base foundation about how we communicate on the internet and how HTTP speaks through its headers and methods in the last articles. We need to complete our vision with some things we need to know before learning about browsers and how they work. We'll learn about cookies and sessions. Two elements that we use on the web, and here is how and why!\n\nCookies ...\n\nA web cookie is also called a browser cookie. It's not something you can eat, Hahaha. A cookie is a small piece of data that a server sends to your browser. The browser may then store it and send it back to the same server. You're wondering what's the purpose of this ping pong game? Well, it's used to tell requests came from the same browser. Let's clarify things in your mind.\n\nUse case: a famous example of the usage of cookies is the checkbox we often check to tell the browser that we want it to remember us!\n\nYou may say why this is important. I can each time log in again and again. The crux of every business issue is money. For the web, it's user experience. To keep you satisfied, to capture your attention, to make you enjoy the experience so that you came back to that web page you visited again and again. Humans are lazy. We created and automated many things to live comfortably: cars, planes, connected objects (IoT) ...etc. Typing your user name and password several times and facing the hassle of reinitializing the password because you forgot it ...etc, is a pain in the ass. Cookie's magic or job is to store that information and send it with the request under the hood (without you knowing what's happening). The server receives the request with that information and knows you right away. Thus, no need to type that information each time you want to log in.\n\nOther use cases:\n\nSaving your preferences (theme, dark/light mode, settings, etc.)\n\nTracking or recording, and analyzing your behavior on the internet to show you ads based on your behavior üòà\n\nCookie basics:\n\nThe first time a browser connects with a particular server, there are no cookies.\n\nThe server includes a set-cookies : header that defines a cookie when the server responds.\n\nEach cookie is just a name-value pair (e.g. USERID=104011).\n\nIn the future, whenever the browser connects with the same server, it includes a Cookie: header containing the name and value, which the server can use to connect related requests.\n\nAnd you're recognized automatically!\n\nWeb sessions\n\nA session is also used to store data. The difference between cookie and session relies on the following:\n\nCookies and Sessions work together:\n\nCookies are used by the server to implement sessions, and here are the key points you need to know about it:\n\nA session is a pool of data related to an active connection (one browser instance).\n\nTypically the cookie for an application contains an identifier for a session.\n\nData will be available in all future requests from the same browser.\n\nDoes cookie exist? If yes, then use it to find the session data. If not, then create a new session and a new cookie.\n\nFor each request, the browser will save session data where future requests can find it.\n\nSee cookies and sessions üëÄ\n\nYes, you can see cookies and sessions. I'll use the same example of my last article (Web methods and headers). When editing my article on Medium. Whenever I stop typing, Medium saves the new changes. One of the mandatory information is the article UID (a unique id) so that the changes will apply to my article in the database. To check cookies used for a request, all you need is :\n\nGo to the Network tab ( F12 )\n\nSelect a request (on the left). You need to trigger the request. To let Medium make an HTTP request to update my article (remember about methods? Medium will use POST to update). I need to type something and stop.\n\nThe request will appear, click on it, and in the sub bars next to the requests, click on Cookies. You'll see a bunch of information saved to be sent with the request:\n\nGood to know!\n\nThe client-side storage is not recommended as a data storing solution for every information you want to keep in the browser's memory. Because cookies are sent with every request, we can imagine the significant performance impact they can cause, especially for mobile data connections.\n\nThat's why it's more recommended to use modern storage APIs (always keep in mind the user experience, we don't want to make him wait)\n\nModern solutions for client storage:\n\nLocalStorage\n\nSessionStorage\n\nIndexedDB\n\nThose modern APIs data can be accessed through your browser:\n\nF12, go to the Applciation Tab\n\nOn the left, see Storage bloc:\n\nOf course, each APIs has advantages and disadvantages. I'm not going through each one. It's a bit out of the main topic of this article. But, if you are interested and want an article about it, let me know. I'll add it to my to-dos üòâ\n\nThat's it, the next step is learning about how the browsers work!\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\n1- How it works\n\n2- HTTP & HTTPS\n\n3- Headers & methods\n\n4- Cookies & sessions\n\nBrowsers\n\n...\n\nLearn more:\n\nShare the program with people who want to be web developers! This will help keep progressing and help each other through the journey.\n\nLet's build a better 'us' for 2022!\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/1cb9e4ad6f7b"
  },
  {
    "id": "80c9aaaa126a",
    "content": "Web Methods and Headers!\n\nWeb communication under the hood\n\nThis article is a part of the 2022 Web Program.\n\nAfter learning about the web spoken language, we need to learn the ropes and tricks of this spoken language. HTTP protocol uses methods based on the web page's needs when it communicates to get resources and data.\n\nLet's refresh our memory with what we've learned so far from the last step.\n\nThe browser (client) sends an HTTP request to the web.\n\nThe web server receives the request.\n\nThe server runs an application to process the request.\n\nThe server returns an HTTP response (as an output) to the browser.\n\nThe browser receives the response.\n\nThe received data are displayed in the browser.\n\nHTTP got some methods specified for each job.\n\nHTTP's methods:\n\nThere are mainly:\n\nGET method: to retrieve data/resources.\n\nPOST method: update data/resource.\n\nPUT : replaces all current representations of a specific resource.\n\nPATCH : used to apply partial modifications to a resource.\n\nDELETE : used to delete a specified resource.\n\n...\n\nGET and POST are the most popular and the most used ones. You'll rarely use these in comparison with them. So I'm focusing on these two methods.\n\nGET method\n\nGET method: this method requests a representation of the specified resource. Only used to retrieve data.\n\nUse cases: You want to load all users, employees, books, available places, ...etc.\n\nThis method is essential in every web app. It's used when displaying Medium home page, Google page, whenever you want to get something, then it's a GET.\n\nPOST method\n\nPOST method: this method requests a representation of the specified resource used to send data to save them or do a search on the server-side.\n\nUse cases: You want to save a user, save an order for the logged user, ...etc.\n\nA concrete example for this case is searching on Google:\n\nAs you can see in the illustration above, we need to give the information (cats) in the request's query. The server processes the request. Search for 'cats' and send back the data (the search results).\n\nAnother example, if you are already a writer on Medium, you'll notice when writing or editing an article. The draft is auto-saved. You don't have to save it by yourself.\n\nWhat do you think Medium uses behind to save what I've just typed?\n\nIt's a POST. It takes as input your last modification and updates the draft. If you refresh the page, your modification won't be lost unless there was a problem, and in that case, Medium manages the issue and displays a red notification telling you \"something went wrong ...\".\n\nTo check the request concretely behind, here are the steps:\n\nGo to Chrome or any other browser.\n\nType F12, the Dev Tools will be displayed.\n\nGo to the network tab like below:\n\nAs you can see, the used method is POST.\n\nAs for the other tabs in the Dev Tools (it's a vibrant tool), don't mind it. We'll come back to attack it later.\n\nHeaders!\n\nHTTP headers are nothing else than simple headers. Their job is to pass additional information with an HTTP call.\n\nWe can classify HTTP headers like below:\n\nHTTP Request Header\n\nUse case: Whenever you type an URL and try to access it, your browser sends an HTTP request to the server.\n\nHTTP Response Header\n\nUse case: Because we requested a page, the Web server will send an HTTP response header back to the client (the browser).\n\nHTTP General Header\n\nUse case: The general headers contain directives that must be followed for both the requester and receiver.\n\nHTTP Payload Header\n\nUse case: Go with request or response header and provide extra information about payload data, including content length and the encoding used for transport.\n\nEach header's type has its own job.\n\nTo see it concretely, we can go again to the dev Tools and display the Network tab, and click on the headers sub-tab:\n\nFor my Medium article web page, there is the General HTTP request:\n\nThis header tells the Request header, \"Hey, this is the URL our dear user wants üòö, use the POST method to save the new draft and so on...\n\nThe status code signifies that a request has succeeded or failed and why it has failed. If you still can focus (after the whole information I provided), check out this article to learn about HTTP status codes:\n\nA Request HTTP header:\n\nThe request with the proper method POST and other information such as cookies, content type, ...etc.\n\nA Response HTTP header:\n\nIf you need to keep 3 things in mind from the whole article, here you go:\n\nThe HTTP method that you will be using in your everyday developer tasks are: GET to retrieve data and POST to update data.\n\nHTTP got headers, like a letter's envelope. On the outside of the envelope, we have the sender, the receiver, its address, ...etc. For the HTTP header, it's a bit more complex. We need more information.\n\nHTTP header you'll be checking in your everyday's job as a web developer will be the General HTTP (to see what we are calling), check the request and the response, and the HTTP status code that will give us information about how the communication went so far: was it successful (200)? Was it a bad request (400)? Is there a server error (500)? ... and so on.\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\n1- How it works\n\n2- HTTP & HTTPS\n\n3- Headers & methods\n\n...\n\nLearn more:\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.",
    "link": "https://medium.com/p/80c9aaaa126a"
  },
  {
    "id": "70856478dc6b",
    "content": "The World Wide Web Spoken Language! üîà\n\nHTTP & HTTPS\n\nTo communicate with other people, we speak a language.\n\nHTTP is simply the spoken language between websites on the Internet.\n\nHTTP is a standardized protocol that stands for Hypertext Transfer Protocol. It defines what a request (and response) has to be. In other terms, it determines how we can communicate data for the World Wide Web.\n\nYou may be wondering why an URL works the same even without typing the HTTP protocol. Well, this is working thanks to the browser that auto-completes the URL with the HTTP protocol.\n\nA request or response on the Internet is not a simple question or answer. It is a technical thing that can contain data, metadata (data about data), and how a request should be submitted to make it work properly. The same applies to the response. It can be a website like the case of www.fam-front.com or return some data or nothing.\n\nTo see what a request looks like, here is a capture of the Chrome dev tools network. If you're not familiar with it, no worries, there is a whole chapter dedicated to tooling. It'll make you the expert at using dev tools!\n\nIn this example, I requested my web app www.fam-front.com. As you can see, a typical HTTP request message contains the following:\n\nThe URL: www.fam-front.com\n\nThe method: GET\n\nStatus code\n\nWe need to specify the method (e.g. GET) and the hosting server where the website is stored. Here is a mental picture to help you keep this in mind:\n\nNow, what's HTTPS?\n\nInternet is open to everyone. If I can visit a website, you can too. As I showed earlier, the sent request is visible in plain text, which means hackers can use this information against us. That's why a website should be safe and secure on the Internet to prevent a hacker attack. We need to use a secured communication channel that already exists named HTTPS (HTTP Secure).\n\nTo have secured communication, we need the SSL (Secure Socket Layer) and its successor, the TLS (Transport Layer Security). Think of both SSL and TLS as a wrapper that protects your communication from snooping, tampering, and other hackers' attack.\n\nFor secure websites, a little lock appears next to the HTTPS in the URL:\n\nThus, the HTTPS protocol ensures that your requests on the Internet are safe and protected:\n\nThe browser asks the Google server to engage a secure connection by providing a digital certification (like an ID card for humans) that proves that the one who wants Google page source code is Google itself. If the certificate is not valid, the browser will warn you with this page that you may have already seen:\n\nTakeouts\n\nHTTP is the protocol and the spoken language on the Internet to communicate and exchange data between web-based applications.\n\nHTTP is like a messenger of the web.\n\nHTTP protocol delivers content like images, files, videos, audios, documents...etc.\n\nBrowsers speak the HTTP protocol and respect it to communicate and display web applications for the user.\n\nHTTP is connectionless, which means that the client (browser) disconnects from the server after a client request. When the response is ready, the server re-establish the connection with the client to deliver the answer for its request.\n\nFor secured communication, use HTTPS.\n\nDigital certifications are provided by certificate authorities. It's like a government that issues your ID and passport.\n\nThe next step is learning about the URL structure, request headers, and methods.\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\n1- How it works\n\n2- HTTP & HTTPS\n\n3- Headers & methods\n\n...\n\nLearn more:\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.",
    "link": "https://medium.com/p/70856478dc6b"
  },
  {
    "id": "260cee68a88f",
    "content": "How Does a Web Page Load? What Happens in the Background?\n\nWhat happens behind the scene when you visit a webpage?\n\nHello there,\n\nOur 2022 Web Program is launched, and this is the first step we are going to take:\n\nHow the web works deep inside? What happens when you click on a web page?\n\nBefore learning any skill about the web, we first need to understand how the web works. This article will clearly explain how the web works to have a clear mental picture.\n\nThis step is essential before learning anything about the web. The web or the Internet is not about just visiting an URL by entering it in the browser. Many things happen behind the scene, which I will expose to you.\n\nThe story starts from the website door... the URL\n\nAn URL is like a home door. We type an URL, hit enter, and the magic occurs. Let's see a website as a book. The book you're visiting is not on your laptop or desktop. Since we can call it on the Internet, which means that somehow it is stored somewhere, it is held in another computer so that everyone on the Internet can access it by its entry door, the URL.\n\nNow, how does the server know that he has the files for the entered URL? Good question, Nah? There are more hidden steps between the user requesting an URL and the server answering the request.\n\nThe relationship between the server and the website\n\nA server is nothing else than a computer available 24H/24. The server needs 3 things to show you the web page you're waiting for:\n\nThe URL has its translated address (the IP address) on the DNS server.\n\nThat IP address is nothing but the hosting server's authentic and unique address.\n\nThe IP address is the server's address that hosts the web page. This means our website files (source code) are somewhere on that server and available whenever.\n\nIf the server gets those 3 things, the connection will be established.\n\nThe IP address is like a home address. It's unique and every server got one.\n\nThe DNS server is like a register that will tell as for an URL 'X' its IP address.\n\nNow let's see a bigger view of the whole thing\n\nWhy do we need a DNS? The web page got already a unique URL, Nah?\n\nGood question! When you visit someone, you need a unique address to reach him. A URL is already unique.\n\nWell, the actual address of a computer is not human. Every computer on the Internet has a unique IP address. It's impossible to remember the IP address for every website you want to reach. It's something like: 172.56.190.3.\n\nTo make things more human. The DNS step was added. DNS server got a register of each URL on the Internet and its corresponding address. Like phone numbers, by the way.üòú I only memorize mine. For others, I use their names to find them on my smartphone (ü§´).\n\nThere are multiple DNS servers...\n\nImagine the whole world connected people, request the same server. It's like:\n\nWe need multiple servers worldwide to dispatch the enormous amount of demands. There is the master DNS server that the browser contacts to get the IP address in each area. After that, the master DNS server can communicate with the servers to get the IP address.\n\nFinal big view\n\nThe source code is the website content. It got the HTML, CSS, JS, and resources the web page needs to get rendered by the browser. This part will be explained in the next chapter of the program.\n\nURL is composed of a lot of things...\n\nThat's what we will see next time with the HTTP & HTTPS section!\n\nStay tuned and see you next time ;)\n\nGood to know\n\nURL = Uniform Resource Locator\n\nIP = Internet Protocol\n\nDNS = Domain Name System\n\n2022 Web Program Roadmap\n\nI - General Web Knowledge\n\nHow it works\n\nHTTP & HTTPS\n\nHeaders & methods\n\n...\n\nLearn more:\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.",
    "link": "https://medium.com/p/260cee68a88f"
  },
  {
    "id": "89862884b769",
    "content": "The Winner of 2022 Medium Membership\n\nCongrats to the winner\n\nWhen I proposed a year of Medium membership as a gift for the new year:\n\nI was expecting to receive a lot of participants. I don't know if it's because of the period (new year, everyone is with family) or the luck of Samer Kayali.\n\nAnyways, since he was the only one who asked for it, HE GOT IT üéä\n\nI wish and hope you will use this membership wisely, to read, learn and become a better you in 2022.\n\nWish you all the best Samer ‚ù§\n\nHappy new year to everyone!\n\nFAM",
    "link": "https://medium.com/p/89862884b769"
  },
  {
    "id": "20387cab9b07",
    "content": "My Web Articles Roadmap for 2022\n\nLet's upgrade our web skills and knowledge!\n\nLike every year, we start the year with goals and plans.\n\nIn this article, I'm sharing my Medium articles plan for 2022. It'll be a roadmap for beginner developers as well as confirmed developers.\n\nI'm going step by step so that you can build strong knowledge. This roadmap is flexible. It can be adjusted based on readers' feedback and requests. Thus, don't hesitate to share your interests in your learning journey with the web.\n\nUPDATES\n\nGeneral Web Knowledge\n\nHow it works\n\nHTTP & HTTPS\n\nHeaders & methods\n\nCookies & sessions\n\nBrowsers\n\nJSON\n\nSecurity\n\nWeb page skeleton: HTML\n\nHTML & Page structure\n\nElements & attributes\n\nForms, inputs, images, multimedia, ...\n\nLists & tables\n\nEvents\n\nWeb storage\n\nSemantic HTML\n\nAccessibility\n\nWeb page style: CSS\n\nSelectors (From basic to complex)\n\nBox model\n\nTypography\n\nPositioning\n\nLayouts: Flex & Grid\n\nShadows, colors, and gradients\n\nTransitions & transformations and animations\n\nResponsive design (Media queries)\n\nWeb interactions: JavaScript\n\nAsynchronous code\n\nThis\n\nVariables\n\nScopes & hoisting\n\nOperators\n\nClosures\n\nHigher-order functions\n\nObjects & methods\n\nArrays, Set & Maps\n\nFunctions & arrow functions\n\nTimeouts & intervals\n\nDestructuring & spread\n\nCallbacks\n\nPromises\n\nAsync, await\n\nModules\n\nClasses\n\nES6+ syntaxes\n\nBOM & DOM\n\nWhat are the BOM and the DOM?\n\nElement selectors\n\nManipulating the DOM\n\nAjax & Fetch\n\nEvent phases in the DOM\n\nEvent loop\n\nAPIs\n\nWeb Performance\n\nCritical Rendering Path (CRP and CSSOM)\n\nReflow\n\nPreload, preconnect, prefetch, pretender, ...\n\nWorkers\n\nImage Optimization\n\nModern rendering strategies\n\nTools\n\nVS Code (code editor)\n\nBrowser & dev tools\n\nVersion control (Git)\n\nTask runner (NPM & Yarn)\n\nLinter\n\nFormatter\n\nBundler (Webpack)\n\nCommit Hooks\n\nAngular\n\nDesign patterns\n\nFactory\n\nSingleton\n\nFacade\n\nMVC, MVVM\n\nServer vs. Client-Side Rendering\n\n..... and knowledge never ends!\n\nEvery feedback is valuable and helpful, so please don't hesitate to enlighten me.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me. This will help me provide more time to write good articles.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter. Get exclusive access to writing opportunities and advice in our community Discord.",
    "link": "https://medium.com/p/20387cab9b07"
  },
  {
    "id": "81560b1e0c67",
    "content": "Your Ultimate Guide to HTML5 Inputs\n\nInputs in HTML5 have no secrets for you\n\nThis article gathers the essential inputs you need to be aware of for your web coding journey.\n\nIf you're inpatient and want to jump to the code examples right away. Here you go üòâ:\n\nGeneral inputs\n\nThese general inputs are already known and used frequently.\n\nFrequently used inputs\n\nSuch as submitting a form with text, number, phone, email, numbers, and much more:\n\n<input type=\"password\">\n<input type=\"button\">\n<input type=\"submit\">\n<input type=\"reset\">\n<input type=\"text\">\n\nEmail input\n\n<input type=\"email\" id=\"email\" name=\"email\">\n<input type=\"email\" id=\"email\" name=\"email\" multiple>\n\nPhone input\n\n<input type=\"tel\" id=\"tel\" name=\"tel\">\n\nNumeric input\n\n<input type=\"number\" name=\"age\" id=\"age\" min=\"1\" max=\"10\" step=\"2\"><input type=\"number\" name=\"change\" id=\"pennies\" min=\"0\" max=\"1\" step=\"0.01\">\n\nMedia Inputs\n\nDuration inputs\n\nOption Inputs\n\nAdvance inputs\n\nSlide control field\n\n<label for=\"price\">Choose a maximum house price: </label>\n<input type=\"range\" name=\"price\" id=\"price\" min=\"50000\" max=\"500000\" step=\"100\" value=\"250000\">\n<output class=\"price-output\" for=\"price\"></output>\n\nWith its JS code to make it work:\n\nconst price = document.querySelector('#price');\nconst output = document.querySelector('.price-output');\n\noutput.textContent = price.value;\n\nprice.addEventListener('input', function() {\n  output.textContent = price.value;\n});\n\nURL, search, color, and hidden input\n\n<input type=\"url\" id=\"url\" name=\"url\">\n<input type=\"search\" id=\"search\" name=\"search\">\n<input type=\"color\" name=\"color\" id=\"color\">\n<input type=\"hidden\">\n\nAll examples are gathered here üòâ\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it, if you find it worth it. Please support me by becoming a paid member, a part of your fees will be sent to me.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/81560b1e0c67"
  },
  {
    "id": "1e63909e9187",
    "content": "Dear reader, Happy Marry Christmas...\n\nMy wishes for a happy and peaceful 2022 with a gift of a year of Medium membership.\n\nHi dear readers,\n\nThis time, I'm not writing a technical article about the web and technologies.\n\nThis year was so hard. Many of us have lost a friend, a family member, a colleague, a person they cherish. Some people can't meet their families or work and have financial problems.\n\nThis year was probably the hardest for me and for many of us. But this too shall pass!\n\nI hope the next year will bring inner peace to everyone.\n\nI hope that 2022 will heal some of your wounds and bring joy to you and your beloved ones.\n\nI wish you health, happiness, and peace.\n\nMay 2022 bring to you new goals, new accomplishments, and plenty of new inspirations into your life.\n\nI believe that knowledge is the greatest weapon to fight life problems. That's why I chose to give one of my followers a year of Medium membership. If you are my follower and interested, send me an email at famzil.contact@gmail.com.\n\nI'll run a random name picker and record it at the end of 2021 and publish the lucky winner next year :)\n\nMany thanks\n\nFAM",
    "link": "https://medium.com/p/1e63909e9187"
  },
  {
    "id": "69e55648891e",
    "content": "What is a skeleton screen üíÄ?\n\nWhy is skeleton loading important?\n\nHi there üëã,\n\nDo you know what a skeleton screen is? I'm sure everybody knows it! Do you disagree? This is a skeleton screen:\n\nIt's the gray shapes shown while the data is loading from the server instead of displaying a classical spinner.\n\nI was so eager to discover how to do this in a web app but couldn't find it because I didn't know how it was called back then. The skeleton screens are so popular because they make the \"perceived waiting time\" seem faster (the illusion of Speed), even though the time was precisely the same.\n\nWhy do we use skeleton screens?\n\nAlthough the loading time is the same, experiments showed that users find the page loading time faster with skeleton screens than with spinners. It's an illusion, but since it changes the user experience, we trick ourselves and our users üòÜ\n\nFor developers, this is not \"sexy\". Implementing a skeleton page or bloc complicates the developer's task. A loader is simple and can be put quickly. A skeleton screen is entirely different. You need to create by yourself the wireframe of the page, with placeholder boxes for text and images. It requires maintenance. If the bloc's general appearance had changed, so should its skeleton.\n\nCreating your own skeleton...\n\nIngredients:\n\nA simple div styled with the CSS class skeleton\n\nA simple gray box style for the skeleton class with a linear gradient.\n\nAnimation keyframe to make it shine.\n\nA more complex example can be found here.\n\nFinal words...\n\nSince I got the key name, I looked for other appellations üòà\n\nghost elements\n\ncontent placeholders\n\ncontent loaders\n\nHere are some companies that use skeleton screens:\n\nBlockchain.com, YouTube, Facebook, LinkedIn, Medium ...\n\nThere are tools to help you implement the skeleton screens. For example:\n\nReact Placeholder\n\nReact Loading Skeleton\n\nIt's all about the user experience ...\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it, if you find it worth it, would you please support me by becoming a paid member? A part of your fees will be sent to me.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/69e55648891e"
  },
  {
    "id": "9358b5d4bd79",
    "content": "A Complete Roadmap to Learning Vue.js\n\nThe methodically ordered list of top 6 learning resources for Vue.js.\n\nBecause having the right resource is essential to any learning. This article combines the top resources to help you build a strong and deep knowledge about Vue.js.\n\nAs you may already know, learning about Vue.js requires some initial knowledge about HTML, CSS, and JavaScript. Thus, it's unrecommended to jump right away to learning frontend frameworks without learning the web basics first.\n\n1. Vue Documentation\n\nNo one knows you better than youserf, nah?\n\nThe same goes here for frameworks and technologies in general. This is the leading Vue site where you can find comprehensive knowledge and documentation accompanied by cookbooks, code examples, and references. This should be the starting point if you want to build a deep understanding of Vue.js.\n\n2. Vue Forum\n\nAgain it's an official resource of Vue.js. Their official forum is the perfect place where you can search for help and answers. You can filter, select a category and ask precise questions.\n\nGot a question? Check the Vue.js forum!\n\n3. Vue CLI\n\nIf you're already familiar with Angular CLI. This tool is kind of the same thing for Vue. It's a standard Tooling for Vue.js Development. You can think of it as a gentle onboarding on Vue JS Technical side by being helped with some rich features:\n\nGraphical User Interface\n\nRich features ( Support for Babel, TypeScript, ESLint, PostCSS, PWA, Unit Testing & End-to-end Testing, etc.)\n\nReusable solutions to everyday needs.\n\nAlready ready for right away usage (CLI is fully configurable, no need to inject)\n\nAnd much more...\n\n4. Vue Mastery\n\nOnce you have built a general and deep knowledge about Vue.js and experiment coding with the help of Vue CLI, you can jump to a more advanced stage. This resource provides you with weekly Vue.js tutorials, courses, live training, blog, some free courses - a lot of exciting things that will guide your journey to mastery.\n\nThe disadvantage of this resource is that it's a paid platform. But I believe that investing in your skills and yourself is the most paying thing when it comes to ROI (Return Of Investment).\n\nThere is an exception, though, for Christmas, the free week from December 17‚Äì20.\n\nAn advantage of it is its methodic education way. It takes you from one level to another, from beginner to advanced.\n\nAs usual, I can't stop myself when I see beautiful graphics. Their website is so beautifulüòª, it reminds me of CodinGame.\n\n5. Vue School\n\nA paid platform too. But this time, you learn from core-team members and industry experts. Its annual price is a bit less expensive than Vue Mastery.\n\nThey have beautiful graphics.\n\n6. Vue GitHub\n\nFind Vue.js code itself in Vue GitHub. If you fell in love with it, you can even contribute directly to their codebase. From my point of view, this is the most advanced step since you go beyond knowing how to use Vue.js. You learn how it works deep inside, and it teaches you to write better code.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter here.",
    "link": "https://medium.com/p/9358b5d4bd79"
  },
  {
    "id": "3a249f4aa6d9",
    "content": "Should you learn the Material Design system?\n\nMy feedback about the Material Design system\n\nYou may have learned or heard about Material design or hesitate whether you should learn it or not.\n\nA short definition of what's Material design:\n\nMaterial Design is a UI (User Interface) system created by Google in 2014. Like any other design system, the purpose is to create and bring a unified user experience in the application across all devices. The Material Design system implements the Google and Apple popular flat design. Material Design ensures a consistent user experience.\n\nWhen I say design, it really means the design of everything: typography, grids, space, scale, color, and imagery.\n\nIn short words:\n\nMaterial design tells designers how to make things look. Wich leads to intentional designs with hierarchy, meaning, and focus on user experience.\n\nShould you learn Material design?\n\nThis is the big question. It is not a small and straightforward UI system. It wraps a lot of components and properties. Here is my feedback:\n\nWhen I was checking for new wildly used things on the tech market nowadays, I found that Material Design is a must-know to be competitive and better valued as a frontend profile in this market.\n\nWhen I went through the documentation, I found it not intuitive at all, not because it's a complex system but because I was too much used to bootstrap, Reactstrap, and all UI systems that are Bootstrap-like style and way of doing things.\n\nChanging what I was so familiar with was quite destabilizing.\n\nI was quickly motivated when I saw what concretely looks likes an app built with Material Design. It's clean, intuitive, and got a lot of small details (click button effects and animation, for example) that make makes a good and joyful user experience.\n\nWhat I thought at some point of my MUI learning journey\n\nI first started using so much MakeStyles (a bad habit that instinctively came from being used to bootstrap)\n\nThis was me doing it in the wrong way. The significant value of using Material Design is it's higher; thus, fewer styles maintenance headaches and less CSS used everywhere. This is done by using themes that you can change without a single local override. One single source of truth (If you ever found a lot of abusive usage of !important in CSS files, you'll understand what I mean).\n\nAnother thought that crossed my mind is the number of components\n\nYou'll have everything you could imagine, at least for my case. There is a problem with this! Because it means that my app will carry the whole time all the Material Design components even if it uses only 25% of its components. So I concluded that for small apps, it's rather better to use lighter UI systems.\n\nLast thought, the style of Material Design should be accepted by the final client.\n\nIf you have an extensive enterprise application and find MUI the best choice, you should make sure the style pleases your final client. Because if you choose it and change some deep behaviors, it won't be beneficial. On the contrary, I think it will be a pain in the ass for developers.\n\nThe big question is, should you learn it?\n\nIf you need an entire design ecosystem\n\nYour client and designers embrace the style of Material Design (it's immediately recognized as the Google style)\n\nThe client can't afford designers' fees and need some default functionalities of Material UI.\n\nFor Android apps, the original purpose of Material Design was for designing Android apps.\n\nGoogle is behind it (good maintenance, good doc, evolutions based on popular functionalities such as dark/light mode). Your invested time won't be in vain.\n\nFor curiosity or your portfolio (More than 2M npm weekly downloads)\n\nIf you are patient, you need some time to learn it üòú\n\nNow, your turn! what do you think about Material Design? Have you used or are you using it? Please share with us, I'll update this article by adding your valuable feedback and I'll tag you üòâ\n\n[UPDATE]: Here is valuable feedback from Michael Nagy that uses Material Design at work.\n\n\"I think it depends. We chose Material UI for the app we are building at work, and I think it was a great choice for that. It allows us to be relatively consistent between engineers, and gives us a strong foundation without spending too much time with our own design. But for my personal projects, I feel that it is too heavy weight.\n\nThe biggest challenge we're facing now is that we're using v4, and with v5 recently released, there are a lot of changes between the two, especially the import paths. It's going to be annoying to upgrade, so I wish they made the upgrade path a little easier.\" - Mickael Nagy\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it, if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/3a249f4aa6d9"
  },
  {
    "id": "cdc5cb677cb4",
    "content": "My VSCode Setup & Plugins I Can't Code Without\n\nHaving the right environment and tools change the play!\n\nSeveral times, I experienced some wow effects when coding on VSCode. Not because of my coding skills (they are ordinary, hihihi) but because of my tools and how my VS Code is configured.\n\nThis article is about the VS Code plugins I can't live without!\n\nLet the story begin!\n\nAuto Rename Tag\n\nAutomatically rename paired HTML/XML tag.\n\nHow it will change your coding:\n\nBracket Pair Colorizer\n\nThis extension has seen wilder success than its creator could ever dream of. It's a customizable extension for colorizing matching brackets. No more searching which bracket corresponds to which.\n\n[UPDATE]: As Teekka feedback says, the Bracket Pair Colorizer functionality is from now on a built-in feature available at the latest VSCode.\n\nIt explains how successful this plugin was among developers ‚ù§\n\nThis extension will allow you to see matching brackets with colors.\n\nHow this will change your code:\n\nES7 React/Redux/GraphQL/React-Native snippets\n\nIf you are a React developer, this extension is a must-have.\n\nIt provides you with convenient snippets for your daily tasks.\n\nHow this will change your code:\n\nIf you use React with JS, you may want to keep Emmet snippets. If it's the case, here is the configuration to do so.\n\n\"emmet.includeLanguages\": {\n    \"javascript\": \"javascriptreact\"\n  },\n\nIndent-rainbow\n\nSimple yet powerful. This extension makes indentation more readable.\n\nHow this will change your code:\n\nLive Server\n\nI think most of you will already be familiar with this fantastic extension. It launches a local development Server with a live reload feature for static & dynamic pages. Like magic!\n\nHow this will change your code:\n\nMDX\n\nFor MDX lovers. This extension provides syntax highlighting and bracket matching for MDX (JSX in Markdown) files.\n\nVscode-styled-components\n\nFor styled-components users and lovers. This extension is a syntax highlighter for styled-components.\n\nHow this will change your code:\n\nDotENV\n\nIf you use DotEnv in your project, you may be interested in this extension supporting dotenv file syntax.\n\nHow this will change your code:\n\nIf you don't know what I'm talking about:\n\nPrettier - Code formatter\n\nThe famous prettier, I think it's self-explanatory and wildly used üòâ\n\n\"editor.formatOnPaste\": true,\n\"editor.formatOnSave\": true,\n\nQuokka.js\n\nA productivity tool for rapid JavaScript / TypeScript prototyping. Runtime values are updated and displayed in your IDE next to your code as you type.\n\nHow this will change your code:\n\nBonus\n\nUnfortunately, I didn't get the time to learn and discover Svelte, but based on data and stats, it's loved by developers and used in several companies. I've installed its VS code extension but couldn't yet discover them:\n\nSvelte\n\nSvelte language support for VS Code\n\nSvelte 3 Snippets\n\nSvelte 3 Snippets for VS Code\n\nSvelte Intellisense\n\nProvides IntelliSense for data, events, slots, etc., in components.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it, if you find it worth it, would you please support me by becoming a paid member. A part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day so that it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter here.",
    "link": "https://medium.com/p/cdc5cb677cb4"
  },
  {
    "id": "ab0f46062da0",
    "content": "What exactly is an API?\n\nWhat is the main purpose of an API? What are some examples of API?\n\nAPIs are used everywhere. They are crucial and essential to web development and web apps in general. So what is an API? What are its types? What are some examples of APIs?\n\nWhat's a Web API?\n\nAPI stands for Application Programming Interface.\n\nWhen it comes to web development, there are many existing Web APIs.\n\nAPI is another app you can request and enable data transmission between your app and the API.\n\nHow to see it?\n\nTypes of APIs\n\n- Public\n\nAs its type is named, those APIs are public and open to use by any third-party developers. It doesn't mean that every public API is an open bar to everyone. Some APIs come with restrictions such as registration, OAuth authentication...etc.\n\nExample of these APIs:\n\nI've talked about some must know JavaScript APIs, such as the famous fetch API in the following article:\n\n- Partner\n\nPartner APIs are exposed by or to business partners only (like the protected attributes of a Java Class). They are not available publicly. You need specific access to them. Only partners who have that can access them.\n\nExample of these APIs:\n\nThese APIs facilitate business-to-business activities. We can cite, for example:\n\nAmazon Web Services\n\nSalesforce\n\n- Private/ Internal\n\nPrivate APIs are hidden from external users and only exposed to internal systems. You may have already used these APIs in your app. They are meant to communicate and exchange data across different internal development teams for better productivity or service reuse.\n\nExample of these APIs:\n\nThese APIs facilitate internal services. We can cite, for example:\n\nHR systems.\n\nInternal company Payroll system\n\nBackend APIs for your app\n\nThe good thing about public API is that you can build your portfolio with them:\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you. If you enjoy it. If you find it worth it. Would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day so that it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/ab0f46062da0"
  },
  {
    "id": "6ed7b5243c45",
    "content": "Write less and do more with ES6 new syntax!\n\nWrite less and minimal code with ES6\n\nIn this article, I'm gathering my top new syntax brought with ES6 I loved and used in my code. You may see the following suggestions so short that they make the code unreadable. I think that it's a matter of practice, and it's good to have less code for the browser to process and display.\n\nThis list is inspired and gathered from ES6 documentation.\n\nLet the story begin!\n\nTernary statements\n\nNull and undefined validation\n\nReturns the right hand when the left-hand operand is null or undefined. So practical in everyday developer's tasks:\n\nDefault params\n\nIntuitive and straightforward default values for function parameters\n\nOptional chaining\n\nReading deeply nested property without the hassle of checking each time of its validity:\n\nDestructuring Assignment (Object & Array)\n\nIntuitive and flexible destructuring of Arrays and objects into individual variables during the assignment. Less code!\n\nSpread Operator\n\nSpreading of elements of an iterable collection (like an array or even a string) into both literal elements and individual function parameters.\n\nIterators\n\nIterator & For-Of Operator\n\nSupport \"iterable\" protocol to allow objects to customize their iteration behavior. Additionally, support the \"iterator\" protocol to produce a sequence of values (either finite or infinite). Finally, provide conveniently of operator to iterate over all values of an iterable object.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day so that it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/6ed7b5243c45"
  },
  {
    "id": "af77a629274f",
    "content": "5 Naming Principles Every Developer Should Keep in Mind\n\nGolden rules when it comes to naming variables.\n\nOne of the crucial things to learn when coding is naming strategies. If your team doesn't have project naming conventions or principles, you should propose that. As the app grows, having a naming strategy that every developer respect is mandatory.\n\nMaybe you're already a lead developer or a senior, and you have your own ways of naming variables. These naming conventions and rules must be shared and written in an official document shared with the team.\n\nAt some point, your team needs to speak the same language. That means to have naming principles, and docs for the architecture every developer needs to respect.\n\nSee ya üòâ\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it, if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day so that it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter here.",
    "link": "https://medium.com/p/af77a629274f"
  },
  {
    "id": "91c7116d195b",
    "content": "VS Code Shortcuts Every Developer Should Know\n\nVS code shortcuts I can't code without\n\nEvery developer has his own frequently used shortcut when coding. This article covers my top VS Code shortcuts I can't code without!\n\nFor curious developers, this might be useful to boost their productivity for other developers that already have their own favorite shortcuts they use daily. Please share them with us!\n\nLet our story begin... and let's see the magic of VS Code shortcuts!\n\nMoving code line UP/DOWN\n\nSuper important shortcut I use multiple times. Moving the whole line of code up or down. All you need to do is putting your cursor on the line you want to move and click on Alt + Up for moving up or Alt + Down to move down the line.\n\nCopy code line UP/DOWN\n\nNow, same as before, except that you are copying a line, up or down, and not moving it. You need to put the cursor on the line you want to copy and press Shift + Alt + Up or Shift + Alt + Down.\n\nRename a symbol\n\nWho didn't use a random name to make the code work first and then clean the whole code. One of the worthy things you do frequently is renaming your variable. To rename a variable, select it and press F2. Write a new name and hit enter. And booom, all your variable occurrences will be updated.\n\nFormatting your code\n\nTo see your whole code formatted and well-indented, doing it with your hands is just frustrating. Every developer will change the format every time they touch that code. VS Code can do that in the blink of an eye by pressing on Shift + Alt + F for the whole file, or Ctrl + K Ctrl + F for a code selection.\n\nMultiple cursors\n\nThis is an old trick that I used a long time ago with the sublime editor. It's also possible on VS code with Alt + Click. on Windows, it's Alt + Click.\n\nHow does it work? You need to add cursor at the position you want to select while holding Alt. You'll see a cursor in each chosen position. You can then type what you want. It will appear in every position you selected earlier.\n\nComment and uncomment\n\nFor several reasons, when you want to comment on a code or a section, it's so efficient to know the shortcuts. For one line, put the cursor on the line you want to comment on and press Ctrl + Alt + /. For a section, select the code section and press Ctrl + Alt + /. This shortcut works like a toggle. You can add and remove comments with it.\n\nGo to errors and warnings\n\nOne of VS code's jobs is to make coding fun. You can open the Problems tab by pressing on Ctrl + Shift + M.\n\nYou can then jump quickly to errors and warnings in the project and fix them. This is one of the things once you discover it, you don't live without it!\n\nThese shortcuts are the most frequently used in my daily work. You can learn more and implement them in your coding habits. It's so powerful that you won't see it right away, but your productivity will show up with time! To see the whole shortcut on your VS code press Ctrl + K + Ctrl + S.\n\nWhat's even super interesting you can create your own shortcuts. I don't recommend it unless you know what you are doing. Each time you change your laptop or reinstall VS code, you must add your own.\n\nAll VS Code shortcuts.\n\nShould you know all these shortcuts?\n\nNo, the trick is to observe your behavior and habits when coding. If you have some repetitive actions, then knowing their shortcuts will definitely boost your productivity.\n\nThe message I want to share in this article is that discovering those shortcuts may lead you to an awareness situation where you give it some thought and improve your coding habits and your way of coding. Coding is all about continuous improvement. No one is perfect!\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you, if you enjoy it, if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day so that it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter here.",
    "link": "https://medium.com/p/91c7116d195b"
  },
  {
    "id": "9f4fb8e50b9f",
    "content": "What developer type are you?\n\nLet's have fun üòú\n\nHi, this article is for fun. I gathered some traits that differ from a developer to another. Check what type of developer you are! Let me know in the comment section about your type üòú\n\n1- Linux style-oriented or Window style-oriented?\n\n2- Which loading batteries style?\n\n3- Solo developer or team developer?\n\n4- Procrosroating developer or doer developer?\n\n5- Comment lover developer or no comment developer?\n\n6- Giving credit and feedback or not caring at all?\n\n7- Organized developer or unorganized developer?\n\n8- Full-time coding or time for other life aspects?\n\nWhich type are you? For me, it's\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/9f4fb8e50b9f"
  },
  {
    "id": "83b61eba4501",
    "content": "Why every web developer should know about Semantic HTML\n\nWhy is semantic HTML essential?\n\nA semantic HTML gives meaning to your document for both the browser and the developer.\n\nLet our story begin!\n\nWhat's Semantic HTML?\n\nTake for example <h1> tag. Most browsers will render their text with a large font size to make it look like a heading (of course, you could style it to look like anything you wanted).\n\nIt's true that the <h1> text renders a top-level header, but semantically speaking, it has no meaning. We could have styled any other element a space for example, like a <h1> look.\n\nSemantic HTML is HTML elements that are used the right way for the right job.\n\nWe shouldn't use <h1> just because of its large text size. The same goes for other HTML elements. HTML should be coded to represent the data that will be populated with and not based on its default style.\n\nThe look of HTML elements is the sole responsibility of CSS, not HTML.\n\nWhy should you use it?\n\nReason #1: maintainability\n\nRespecting and coding semantic HTML makes it easier to maintain the code and have a well-organized code.\n\nIt's good to give meaning to our code for developers and browsers that will interpret HTML and display the web page accordingly.\n\nReason #2: SEO\n\nAnother essential advantage of semantic HTML is its impact on SEO. Google has bots that index web pages.\n\nTheir job is to scan your website's source code and extract the meaning from it. Of course, if you code without respecting rules, bots won't get any meaning from your code, and that's not good for your web page referencing on the web. Having specified tags for semantic HMLT such as section, nav, footer ...Etc, makes it easier for them to do their job.\n\nGoogle SEO Bots love semantic HTML\n\nReason #3: Accessibility\n\nSemantic HTML also helps your web page accessibility (screen readers can use it as a signpost to help visually impaired users navigate a page, keyboard navigation, ...etc.). Anyone has the same right to access your web page despite whatever their disabilities or handicap are! For those users, finding blocks of meaningful code is significantly easier than searching through endless divs with or without semantic or namespaced classes, isn't it?\n\nIf you want to learn more about Accessibility:\n\nWhat does it change in terms of rendering?\n\nNothing! Yes, it doesn't change anything. Having the following code with divs or with specified tags doesn't change the web page look. But, when you look and compare as a human, you'll definitely understand quickly the code with HTML tags rather than the one with divs.\n\nHow do we use semantic HTML?\n\nWhen writing HTML code, the key idea to keep in mind is using tags representing the data you want to display. Use nav for a navbar, header for the page header, footer tag for the page footer, ...etc.\n\nSome of you may say: \"Alright, miss, but how can I know when to use each tag\". Here is a good reference that will help you start your trip with writing semantic HTML:\n\nTakeouts\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/83b61eba4501"
  },
  {
    "id": "2b872b381e88",
    "content": "Have you ever got CORS Errors?\n\nGet red by this frustrating error by understanding it!\n\nHave you ever got Cors Errors? What is a CORS error? Why do CORS errors happen? How do you fix a CORS error?\n\nToday's story is about understanding CORS errors so you won't be frustrated anymore with this error on your browser's console.\n\nLet the story begin...\n\nUse case scenario\n\nImagine I have a website that displays the weather app from another source. My website is not allowed because the weather app is not my application, and if anyone has access to any website, then the internet won't be safe.\n\nTherefore, you need to be allowed for security reasons to access any app (like any house). The keyword to make my website access the weather app possible is by using CORS.\n\nWhat's CORS?\n\nCORS refers to Cross-Origin Resource Sharing.\n\nAn HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. - Developer Mozilla\n\nIn one sentence, CORS is a mechanism that allows controlled access to a resource (The weather app in the scenario above) located outside your website.\n\nHow does CORS work concretely?\n\nCORS's job is to add HTTP headers to allow the local server (my website) to keep a list of allowed origins. Requests from the allowed origins are permitted to use assets.\n\nWhen the other domain is not enabling CROS for your domain, the CORS error occurs.\n\nSome questions you may be asking?\n\nWhy can I access public API without problem?\n\nWe all have access to public API to do funny things, so how does it come that we didn't get a CORS error? Well, those APIs are explicitly provided to the public. Therefore, they allow access to anyone by setting origin to:\n\napp.use(cors({ \n    origin: '*'\n}));\n\nWhy do I access and get my website resources without a problem?\n\nBecause simply put, you request resources from your domain to your domain. It's the same origin. Same-origin requests are always allowed.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/2b872b381e88"
  },
  {
    "id": "fc9144ef959a",
    "content": "Let's Understand AJAX\n\nWhat is AJAX, and why is it used?\n\nHave you ever heard of AJAX? Do you know why we use it and why it's super important in web development?\n\nOur story today is about understanding AJAX in a few minutes! We'll cover:\n\nUse cases of AJAX.\n\nWhat to know about AJAX?\n\nGet a mental picture with the help of a video.\n\n1. Use cases\n\nWhat happens without AJAX?\n\nLet's take, for example, the Medium home page. More precisely, the searching feature. Let's imagine the following classical scenario:\n\nWe search for a specific thing in the searching bar.\n\nThe browser makes a request with the keyword you typed to the server.\n\nResults are returned, and then the page gets refreshed to display them.\n\nThe problem with this way of doing things is the terrible user experience. For each search, the user must wait for the page to reload the whole thing with the search results.\n\nWhat happens with AJAX?\n\nWhat can we do to prevent reloading the whole page for each search request we make? A solution for this could be reloading just the part that displays the result on the page, right? Well, that's precisely what AJAX's job is.\n\nSince we don't load the whole page, we don't need to reload the page resources (JS, CSS, images, ...Etc). Therefore there is no wasted time in reloading things.\n\nBecause we load only data of a specific part on the page, the web application appears reactive to the users. They won't even notice the time between requesting a search and displaying results.\n\n2. What to know about AJAX?\n\nAJAX refers to Asynchronous JavaScript And XML.\n\nAJAX is not a programming language.\n\nIt's a technique or a pattern in web development that makes it possible to load only a part on the page.\n\nReal-life examples are:\n\nGoogle search (the page isn't refreshed each time, only results area get refreshed)\n\nWhen you clap for a Medium story\n\nWhen you like a post\n\nWhen you follow an account\n\n... examples are endless\n\nIs it still used nowadays?\n\nWith modern technologies such as Angular, React, Vue ...etc. AJAX is being gradually replaced with JS functions that implement the same technique behind the scene.\n\nThis doesn't mean that it's not used anymore. I still see AJAX calls in some projects I worked on.\n\n3. Mental picture\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io. Sign up for our free weekly newsletter here.",
    "link": "https://medium.com/p/fc9144ef959a"
  },
  {
    "id": "4ac8decdccad",
    "content": "Learn visually about HTTP status codes\n\nBuild a mental picture about HTTP request status\n\nI've already written the story behind the HTTP most important request's code in the following article:\n\nIts video is out!\n\nI hope you like it and you'll support my web stories channel ^^\n\nSee ya!\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/4ac8decdccad"
  },
  {
    "id": "407927b766ba",
    "content": "Understanding CSS Positioning from A to Z\n\nLearn CSS position for life!\n\nA website frontend is all about positioning. We can't see anything that makes sense without proper positioning of web application front elements.\n\nThis article will give you the essential knowledge about CSS positioning and a mental picture for your future frontend apps.\n\nLet the story begin!\n\nA CSS position\n\nA position in CSS is a property that gives you the power to position elements on your app's front. It got different options:\n\nA static position (the default one)\n\nA fixed position\n\nA relative position\n\nAn absolute position\n\nLet get deeper üëÄ\n\nThe static position\n\nThis option will position an element statically either on top, bottom, left, or right. And by the way, this position option or value is the default value of each HTML element.\n\nSince the static position is by default the value given to any HTML element, we don't need to explicitly set it with position: static\n\nThe fixed position\n\nThe fixed position is a position that makes an element relative to the viewport.\n\nTherefore, a fixed position of an element is relative to the document, so its value is unaffected by scrolling. It stays fixed to the document even when scrolling.\n\nThe relative position\n\nA relative position is as it is named relative to its current position. It's like a static position that we can move with left/right/top/bottom values.\n\nThe absolute position\n\nAn absolute position is where the element is relative to the closest parent that doesn't have a static position.\n\nDemos\n\nI recommend forking the project and trying to play with CSS values and position properties.\n\nVideo version\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/407927b766ba"
  },
  {
    "id": "22ab817f58e5",
    "content": "The Most Used JavaScript Testing Tools\n\nTools to use for testing your JS applications\n\nTesting is mandatory in any app. It's the most appropriate way to maintain and have a healthy app.\n\nIn this article, I cover the most used tools for JavaScript apps such as React JS, Angular, or Vue JS applications.\n\nThe goal behind this article is to help you discover the best existing tools, the difference in the hope that you make the right choice for your app, or propose and defend a better choice for your team in a company.\n\n#1- Jest\n\nJest is a famous testing framework developed and used by Facebook to test React components. With time it became so successful that it was adopted by well-known companies such as Uber and Airbnb.\n\nIts usage was extended and adopted by other technologies such as Angular, TypeScript, Node, Vue, and much more.\n\nSome stats\n\nAlmost 15M downloads per week\n\n#2- Enzyme\n\nA JavaScript testing Utility for React to test React's components' output. You can manipulate, traverse, simulate a runtime given the output.\n\nSome stats\n\nAbout 2M downloads per week\n\n#3- React testing library\n\nThe React testing library is built on top of the DOM testing library. Again for React components and apps. It's a very lightweight solution for testing React components and encourages better testing practices.\n\nSome stats\n\nAlmost 9M downloads per week.\n\n#4- Mocha\n\nThis framework is rich in terms of features. It is running on Node.js and in the browser, making asynchronous testing simple and fun.\n\nThe mocha tests run serially, allowing for flexible and accurate reporting while mapping uncaught exceptions to the correct test cases. It can be used for TDD (Test Driven Development) and BDD (Behavior Driven Development).\n\nSome stats\n\nAround 6M downloads per week.\n\n#5 Chai\n\nA popular testing library for node and the browser. Chai can be paired with any JavaScript testing framework. It is often used with Enzyme and Jest.\n\nChai makes testing much easier by giving you lots of assertions you can run against your code.\n\nSome stats\n\nAbout more than 4M downloads per week.\n\nMy point of view...\n\nIf I had to choose a testing tool for my app, I'd go for Jest. When I discovered and used Jest for the first time, I wasn't at all comfortable with it. The main reasons are my habits with Karma. I'd run one test if I wanted to and get results right away on the browser, making my work as a developer easy and more productive.\n\nJest won upon Karma because of its speed. When you want to push your code, you need to systematically run all tests to check that you're not breaking something you didn't notice or expect, and doing that with Karama takes a lot of time. The same goes for deployment and building on GitLab.\n\nI abandoned the readability comfort of Karam to these Jest big advantages:\n\nThe framework is compatible with Angular, React, NodeJS, VueJS, and other babel-based projects.\n\nFaster than other tools.\n\nThe React community.\n\nCan capture snapshots of React trees or other serializable values to simplify UI testing.\n\nBeing so popular (15M downloads/week) means that there will be more people that can help when you need it on the internet (like StackOverflow).\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf my writings have touched you if you enjoy it if you find it worth it, would you please support me by becoming a paid member, a part of your fees will be sent to me.\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIt means the world for me that my touch creates a valuable small thing in the world ... thank you ‚ù§\n\nIf you like to read my articles ... and want to receive my articles (I don't publish every day, so it won't spam you. You can always unsubscribe without a problem) ‚ô•Ô∏è\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/22ab817f58e5"
  },
  {
    "id": "e11e60f07071",
    "content": "My favorite JavaScript plugins for Slider Animations\n\nBest slider tools to know for your app's frontend\n\nSliders are so popular nowadays. They present a lot of data in a light way that doesn't make the user uncomfortable with the amount of information.\n\nHaving good references in some places is helpful when you need to add a side system to your app üòâ. In this article, I've gathered my favorites!\n\nSwiper\n\nSwiper is a modern and free mobile touch slider with hardware accelerated transitions and outstanding native behavior. It's good since the mobile users' percentage is high nowadays. This slider is designed to be used for mobile-native or hybrid apps.\n\nSupports\n\nIt supports modern libraries and frameworks such as Angular, ReactJs, Svelt, VueJS ...etc. Its focus is on modern apps and platforms to bring the best experience and simplicity.\n\nDemos\n\nI give it a ‚≠êÔ∏è for its awesome documentation!\n\nSlidr.js\n\nSlidr.js is a lightweight javascript library. It's independent and doesn't rely on other libraries to work. Perfect choice if you seek simplicity and a small app's size.\n\nI give it a ‚≠êÔ∏è for its simplicity, awesome effects and its small size!\n\nSlick slider\n\nA responsive slider with a lot of options to customize your slider.\n\nDemos\n\nI give it a ‚≠êÔ∏è for its variety of options!\n\nSly slider\n\nA JavaScript library. It focuses only on one-directional scrolling.\n\nIf your app needs only this one-dimensional animation, then this may be your perfect choice.\n\nI give it a ‚≠êÔ∏è for its parallax mode aniamtion\n\nFlickity\n\nOne of the good existing carousel libs that have a vanilla js option. Suitable for WordPress apps and apps that use jQuery and plain JavaScript.\n\nGive it a ‚≠êÔ∏è for the control it gives you to customize your carousel\n\nDemos\n\nI love the first and second sliders. The first one is rich in terms of its propositions and options it provides you. The second choice gives you incredible results too, with a light size. It's a minimalist solution, and I like that. What about you?\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life. Let's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/e11e60f07071"
  },
  {
    "id": "333b45d4476b",
    "content": "5 Things that developers tend to implement when they already exist!\n\nValuable things that exist and don't need to be implemented in the user interface\n\nThis article can also be helpful for UI/UX designers and BA (Business Analysts). There are frontend functionalities that can be quickly done with less cost by the already existing web tools and technologies.\n\nI've worked on several projects, big ones, small ones ...etc. I've been confronted several times with incoherent choices and sometimes incoherent implementation that exists and don't need to be implemented. Because implementing them will be a waste of time or money since we need to keep maintaining them and fixing bugs when needed.\n\nDevelopers have their own responsibilities in this case, and that's why I'm sharing some use cases that I've gathered so far! We, as developers, need to collaborate with BAs to suggest more interesting and intelligent solutions. Unless the client has specific needs, there is no reason to waste time on implementing an existing functionality.\n\nHere are some examples...\n\nInput that uploads files\n\nThe accept attribute exists in HTML5 to specify the type of files that the user can upload. He won't be able to upload other than files with the accepted extensions.\n\nHow to defend this solution:\n\nNo need to implement the full functionality. It is built-in and recognized by HTML\n\nNo need to add extra control (at least on the client side)\n\nOptimum user experience, time is money. You don't waste the user's time by selecting whatever they want and, in the end, get an error. You'll display a tooltip and a message beside the input's label telling the user that you accept only PDF. If the user didn't read the message (which often happens), he would know about that when the upload window opens and shows only the .pdf extension.\n\nSpellcheck\n\nThis is a rare use case for me. But, I'm putting it here so that you are aware of its existence. We all make spelling errors. Having the spell checker makes the user experience more comfortable and pleasing.\n\nPoster\n\nAnother good to know option. When you are displaying videos on your web app and want to have an homogeneity between videos, one way of doing this is by having a poster for each video with the same design and a different title each time.\n\nTranslate\n\nThis option is used to tell the browser whether the content is to be translated or not. So this option will translate a text when the page is localized, or not if you don't want to.\n\nDownloading\n\nThis option is already well known. It's good to know and keep in mind whenever you need to download files.\n\nThe last thing I want to talk about is taking profit if the disable option for buttons. Provide your visitor with a great experience.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/333b45d4476b"
  },
  {
    "id": "6f9be2d65423",
    "content": "3 Unique And Fun APIs ...\n\nTo play with and use to create an awesome app\n\nHere is a good list of APIs that can add many features and magic to your app with less effort. There are also inspiring to make applications with and add them to your portfolio.\n\n1- Background removal PI\n\nThis API is a fully automated background remover. If you have to deal with image backgrounds, this API will do the job and let you focus on your other app's tasks.\n\nIt's based on AI technology and can be easily integrated into your app in a few lines of code.\n\nCode example:\n\n2- Random Jokes API\n\nYou may want to add some life and humor to your app. In his case, this API will do the job in a few lines of code.\n\nCode example:\n\nThe API gives you many options, such as searching for a specific joke or getting jokes based on a specific category.\n\n3- The Meal API\n\nThis is a super data source to create a meal app and add it to your portfolio. The API provides you with meal categories, images, ingredients, videos, the country of the meal, and more features.\n\nIt's also good to use to build your real meals app with the API data first and when it's done connect it with your own meals DB.\n\nCode example:\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/6f9be2d65423"
  },
  {
    "id": "ee87637751f7",
    "content": "OOP explained with the Kdrama Squid Game\n\nUnderstanding Object-Oriented Programming with Squid Game\n\nOur today's story is about OOP, Oriented-Object Programming. This is the basic of basics for any programmer and a must-know.\n\nI enjoyed so much a Korean series and wanted to explain this programming model with this Kdrama. Since it's so popular, I hope you've already watched it.\n\nIt's the Squid Game. It has become a famous Korean Netflix series. I'm a big fan of Korean drama. I watched almost all of the comedy and thriller series from my 17s.\n\nAnyway, this series is violent but is well orchestrated and well done. It's a bit like the Casa de Papel series.\n\nLet's start!\n\nThe philosophy behind Object-oriented is seeing everything as connected objects. It has several concepts and principles:\n\nAbstraction\n\nInheritance\n\nPolymorphism\n\nEncapsulation\n\nLet's first start with Object in case this is new for you. This programming model is around designing and implementing a client's needs based on objects and classes.\n\nLet's say you want to display a list of books in your web application. You can imagine the book as an object, the writer as an object, and a class that will contain our list of books and eventually methods to sort or filter the list of books and so on.\n\nPolymorphism\n\nIs the capability to exist in different forms or morphs\n\nThe word Polymorphism refers to many morphs or forms. It's also the process of performing a single action in different ways.\n\nIn the Squid Game, the older man played different roles. He acted as the creator of the whole game, as a player in the game (number 001), and as a game host.\n\nInheritance\n\nInheretance allows classes to inherit common properties from parent class\n\nInheritance is about creating another class or form based on another existing form or class. An example would be a parent Person class (with name, age, and weight .. all the common things between humans) and use this class as a parent class for Baker class, Carpenter class, and so on.\n\nIn the squid game, players are the perfect example of inheritance. All of them inherit the same parent properties like dress code, food, task. With that, we can have different players with different playing strategical methods.\n\nEncapsulation\n\nEncapsulation means it binds data and code together into one unit.\n\nAs it is named, it's about unifying and grouping data and code into a single unit and protecting the whole unit. Data is hidden from other units (classes) and can only be accessed through the current class's method.\n\nIn the Squid Game, the whole game can be seen as a big Encapsulation. The properties of the Squid Game class are the players, VIPs, Host .... and the Tasks are the functions of the Squid Game class.\n\nAbstraction\n\nAbstraction displays only the important information by hiding the implementation part.\n\nAbstraction is a process that displays only the necessary information and hides the rest. The role of this concept is code refactoring and reducing the programming efforts by gathering data in an abstract class and then selecting only the needed information from the whole data.\n\nIn the Squid Game, Tasks can be interpreted as an Abstract class. No player knows the process behind the task they are given. So players know the task (a piece of information) of the complete information. The same goes for soldiers, they prepare everything for the task, and they are all hidden.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/ee87637751f7"
  },
  {
    "id": "e203928dc0ed",
    "content": "5 GitHub Repos For Interviews & strengthening your brain muscles\n\nBe ready to get the mission!\n\nHi,\n\nThis article will provide you with some good resources to be:\n\nPrepared and confident for your interview.\n\nTo maintain your skills up to date.\n\nTo keep learning.\n\n#1- Coding interview university\n\nWhat's better than a real developer's shared experience at getting a job he dreamed about?\n\nIt is translated to several languages\n\nIt got some cheat sheets\n\nIf you want to work as a software engineer for a large company, this repo will be helpful for you!\n\n#2- Tech Interview handbook\n\nI think that I have already talked about this repo in a previous article. But in case you don't know about it, this repo is an excellent resource to prepare for interviews. It provides you with:\n\nHow to prepare for coding interviews\n\nInterview Cheatsheet - Straight-to-the-point Do's and Don'ts\n\nAlgorithm tips and the best practice questions categorized by topic\n\nInterview formats of the top tech companies\n\nBehavioral questions asked by the top tech companies\n\nGood questions to ask your interviewers at the end of the interviews\n\nHelpful resume tips to get your resume noticed and the Do's and Don'ts\n\nFront-End Interview preparation\n\nWhat I like the most about this repo is that the whole process is provided. From preparing, applying, passing interviews to offer negotiation. Because this field needs more than technical skills.\n\n#3- How to secure anything\n\nThis is the best repo that gathers all that you need to know about security. You may be wondering: \"Do a front-end developer need to learn about security\". Well, the system security issues are backend developer tasks. But you can't move on to the next level if you don't have the whole picture as a developer. For small systems, you won't care about it. You won't even notice it. But when you get more experience, your challenges will grow too. You'll work on bug systems, and that's when the whole picture becomes crucial!\n\n#4- Interview by Olshansk\n\nSo large in terms of what it can provide to developers. There are books, videos, good links, interview questions based on a specific language. I wouldn't call it \"Interview\", though. Anyway, this repo is like a magic box. It's endless. It got exciting and unlimited things to learn.\n\nDo you save whatever you discover and find interesting on the net? Well, this repo is such a thing where many exciting links and knowledge are gathered and shared with the world.\n\n#5- System design primer\n\nAs you can guess from its name, it's about learning system designing. At school, we often start by learning how to code, the algorithm, syntax, and all the stuff, but they forget the most crucial part: conception and design. We need to think first about the whole thing, the implementation, the constraints, and much more. You may have the chance to study that. For me, it was a self-taught skill.\n\nThe importance of this skill appears for developers when they get more experience! If you are a beginner, trust me, you'll need this skill!\n\nWhich one is your favorite?\n\nI really can't choose between these beauties. I love learning and love all of these resources. If I really have to choose one of these, I'd choose the system design primer repo. Since the whole app's story starts with designing! If it's well done, the story grows and ends to be a happy ending. If not, it ends as a horrible nightmare.\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/e203928dc0ed"
  },
  {
    "id": "58cd5c7f2b68",
    "content": "Practical RxJS Guide to Learn RxJS for Life!\n\nLevel 4: Deep understanding of RxJS patterns (advanced++)\n\nAs promised in my RxJS series (level0, level 1, and level 3), here comes the advanced part of RxJS with observables execution scheduler and testing. I admit that it took a while, but it's a high-quality article üòú\n\nWhen I finished the article. It was so long, and since our mind's attention hates that, I decided to divide it into two:\n\nSchedulers in RxJS\n\nTesting Observables and subscriptions\n\nControlling the observable execution with schedulers\n\nTesting... because an untested app is an unmentionable one!\n\nEt voila!\n\nMy today's story ends here, I hope you enjoyed it and learned from it ‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.\n\nMore content at plainenglish.io",
    "link": "https://medium.com/p/58cd5c7f2b68"
  },
  {
    "id": "9842bbe0a571",
    "content": "RxJS Testing ... Is My Observable Working Correctly?\n\nUnit testing in RxJS, all that you need to know!\n\nToday's story is about testing üòà\n\nTesting is a must-know in any software development process. It guarantees that the whole system is still working and no regression has occurred while developing new features or fixing bugs.\n\nOf course, if we do tests for every newly implemented feature. Otherwise, the whole logic of preventing regression and system bugs won't work.\n\nObservables are a must-know and used in reactive programming. With new frameworks and libraries such as Angular, React, and VueJS. This is the cleanest and appropriate way of handling data in your app. Thus, knowing how to test observable is needed too, and this article is about this!\n\nWriting unit tests is crutial these days\n\nThere is one object that we use to test Observable. If you read about the Observable Schedulers, you'll probably remember that it's the TestScheduler. In a straightforward sentence, this object is:\n\nThe way we test asynchronous code, synchronously\n\nAs you can see, we test at the end of the chain, so having complete knowledge about RxJS observables is crucial. Thus, some required knowledge is necessary before reading the following:\n\nThe entire knowledge and notions you need to know about RxJS\n\nUnit testing (only if describe(...), beforEach(..), it(...) don't talk to you)\n\nMarble diagram\n\nHow can this guy do that?\n\nBy virtualizing time:\n\nThe TestScheduler will effectively use its own internal timer to test the asynchronous code if your observable takes a T time to complete. The TestCheduler will advance time. You won't have to wait.\n\nOne issue with it\n\nThere is a limitation when using this guy, unfortunately. It only supports only the code that works with AsynchSechduler. (I talked about this scheduler in this article. If this doesn't speak to you, I recommend learning about schedulers).\n\nAdvantage\n\nThis guy gets instantiated by passing to its constructor a function that you want to use for equality tests. The big plus with this information is its flexibility. It doesn't force you to use a specific testing framework. Whatever you want to use (Jest, Karma, Chai ....), it doesn't matter for the TestScheduler.\n\nCode example\n\nThe instantiation\n\nWrite your test by using the run() method with the helpers object.\n\nThe helpers as it is called ( you can call it whatever you want. The job of this object is to help you with your test.\n\nAnother way of using the helpers:\n\n‚Äî If you are expecting a cold or hot Observable, then you can use:\n\n‚Äî And so on with the other helpers ...\n\nComplete code examples with Chai\n\nFYI: you don't need to use Chai. As I told you earlier, you're free to choose your testing framework.\n\nFor the test suite, we need an instance of the TestScheduler\n\nBefore each test, we instantiate this guy\n\nEach test will execute the beforeEach(...) and the run() method of the TestShcheduler object.\n\nEach test uses helpers based on what the test expects (for a cold observable, we use helper.cold($theColdObservable).toBe(theExpectedProducedValues)\n\nEach test can use as many as helpers' built-in methods to test the expected values.\n\nThe tests use a marble diagram, a string containing special syntax representing events happening over virtual time.\n\nAaaand that's it üòõ\n\nMy today's story ends here, I hope you enjoyed it‚ù§\n\nIf you like to read my articles ... ‚ô•Ô∏è\n\nThank you ‚ù§\n\nIf you are interested in becoming a paid member, you may use my referral link. See you next time ^^\n\nDear reader, thank you for existing in my life.\n\nLet's get in touch on Medium, Linkedin, Facebook, Instagram, YouTube, or Twitter.\n\nSee my e-book about web essentials and general culture.",
    "link": "https://medium.com/p/9842bbe0a571"
  }
]